{"version":3,"file":"static/js/369.a58c9f0a.chunk.js","mappings":"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","sources":["../../core/src/instance/InstanceConcurrency.tsx","../../core/src/nav/InstanceWarningIcon.tsx","../../core/src/nav/WorkspaceStatus.tsx","../../core/src/instance/InstanceTabs.tsx","../../core/src/instance/useCanSeeConfig.tsx","../../core/src/runs/RunStats.tsx","../../core/src/runs/RunStatusDots.tsx","../../core/src/runs/RunStatusTag.tsx","../../core/src/ui/TabLink.tsx","../../ui/src/components/Page.tsx","../../ui/src/components/PageHeader.tsx","../../ui/src/components/Tabs.tsx"],"sourcesContent":["import {gql, useQuery, useMutation} from '@apollo/client';\nimport {\n  PageHeader,\n  Heading,\n  Box,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Icon,\n  Menu,\n  MenuItem,\n  Mono,\n  Popover,\n  Spinner,\n  ButtonLink,\n  Table,\n  Tag,\n  TextInput,\n  Button,\n  NonIdealState,\n  Page,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Redirect} from 'react-router-dom';\n\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {doneStatuses} from '../runs/RunStatuses';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {RunTableRunFragment} from '../runs/types/RunTable.types';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {\n  InstanceConcurrencyLimitsQuery,\n  InstanceConcurrencyLimitsQueryVariables,\n  ConcurrencyLimitFragment,\n  SetConcurrencyLimitMutation,\n  SetConcurrencyLimitMutationVariables,\n  RunsForConcurrencyKeyQuery,\n  RunsForConcurrencyKeyQueryVariables,\n  FreeConcurrencySlotsForRunMutation,\n  FreeConcurrencySlotsForRunMutationVariables,\n} from './types/InstanceConcurrency.types';\n\nconst RUNS_LIMIT = 25;\n\nconst InstanceConcurrencyPage = React.memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Configuration');\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  const {pageTitle} = React.useContext(InstancePageContext);\n  const queryResult = useQuery<\n    InstanceConcurrencyLimitsQuery,\n    InstanceConcurrencyLimitsQueryVariables\n  >(INSTANCE_CONCURRENCY_LIMITS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n\n  const content = data ? (\n    flagInstanceConcurrencyLimits ? (\n      <ConcurrencyLimits limits={data.instance.concurrencyLimits} refetch={queryResult.refetch} />\n    ) : (\n      <Redirect to=\"/config\" />\n    )\n  ) : (\n    <Box padding={{vertical: 64}}>\n      <Spinner purpose=\"section\" />\n    </Box>\n  );\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>{pageTitle}</Heading>}\n        tabs={<InstanceTabs tab=\"concurrency\" refreshState={refreshState} />}\n      />\n      {content}\n    </Page>\n  );\n});\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConcurrencyPage;\n\ntype DialogAction =\n  | {\n      actionType: 'add';\n    }\n  | {\n      actionType: 'edit';\n      concurrencyKey: string;\n      concurrencyLimit: number;\n    }\n  | {\n      actionType: 'delete';\n      concurrencyKey: string;\n    }\n  | undefined;\n\nconst ConcurrencyLimits: React.FC<{\n  limits: ConcurrencyLimitFragment[];\n  refetch: () => void;\n}> = ({limits, refetch}) => {\n  const [action, setAction] = React.useState<DialogAction>();\n  const [selectedRuns, setSelectedRuns] = React.useState<string[] | undefined>(undefined);\n  const [selectedKey, setSelectedKey] = React.useState<string | undefined>(undefined);\n  const onRunsDialogClose = React.useCallback(() => {\n    setSelectedRuns(undefined);\n    setSelectedKey(undefined);\n  }, [setSelectedKey, setSelectedRuns]);\n\n  const limitsByKey = Object.fromEntries(\n    limits.map(({concurrencyKey, slotCount}) => [concurrencyKey, slotCount]),\n  );\n\n  const onAdd = () => {\n    setAction({actionType: 'add'});\n  };\n  const onEdit = (concurrencyKey: string) => {\n    setAction({actionType: 'edit', concurrencyKey, concurrencyLimit: limitsByKey[concurrencyKey]!});\n  };\n  const onDelete = (concurrencyKey: string) => {\n    setAction({actionType: 'delete', concurrencyKey});\n  };\n\n  return (\n    <>\n      <Box>\n        <Box flex={{justifyContent: 'flex-end'}} padding={16}>\n          <Button intent=\"primary\" icon={<Icon name=\"add_circle\" />} onClick={() => onAdd()}>\n            Add concurrency limit\n          </Button>\n        </Box>\n        {limits.length === 0 ? (\n          <NonIdealState\n            icon=\"error\"\n            title=\"No concurrency limits\"\n            description={\n              <>\n                No concurrency limits have been configured for this instance.&nbsp;\n                <ButtonLink onClick={() => onAdd()}>Add a concurrency limit</ButtonLink>.\n              </>\n            }\n          />\n        ) : (\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: '260px'}}>Concurrency key</th>\n                <th style={{width: '20%'}}>Occupied slots</th>\n                <th style={{width: '20%'}}>Total slots</th>\n                <th>Active runs</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {limits.map((limit) => (\n                <tr key={limit.concurrencyKey}>\n                  <td>{limit.concurrencyKey}</td>\n                  <td>{limit.activeSlotCount}</td>\n                  <td>{limit.slotCount}</td>\n                  <td>\n                    {limit.activeRunIds.length === 0 ? (\n                      <>&mdash;</>\n                    ) : (\n                      <Tag intent=\"primary\" interactive>\n                        <ButtonLink\n                          onClick={() => {\n                            setSelectedKey(limit.concurrencyKey);\n                            setSelectedRuns(limit.activeRunIds);\n                          }}\n                        >\n                          {limit.activeRunIds.length}{' '}\n                          {limit.activeRunIds.length === 1 ? 'run' : 'runs'}\n                        </ButtonLink>\n                      </Tag>\n                    )}\n                  </td>\n                  <td>\n                    <ConcurrencyLimitActionMenu\n                      concurrencyKey={limit.concurrencyKey}\n                      onEdit={onEdit}\n                      onDelete={onDelete}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </Box>\n      <AddConcurrencyLimitDialog\n        open={action?.actionType === 'add'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <DeleteConcurrencyLimitDialog\n        concurrencyKey={action && action.actionType === 'delete' ? action.concurrencyKey : ''}\n        open={action?.actionType === 'delete'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n      />\n      <EditConcurrencyLimitDialog\n        open={action?.actionType === 'edit'}\n        onClose={() => setAction(undefined)}\n        onComplete={refetch}\n        concurrencyKey={action?.actionType === 'edit' ? action.concurrencyKey : ''}\n      />\n      <ConcurrencyRunsDialog\n        title={\n          <span>\n            Active runs for <strong>{selectedKey}</strong>\n          </span>\n        }\n        onClose={onRunsDialogClose}\n        runIds={selectedRuns}\n      />\n    </>\n  );\n};\n\nconst ConcurrencyLimitActionMenu: React.FC<{\n  concurrencyKey: string;\n  onEdit: (key: string) => void;\n  onDelete: (key: string) => void;\n}> = ({concurrencyKey, onDelete, onEdit}) => {\n  return (\n    <Popover\n      content={\n        <Menu>\n          <MenuItem icon=\"edit\" text=\"Edit\" onClick={() => onEdit(concurrencyKey)} />\n          <MenuItem\n            icon=\"delete\"\n            intent=\"danger\"\n            text=\"Delete\"\n            onClick={() => onDelete(concurrencyKey)}\n          />\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst isValidLimit = (concurrencyLimit?: string) => {\n  if (!concurrencyLimit) {\n    return false;\n  }\n  const value = parseInt(concurrencyLimit);\n  if (isNaN(value)) {\n    return false;\n  }\n  if (String(value) !== concurrencyLimit.trim()) {\n    return false;\n  }\n  return value > 0 && value < 1000;\n};\n\nconst AddConcurrencyLimitDialog: React.FC<{\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n  const [keyInput, setKeyInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n    setKeyInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey: keyInput, limit: parseInt(limitInput.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  return (\n    <Dialog isOpen={open} title=\"Add concurrency limit\" onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <TextInput\n            value={keyInput || ''}\n            onChange={(e) => setKeyInput(e.target.value)}\n            placeholder=\"Concurrency key\"\n          />\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          intent=\"primary\"\n          onClick={save}\n          disabled={!isValidLimit(limitInput.trim()) || !keyInput || isSubmitting}\n        >\n          {isSubmitting ? 'Adding...' : 'Add limit'}\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst EditConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [limitInput, setLimitInput] = React.useState('');\n\n  React.useEffect(() => {\n    setLimitInput('');\n  }, [open]);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: parseInt(limitInput!.trim())},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Edit <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        <Box margin={{bottom: 4}}>Concurrency key:</Box>\n        <Box margin={{bottom: 16}}>\n          <strong>{concurrencyKey}</strong>\n        </Box>\n        <Box margin={{bottom: 4}}>Concurrency limit (1-1000):</Box>\n        <Box>\n          <TextInput\n            value={limitInput || ''}\n            onChange={(e) => setLimitInput(e.target.value)}\n            placeholder=\"1 - 1000\"\n          />\n        </Box>\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"primary\" disabled>\n            Updating...\n          </Button>\n        ) : (\n          <Button intent=\"primary\" onClick={save} disabled={!isValidLimit(limitInput.trim())}>\n            Update limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst DeleteConcurrencyLimitDialog: React.FC<{\n  concurrencyKey: string;\n  open: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}> = ({concurrencyKey, open, onClose, onComplete}) => {\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n\n  const [setConcurrencyLimit] = useMutation<\n    SetConcurrencyLimitMutation,\n    SetConcurrencyLimitMutationVariables\n  >(SET_CONCURRENCY_LIMIT_MUTATION);\n\n  const save = async () => {\n    setIsSubmitting(true);\n    await setConcurrencyLimit({\n      variables: {concurrencyKey, limit: 0},\n    });\n    setIsSubmitting(false);\n    onComplete();\n    onClose();\n  };\n\n  const title = (\n    <>\n      Delete <Mono>{concurrencyKey}</Mono>\n    </>\n  );\n  return (\n    <Dialog isOpen={open} title={title} onClose={onClose}>\n      <DialogBody>\n        Delete concurrency limit&nbsp;<strong>{concurrencyKey}</strong>?\n      </DialogBody>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n        {isSubmitting ? (\n          <Button intent=\"danger\" disabled>\n            Deleting...\n          </Button>\n        ) : (\n          <Button intent=\"danger\" onClick={save}>\n            Delete limit\n          </Button>\n        )}\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst ConcurrencyRunsDialog: React.FC<{\n  runIds?: string[];\n  title: string | React.ReactNode;\n  onClose: () => void;\n}> = ({runIds, onClose, title}) => {\n  const {data} = useQuery<RunsForConcurrencyKeyQuery, RunsForConcurrencyKeyQueryVariables>(\n    RUNS_FOR_CONCURRENCY_KEY_QUERY,\n    {\n      variables: {\n        limit: RUNS_LIMIT,\n        filter: {\n          runIds: runIds || [],\n        },\n      },\n      skip: !runIds || !runIds.length,\n    },\n  );\n\n  const [freeSlots] = useMutation<\n    FreeConcurrencySlotsForRunMutation,\n    FreeConcurrencySlotsForRunMutationVariables\n  >(FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION);\n\n  const freeSlotsActionMenuItem = React.useCallback(\n    (run: RunTableRunFragment) => {\n      return doneStatuses.has(run.status)\n        ? [\n            <MenuItem\n              key=\"free-concurrency-slots\"\n              icon=\"status\"\n              text=\"Free concurrency slots for run\"\n              onClick={async () => {\n                const resp = await freeSlots({variables: {runId: run.id}});\n                if (resp.data?.freeConcurrencySlotsForRun) {\n                  await showSharedToaster({\n                    intent: 'success',\n                    icon: 'copy_to_clipboard_done',\n                    message: 'Freed concurrency slots',\n                  });\n                }\n                onClose();\n              }}\n            />,\n          ]\n        : [];\n    },\n    [freeSlots, onClose],\n  );\n\n  return (\n    <Dialog\n      isOpen={!!runIds && runIds.length > 0}\n      title={title}\n      onClose={onClose}\n      style={{width: '60%', minWidth: '400px'}}\n    >\n      <Box padding={{vertical: 16}}>\n        {!data ? (\n          <Box padding={{vertical: 64}}>\n            <Spinner purpose=\"section\" />\n          </Box>\n        ) : data.pipelineRunsOrError.__typename === 'Runs' ? (\n          <RunTable\n            runs={data.pipelineRunsOrError.results}\n            additionalActionsForRun={freeSlotsActionMenuItem}\n          />\n        ) : (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"error\"\n              title=\"Query Error\"\n              description={\n                data.pipelineRunsOrError.__typename === 'PythonError'\n                  ? data.pipelineRunsOrError.message\n                  : 'There was a problem querying for these runs.'\n              }\n            />\n            ;\n          </Box>\n        )}\n      </Box>\n      <DialogFooter>\n        <Button intent=\"none\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nconst CONCURRENCY_LIMIT_FRAGMENT = gql`\n  fragment ConcurrencyLimitFragment on ConcurrencyKeyInfo {\n    concurrencyKey\n    slotCount\n    activeRunIds\n    activeSlotCount\n  }\n`;\n\nconst INSTANCE_CONCURRENCY_LIMITS_QUERY = gql`\n  query InstanceConcurrencyLimitsQuery {\n    instance {\n      id\n      concurrencyLimits {\n        ...ConcurrencyLimitFragment\n      }\n    }\n  }\n\n  ${CONCURRENCY_LIMIT_FRAGMENT}\n`;\n\nconst SET_CONCURRENCY_LIMIT_MUTATION = gql`\n  mutation SetConcurrencyLimit($concurrencyKey: String!, $limit: Int!) {\n    setConcurrencyLimit(concurrencyKey: $concurrencyKey, limit: $limit)\n  }\n`;\n\nconst FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION = gql`\n  mutation FreeConcurrencySlotsForRun($runId: String!) {\n    freeConcurrencySlotsForRun(runId: $runId)\n  }\n`;\n\nconst RUNS_FOR_CONCURRENCY_KEY_QUERY = gql`\n  query RunsForConcurrencyKeyQuery($filter: RunsFilter, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ... on PipelineRun {\n            ...RunTableRunFragment\n          }\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const InstanceWarningIcon = React.memo(() => {\n  const {daemons} = React.useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Tooltip, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nimport {WarningTooltip} from './WarningTooltip';\n\nexport const WorkspaceStatus: React.FC<{placeholder: boolean}> = React.memo(({placeholder}) => {\n  const {codeLocations} = React.useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.Gray300} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.Yellow500} />\n    </WarningTooltip>\n  );\n});\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = React.useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n  const {flagInstanceConcurrencyLimits} = useFeatureFlags();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig && flagInstanceConcurrencyLimits ? (\n          <TabLink id=\"concurrency\" title=\"Concurrency limits\" to=\"/concurrency\" />\n        ) : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\n\nimport {\n  InstanceConfigHasInfoQuery,\n  InstanceConfigHasInfoQueryVariables,\n} from './types/useCanSeeConfig.types';\n\nexport const useCanSeeConfig = () => {\n  const {data} = useQuery<InstanceConfigHasInfoQuery, InstanceConfigHasInfoQueryVariables>(\n    INSTANCE_CONFIG_HAS_INFO,\n  );\n  return !!data?.instance.hasInfo;\n};\n\nconst INSTANCE_CONFIG_HAS_INFO = gql`\n  query InstanceConfigHasInfo {\n    instance {\n      id\n      hasInfo\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\n\nimport {RunStatsQuery, RunStatsQueryVariables} from './types/RunStats.types';\n\nexport const RunStats = ({runId}: {runId: string}) => {\n  const stats = useQuery<RunStatsQuery, RunStatsQueryVariables>(RUN_STATS_QUERY, {\n    variables: {runId},\n  });\n\n  if (stats.loading || !stats.data) {\n    return (\n      <RunStatsDetailsContainer>\n        <Box padding={24} flex={{justifyContent: 'center'}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </RunStatsDetailsContainer>\n    );\n  }\n\n  const result = stats.data.pipelineRunOrError;\n\n  if (result.__typename !== 'Run') {\n    return <PythonErrorInfo error={result} />;\n  }\n  if (result.stats.__typename !== 'RunStatsSnapshot') {\n    return <PythonErrorInfo error={result.stats} />;\n  }\n\n  const runPath = `/runs/${runId}`;\n  return (\n    <RunStatsDetailsContainer>\n      <Link\n        to={`${runPath}?logs=type:STEP_SUCCESS`}\n      >{`${result.stats.stepsSucceeded} steps succeeded`}</Link>\n      <Link to={`${runPath}?logs=type:STEP_FAILURE`}>\n        {`${result.stats.stepsFailed} steps failed`}\n      </Link>\n      <Link\n        to={`${runPath}?logs=type:ASSET_MATERIALIZATION`}\n      >{`${result.stats.materializations} materializations`}</Link>\n      <Link\n        to={`${runPath}?logs=type:STEP_EXPECTATION_RESULT`}\n      >{`${result.stats.expectations} expectations passed`}</Link>\n    </RunStatsDetailsContainer>\n  );\n};\n\nconst RUN_STATS_QUERY = gql`\n  query RunStatsQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on RunNotFoundError {\n        message\n      }\n      ... on Run {\n        id\n        pipelineName\n        stats {\n          ... on RunStatsSnapshot {\n            id\n            stepsSucceeded\n            stepsFailed\n            expectations\n            materializations\n          }\n          ...PythonErrorFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst RunStatsDetailsContainer = styled.div`\n  min-width: 200px;\n  padding: 12px;\n  color: white;\n  font-size: 12px;\n  & > a {\n    display: block;\n  }\n`;\n","import {Popover, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled, {css, keyframes} from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\n\nimport {RunStats} from './RunStats';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {inProgressStatuses, queuedStatuses} from './RunStatuses';\n\nexport const RunStatusWithStats: React.FC<RunStatusProps & {runId: string}> = React.memo(\n  ({runId, ...rest}) => (\n    <Popover\n      position=\"bottom\"\n      interactionKind=\"hover\"\n      content={<RunStats runId={runId} />}\n      hoverOpenDelay={100}\n    >\n      <RunStatusIndicator {...rest} />\n    </Popover>\n  ),\n);\n\ninterface RunStatusProps {\n  status: RunStatus | 'SCHEDULED';\n  size?: number;\n}\n\nexport const RunStatusIndicator: React.FC<RunStatusProps> = React.memo(({status, size}) => {\n  if (status === 'STARTED') {\n    return <Spinner purpose=\"caption-text\" />;\n  }\n  if (status === 'SCHEDULED') {\n    return <RunStatusDot status={status} size={size || 12} />;\n  }\n  return (\n    <RunStatusDot\n      status={status}\n      size={size || 12}\n      pulse={inProgressStatuses.has(status) || queuedStatuses.has(status)}\n    />\n  );\n});\n\nconst pulseAnimation = keyframes`\n  0% {\n    filter: brightness(1);\n  }\n\n  50% {\n    filter: brightness(0.7);\n  }\n\n  100% {\n    filter: brightness(1);\n  }\n`;\n\nexport const RunStatusDot = styled.div<{\n  status: RunStatus | 'SCHEDULED';\n  size: number;\n  pulse?: boolean;\n}>`\n  width: ${({size}) => size}px;\n  height: ${({size}) => size}px;\n  border-radius: ${({size}) => size / 2}px;\n  transition: filter 200ms linear;\n  ${({pulse}) =>\n    pulse\n      ? css`\n          animation: ${pulseAnimation} 2s infinite;\n        `\n      : null}\n\n  background: ${({status}) => RUN_STATUS_COLORS[status]};\n  &:hover {\n    animation: none;\n    filter: brightness(0.7);\n  }\n`;\n","import {Box, Colors, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {assertUnreachable} from '../app/Util';\nimport {RunStatus} from '../graphql/types';\n\nimport {RunStats} from './RunStats';\nimport {RunStatusIndicator} from './RunStatusDots';\n\nconst statusToIntent = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.QUEUED:\n    case RunStatus.NOT_STARTED:\n    case RunStatus.MANAGED:\n    case RunStatus.CANCELING:\n      return 'none';\n    case RunStatus.SUCCESS:\n      return 'success';\n    case RunStatus.STARTING:\n      return 'none';\n    case RunStatus.FAILURE:\n    case RunStatus.CANCELED:\n      return 'danger';\n    case RunStatus.STARTED:\n      return 'primary';\n    default:\n      return assertUnreachable(status);\n  }\n};\n\nconst runStatusToString = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.QUEUED:\n      return 'Queued';\n    case RunStatus.SUCCESS:\n      return 'Success';\n    case RunStatus.STARTING:\n      return 'Starting';\n    case RunStatus.NOT_STARTED:\n      return 'Not started';\n    case RunStatus.FAILURE:\n      return 'Failure';\n    case RunStatus.STARTED:\n      return 'Started';\n    case RunStatus.MANAGED:\n      return 'Managed';\n    case RunStatus.CANCELING:\n      return 'Canceling';\n    case RunStatus.CANCELED:\n      return 'Canceled';\n    default:\n      return assertUnreachable(status);\n  }\n};\n\nexport const runStatusToBackfillStateString = (status: RunStatus) => {\n  switch (status) {\n    case RunStatus.CANCELED:\n    case RunStatus.CANCELING:\n    case RunStatus.FAILURE:\n      return 'Failed';\n    case RunStatus.STARTING:\n    case RunStatus.STARTED:\n      return 'In progress';\n    case RunStatus.QUEUED:\n      return 'Queued';\n    case RunStatus.SUCCESS:\n      return 'Completed';\n    case RunStatus.MANAGED:\n    case RunStatus.NOT_STARTED:\n      return 'Missing';\n    default:\n      return assertUnreachable(status);\n  }\n};\nexport const RUN_STATUS_COLORS = {\n  QUEUED: Colors.Blue200,\n  NOT_STARTED: Colors.Gray600,\n  MANAGED: Colors.Gray400,\n  STARTED: Colors.Blue500,\n  STARTING: Colors.Blue500,\n  SUCCESS: Colors.Green500,\n  FAILURE: Colors.Red500,\n  CANCELING: Colors.Red500,\n  CANCELED: Colors.Red500,\n\n  // Not technically a RunStatus, but useful.\n  SCHEDULED: Colors.Blue200,\n};\n\nexport const RunStatusTag = (props: {status: RunStatus}) => {\n  const {status} = props;\n  return (\n    <Tag intent={statusToIntent(status)}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n        <RunStatusIndicator status={status} size={10} />\n        <div>{runStatusToString(status)}</div>\n      </Box>\n    </Tag>\n  );\n};\n\ninterface Props {\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusTagWithStats = (props: Props) => {\n  const {runId, status} = props;\n  return (\n    <Popover\n      position=\"bottom-left\"\n      interactionKind=\"hover\"\n      content={<RunStats runId={runId} />}\n      hoverOpenDelay={100}\n      usePortal\n    >\n      <RunStatusTag status={status} />\n    </Popover>\n  );\n};\n","import {TabStyleProps, getTabA11yProps, getTabContent, tabCSS} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, LinkProps} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\ninterface TabLinkProps extends TabStyleProps, Omit<LinkProps, 'title'> {\n  title?: React.ReactNode;\n}\n\nexport const TabLink = styled((props: TabLinkProps) => {\n  const {to, title, disabled, ...rest} = props;\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof title === 'string' ? title : undefined;\n\n  return (\n    <Link to={disabled ? '#' : to} title={titleText} {...containerProps} {...rest}>\n      {content}\n    </Link>\n  );\n})<TabLinkProps>`\n  ${tabCSS}\n`;\n","import styled from 'styled-components/macro';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {Box} from './Box';\nimport {Colors} from './Colors';\nimport {IconName} from './Icon';\n\ninterface Props {\n  title: React.ReactNode;\n  tags?: React.ReactNode;\n  icon?: IconName;\n  description?: React.ReactNode;\n  metadata?: React.ReactNode;\n  right?: React.ReactNode;\n  tabs?: React.ReactNode;\n}\n\nexport const PageHeader = (props: Props) => {\n  const {title, tags, right, tabs} = props;\n  return (\n    <PageHeaderContainer\n      background={Colors.Gray50}\n      padding={{top: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Box flex={{direction: 'row', justifyContent: 'space-between'}} padding={{bottom: 16}}>\n        <Box flex={{direction: 'row', alignItems: 'flex-start', gap: 12, wrap: 'wrap'}}>\n          {title}\n          {tags}\n        </Box>\n        {right}\n      </Box>\n      {tabs}\n    </PageHeaderContainer>\n  );\n};\n\nconst PageHeaderContainer = styled(Box)`\n  width: 100%;\n\n  /**\n   * Blueprint breadcrumbs annoyingly have a built-in height.\n   */\n  .bp4-breadcrumbs {\n    height: auto;\n  }\n`;\n","import * as React from 'react';\nimport styled, {css} from 'styled-components/macro';\n\nimport {Colors} from './Colors';\nimport {IconWrapper} from './Icon';\nimport {FontFamily} from './styles';\n\nexport interface TabStyleProps {\n  disabled?: boolean;\n  selected?: boolean;\n  count?: number | 'indeterminate' | null;\n  icon?: React.ReactNode;\n  title?: React.ReactNode;\n  $size?: 'small' | 'large';\n}\n\nexport const getTabA11yProps = (props: {selected?: boolean; disabled?: boolean}) => {\n  const {selected, disabled} = props;\n  return {\n    role: 'tab',\n    tabIndex: disabled ? -1 : 0,\n    'aria-disabled': disabled,\n    'aria-expanded': selected,\n    'aria-selected': selected,\n  };\n};\n\nexport const getTabContent = (props: TabStyleProps & {title?: React.ReactNode}) => {\n  const {title, count, icon} = props;\n  return (\n    <>\n      {title}\n      {icon}\n      {count !== undefined ? <Count>{count === 'indeterminate' ? '–' : count}</Count> : null}\n    </>\n  );\n};\n\nconst Count = styled.div`\n  display: inline;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 500;\n  letter-spacing: -0.02%;\n  padding: 0 4px;\n  color: ${Colors.Gray900};\n  background: ${Colors.Gray100};\n`;\n\nexport const tabCSS = css<TabStyleProps>`\n  background: none;\n  border: none;\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 600;\n  padding: ${({$size}) => ($size === 'small' ? '10px 0' : '16px 0')};\n  box-shadow: ${({selected}) => (selected ? Colors.Blue500 : 'transparent')} 0 -2px 0 inset;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  gap: 6px;\n\n  &,\n  & a {\n    cursor: pointer;\n    user-select: none;\n    color: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : Colors.Gray700};\n  }\n\n  & ${IconWrapper} {\n    color: ${({selected, disabled}) =>\n      selected ? Colors.Blue500 : disabled ? Colors.Gray300 : ''};\n  }\n\n  /* Focus outline only when using keyboard, not when focusing via mouse. */\n  &:focus {\n    outline: none !important;\n    box-shadow: ${({selected, disabled}) =>\n        selected ? Colors.Blue500 : disabled ? 'transparent' : Colors.Blue200}\n      0 -2px 0 inset;\n  }\n\n  &:hover {\n    &,\n    a {\n      text-decoration: none;\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : Colors.Blue700};\n    }\n    ${IconWrapper} {\n      color: ${({selected, disabled}) =>\n        selected ? Colors.Blue700 : disabled ? Colors.Gray300 : ''};\n    }\n  }\n`;\n\ninterface TabProps extends TabStyleProps, Omit<React.ComponentPropsWithoutRef<'button'>, 'title'> {}\n\nexport const Tab = styled((props: TabProps) => {\n  const containerProps = getTabA11yProps(props);\n  const content = getTabContent(props);\n\n  const titleText = typeof props.title === 'string' ? props.title : undefined;\n\n  return (\n    <button {...props} {...containerProps} title={titleText} type=\"button\">\n      {content}\n    </button>\n  );\n})<TabStyleProps>`\n  ${tabCSS}\n`;\n\ninterface TabsProps {\n  children: Array<React.ReactElement<TabProps>>;\n  selectedTabId?: string;\n  onChange?: (selectedTabId: string) => void;\n  size?: 'small' | 'large';\n}\n\nexport const Tabs = styled(({selectedTabId, children, onChange, size = 'large', ...rest}) => {\n  return (\n    <div {...rest} role=\"tablist\">\n      {React.Children.map(children, (child) =>\n        child\n          ? React.cloneElement(child, {\n              selected: child.props.selected || child.props.id === selectedTabId,\n              $size: size,\n              ...(onChange\n                ? {\n                    onClick: () => onChange(child.props.id),\n                  }\n                : {}),\n            })\n          : null,\n      )}\n    </div>\n  );\n})<TabsProps>`\n  display: flex;\n  gap: 16px;\n  font-size: ${({size}) => (size === 'small' ? '12px' : '14px')};\n  line-height: ${({size}) => (size === 'small' ? '16px' : '20px')};\n  font-weight: 600;\n`;\n"],"names":["InstanceConcurrencyPage","React","useTrackPageView","useDocumentTitle","flagInstanceConcurrencyLimits","useFeatureFlags","pageTitle","InstancePageContext","queryResult","useQuery","INSTANCE_CONCURRENCY_LIMITS_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","content","_jsx","ConcurrencyLimits","limits","instance","concurrencyLimits","refetch","Redirect","to","Box","padding","vertical","children","Spinner","purpose","_jsxs","Page","PageHeader","title","Heading","tabs","InstanceTabs","tab","_ref","_React$useState","_React$useState2","_slicedToArray","action","setAction","_React$useState3","undefined","_React$useState4","selectedRuns","setSelectedRuns","_React$useState5","_React$useState6","selectedKey","setSelectedKey","onRunsDialogClose","limitsByKey","Object","fromEntries","map","_ref2","concurrencyKey","slotCount","onAdd","actionType","onEdit","concurrencyLimit","onDelete","_Fragment","flex","justifyContent","Button","intent","icon","Icon","name","onClick","length","NonIdealState","description","ButtonLink","Table","style","width","limit","activeSlotCount","activeRunIds","Tag","interactive","ConcurrencyLimitActionMenu","AddConcurrencyLimitDialog","open","onClose","onComplete","DeleteConcurrencyLimitDialog","EditConcurrencyLimitDialog","ConcurrencyRunsDialog","runIds","_ref3","Popover","Menu","MenuItem","text","position","isValidLimit","value","parseInt","isNaN","String","trim","_ref4","_React$useState7","_React$useState8","isSubmitting","setIsSubmitting","_React$useState9","_React$useState10","limitInput","setLimitInput","_React$useState11","_React$useState12","keyInput","setKeyInput","_useMutation","useMutation","SET_CONCURRENCY_LIMIT_MUTATION","setConcurrencyLimit","save","_ref5","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","variables","stop","apply","arguments","Dialog","isOpen","DialogBody","margin","bottom","TextInput","onChange","e","target","placeholder","DialogFooter","disabled","_ref6","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_useMutation3","_ref7","_callee2","_context2","Mono","_ref8","_React$useState17","_React$useState18","_useMutation5","_ref9","_callee3","_context3","_ref10","RUNS_FOR_CONCURRENCY_KEY_QUERY","filter","skip","_useMutation7","FREE_CONCURRENCY_SLOTS_FOR_RUN_MUTATION","freeSlots","freeSlotsActionMenuItem","run","doneStatuses","status","_callee4","_resp$data","resp","_context4","runId","id","sent","freeConcurrencySlotsForRun","showSharedToaster","message","minWidth","pipelineRunsOrError","__typename","RunTable","runs","results","additionalActionsForRun","CONCURRENCY_LIMIT_FRAGMENT","gql","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","_templateObject5","RUN_TABLE_RUN_FRAGMENT","PYTHON_ERROR_FRAGMENT","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","modifiers","offset","enabled","options","color","Colors","WorkspaceStatus","codeLocations","type","Tooltip","placement","fillColor","props","healthTitle","canSeeConfig","useCanSeeConfig","direction","alignItems","Tabs","selectedTabId","TabLink","QueryRefreshCountdown","INSTANCE_CONFIG_HAS_INFO","hasInfo","RunStats","stats","RUN_STATS_QUERY","loading","RunStatsDetailsContainer","result","pipelineRunOrError","PythonErrorInfo","error","runPath","concat","Link","stepsSucceeded","stepsFailed","materializations","expectations","styled","displayName","componentId","RunStatusWithStats","rest","_objectWithoutProperties","_excluded","interactionKind","hoverOpenDelay","RunStatusIndicator","_objectSpread","size","RunStatusDot","pulse","inProgressStatuses","queuedStatuses","pulseAnimation","keyframes","css","RUN_STATUS_COLORS","statusToIntent","RunStatus","assertUnreachable","runStatusToString","runStatusToBackfillStateString","QUEUED","NOT_STARTED","MANAGED","STARTED","STARTING","SUCCESS","FAILURE","CANCELING","CANCELED","SCHEDULED","RunStatusTag","gap","RunStatusTagWithStats","usePortal","containerProps","getTabA11yProps","getTabContent","titleText","withConfig","tabCSS","tags","right","PageHeaderContainer","background","top","left","border","side","selected","role","tabIndex","count","Count","FontFamily","$size","IconWrapper","Tab","_ref8$size","child"],"sourceRoot":""}