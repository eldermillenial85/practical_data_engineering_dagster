{"version":3,"file":"static/js/620.21b3d8e8.chunk.js","mappings":"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","sources":["../../core/src/asset-graph/AssetEdges.tsx","../../core/src/asset-graph/AssetGraphJobSidebar.tsx","../../core/src/assets/LastMaterializationMetadata.tsx","../../core/src/assets/AssetSidebarActivitySummary.tsx","../../core/src/asset-graph/SidebarAssetInfo.tsx","../../core/src/asset-graph/useFindAssetLocation.tsx","../../core/src/asset-graph/AssetGraphExplorer.tsx","../../core/src/asset-graph/AssetGroupNode.tsx","../../core/src/asset-graph/ForeignNode.tsx","../../core/src/asset-graph/useAssetGraphData.tsx","../../core/src/assets/AssetEventSystemTags.tsx","../../core/src/assets/AssetLineageElements.tsx","../../core/src/assets/AssetMaterializationGraphs.tsx","../../core/src/assets/AssetMetadata.tsx","../../core/src/assets/AutomaterializePolicyTag.tsx","../../core/src/assets/CurrentRunsBanner.tsx","../../core/src/assets/DependsOnSelfBanner.tsx","../../core/src/assets/FailedRunSinceMaterializationBanner.tsx","../../core/src/assets/LaunchAssetObservationButton.tsx","../../core/src/assets/UnderlyingOpsOrGraph.tsx","../../core/src/assets/Version.tsx","../../core/src/assets/groupByPartition.tsx","../../core/src/assets/useRecentAssetEvents.tsx","../../core/src/pipelines/NonIdealPipelineQueryResult.tsx"],"sourcesContent":["import {Colors} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {buildSVGPath} from './Utils';\nimport {AssetLayoutEdge} from './layout';\n\nexport const AssetEdges: React.FC<{\n  edges: AssetLayoutEdge[];\n  highlighted: string | null;\n  strokeWidth?: number;\n  baseColor?: string;\n}> = ({edges, highlighted, strokeWidth = 4, baseColor = Colors.KeylineGray}) => {\n  // Note: we render the highlighted edges twice, but it's so that the first item with\n  // all the edges in it can remain memoized.\n  return (\n    <React.Fragment>\n      <AssetEdgeSet color={baseColor} edges={edges} strokeWidth={strokeWidth} />\n      <AssetEdgeSet\n        color={Colors.Blue500}\n        edges={edges.filter(({fromId, toId}) => highlighted === fromId || highlighted === toId)}\n        strokeWidth={strokeWidth}\n      />\n    </React.Fragment>\n  );\n};\n\nconst AssetEdgeSet: React.FC<{\n  edges: AssetLayoutEdge[];\n  color: string;\n  strokeWidth: number;\n}> = React.memo(({edges, color, strokeWidth}) => (\n  <>\n    <defs>\n      <marker\n        id={`arrow${btoa(color)}`}\n        viewBox=\"0 0 8 10\"\n        refX=\"1\"\n        refY=\"5\"\n        markerUnits=\"strokeWidth\"\n        markerWidth={strokeWidth}\n        orient=\"auto\"\n      >\n        <path d=\"M 0 0 L 8 5 L 0 10 z\" fill={color} />\n      </marker>\n    </defs>\n    {edges.map((edge, idx) => (\n      <path\n        key={idx}\n        d={buildSVGPath({source: edge.from, target: edge.to})}\n        stroke={color}\n        strokeWidth={strokeWidth}\n        fill=\"none\"\n        markerEnd={`url(#arrow${btoa(color)})`}\n      />\n    ))}\n  </>\n));\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PipelineSelector} from '../graphql/types';\nimport {NonIdealPipelineQueryResult} from '../pipelines/NonIdealPipelineQueryResult';\nimport {\n  SidebarContainerOverview,\n  SIDEBAR_ROOT_CONTAINER_FRAGMENT,\n} from '../pipelines/SidebarContainerOverview';\nimport {Loading} from '../ui/Loading';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {\n  AssetGraphSidebarQuery,\n  AssetGraphSidebarQueryVariables,\n} from './types/AssetGraphJobSidebar.types';\n\nexport const AssetGraphJobSidebar: React.FC<{\n  pipelineSelector: PipelineSelector;\n}> = ({pipelineSelector}) => {\n  const queryResult = useQuery<AssetGraphSidebarQuery, AssetGraphSidebarQueryVariables>(\n    ASSET_GRAPH_JOB_SIDEBAR,\n    {\n      variables: {pipelineSelector},\n    },\n  );\n\n  const {repositoryName, repositoryLocationName} = pipelineSelector;\n  const repoAddress = buildRepoAddress(repositoryName, repositoryLocationName);\n\n  return (\n    <Loading queryResult={queryResult}>\n      {({pipelineSnapshotOrError}) => {\n        if (pipelineSnapshotOrError.__typename !== 'PipelineSnapshot') {\n          return (\n            <NonIdealPipelineQueryResult\n              isGraph\n              result={pipelineSnapshotOrError}\n              repoAddress={repoAddress}\n            />\n          );\n        }\n        return (\n          <SidebarContainerOverview container={pipelineSnapshotOrError} repoAddress={repoAddress} />\n        );\n      }}\n    </Loading>\n  );\n};\n\nconst ASSET_GRAPH_JOB_SIDEBAR = gql`\n  query AssetGraphSidebarQuery($pipelineSelector: PipelineSelector!) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        ...SidebarRootContainerFragment\n      }\n      ... on PipelineNotFoundError {\n        message\n      }\n      ... on PipelineSnapshotNotFoundError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${SIDEBAR_ROOT_CONTAINER_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Colors, Group, Icon, Mono, NonIdealState, Table} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {isHiddenAssetGroupJob, LiveDataForNode} from '../asset-graph/Utils';\nimport {AssetKeyInput} from '../graphql/types';\nimport {MetadataEntry} from '../metadata/MetadataEntry';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {linkToRunEvent, titleForRun} from '../runs/RunUtils';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\n\nimport {AssetLineageElements} from './AssetLineageElements';\nimport {StaleReasonsTags} from './Stale';\nimport {\n  AssetObservationFragment,\n  AssetMaterializationFragment,\n} from './types/useRecentAssetEvents.types';\n\nexport const LatestMaterializationMetadata: React.FC<{\n  assetKey: AssetKeyInput;\n  latest: AssetObservationFragment | AssetMaterializationFragment | undefined;\n  liveData: LiveDataForNode | undefined;\n}> = ({assetKey, latest, liveData}) => {\n  const latestRun = latest?.runOrError.__typename === 'Run' ? latest?.runOrError : null;\n  const repositoryOrigin = latestRun?.repositoryOrigin;\n  const repoAddress = repositoryOrigin\n    ? buildRepoAddress(repositoryOrigin.repositoryName, repositoryOrigin.repositoryLocationName)\n    : null;\n  const repo = useRepository(repoAddress);\n\n  if (!latest) {\n    return (\n      <Box padding={{top: 16, bottom: 32}}>\n        <NonIdealState\n          icon=\"materialization\"\n          title=\"No metadata\"\n          description=\"No metadata was found for this asset.\"\n        />\n      </Box>\n    );\n  }\n\n  const latestEvent = latest;\n  const latestAssetLineage =\n    latestEvent.__typename === 'MaterializationEvent' ? latestEvent?.assetLineage : [];\n\n  return (\n    <MetadataTable>\n      <tbody>\n        <tr>\n          <td>Run</td>\n          <td>\n            {latestRun ? (\n              <div>\n                <Box>\n                  {'Run '}\n                  <Link to={`/runs/${latestEvent.runId}?timestamp=${latestEvent.timestamp}`}>\n                    <Mono>{titleForRun({id: latestEvent.runId})}</Mono>\n                  </Link>\n                </Box>\n                {!isHiddenAssetGroupJob(latestRun.pipelineName) && (\n                  <>\n                    <Box padding={{left: 8, top: 4}}>\n                      <PipelineReference\n                        showIcon\n                        pipelineName={latestRun.pipelineName}\n                        pipelineHrefContext={repoAddress || 'repo-unknown'}\n                        snapshotId={latestRun.pipelineSnapshotId}\n                        isJob={isThisThingAJob(repo, latestRun.pipelineName)}\n                      />\n                    </Box>\n                    <Group direction=\"row\" padding={{left: 8}} spacing={8} alignItems=\"center\">\n                      <Icon name=\"linear_scale\" color={Colors.Gray400} />\n                      <Link to={linkToRunEvent(latestRun, latestEvent)}>{latestEvent.stepKey}</Link>\n                    </Group>\n                  </>\n                )}\n              </div>\n            ) : (\n              'No materialization events'\n            )}\n          </td>\n          <td />\n        </tr>\n        {latest?.partition ? (\n          <tr>\n            <td>Partition</td>\n            <td>{latest ? latest.partition : 'No materialization events'}</td>\n            <td />\n          </tr>\n        ) : null}\n        <tr>\n          <td>Timestamp</td>\n          <td>\n            <Box flex={{gap: 8, alignItems: 'center'}}>\n              {latestEvent ? (\n                <Timestamp timestamp={{ms: Number(latestEvent.timestamp)}} />\n              ) : (\n                'No materialization events'\n              )}\n              {liveData && (\n                <StaleReasonsTags assetKey={assetKey} liveData={liveData} include=\"all\" />\n              )}\n            </Box>\n          </td>\n          <td />\n        </tr>\n        {latestAssetLineage?.length ? (\n          <tr>\n            <td>Parent assets</td>\n            <td>\n              <AssetLineageElements\n                elements={latestAssetLineage}\n                timestamp={latestEvent.timestamp}\n              />\n            </td>\n            <td />\n          </tr>\n        ) : null}\n        {latestEvent?.metadataEntries.map((entry) => (\n          <tr key={`metadata-${entry.label}`}>\n            <td>{entry.label}</td>\n            <td>\n              <MetadataEntry\n                entry={entry}\n                expandSmallValues={true}\n                repoLocation={repoAddress?.location}\n              />\n            </td>\n            <td>{entry.description}</td>\n          </tr>\n        ))}\n      </tbody>\n    </MetadataTable>\n  );\n};\n\nconst MetadataTable = styled(Table)`\n  td:first-child {\n    white-space: nowrap;\n    width: 1px;\n    max-width: 400px;\n    word-break: break-word;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n","import {Body, Box, Colors, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {SidebarAssetFragment} from '../asset-graph/types/SidebarAssetInfo.types';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\n\nimport {AssetEventSystemTags} from './AssetEventSystemTags';\nimport {AssetMaterializationGraphs} from './AssetMaterializationGraphs';\nimport {\n  AutomaterializePolicyTag,\n  automaterializePolicyDescription,\n} from './AutomaterializePolicyTag';\nimport {CurrentMinutesLateTag, freshnessPolicyDescription} from './CurrentMinutesLateTag';\nimport {CurrentRunsBanner} from './CurrentRunsBanner';\nimport {FailedRunSinceMaterializationBanner} from './FailedRunSinceMaterializationBanner';\nimport {LatestMaterializationMetadata} from './LastMaterializationMetadata';\nimport {useGroupedEvents} from './groupByPartition';\nimport {useRecentAssetEvents} from './useRecentAssetEvents';\n\ninterface Props {\n  asset: SidebarAssetFragment;\n  liveData?: LiveDataForNode;\n  isSourceAsset: boolean;\n\n  // This timestamp is a \"hint\", when it changes this component will refetch\n  // to retrieve new data. Just don't want to poll the entire table query.\n  assetLastMaterializedAt: string | undefined;\n}\n\nexport const AssetSidebarActivitySummary: React.FC<Props> = ({\n  asset,\n  assetLastMaterializedAt,\n  isSourceAsset,\n  liveData,\n}) => {\n  const {\n    materializations,\n    observations,\n    loadedPartitionKeys,\n    loading,\n    refetch,\n    xAxis,\n  } = useRecentAssetEvents(\n    asset.assetKey,\n    {},\n    {assetHasDefinedPartitions: !!asset.partitionDefinition},\n  );\n\n  const grouped = useGroupedEvents(xAxis, materializations, observations, loadedPartitionKeys);\n  const displayedEvent = isSourceAsset ? observations[0] : materializations[0];\n\n  React.useEffect(() => {\n    refetch();\n  }, [assetLastMaterializedAt, refetch]);\n\n  if (loading) {\n    return (\n      <Box padding={{vertical: 20}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n  return (\n    <>\n      {!asset.partitionDefinition && (\n        <>\n          <FailedRunSinceMaterializationBanner\n            run={liveData?.runWhichFailedToMaterialize || null}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n          <CurrentRunsBanner\n            liveData={liveData}\n            border={{side: 'top', width: 1, color: Colors.KeylineGray}}\n          />\n        </>\n      )}\n\n      {asset.freshnessPolicy && (\n        <SidebarSection title=\"Freshness policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'flex-start'}}>\n            <Body style={{flex: 1}}>{freshnessPolicyDescription(asset.freshnessPolicy)}</Body>\n            <CurrentMinutesLateTag liveData={liveData} policy={asset.freshnessPolicy} />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {asset.autoMaterializePolicy && (\n        <SidebarSection title=\"Auto-materialize policy\">\n          <Box margin={{horizontal: 24, vertical: 12}} flex={{gap: 12, alignItems: 'flex-start'}}>\n            <Body style={{flex: 1}}>\n              {automaterializePolicyDescription(asset.autoMaterializePolicy)}\n            </Body>\n            <AutomaterializePolicyTag policy={asset.autoMaterializePolicy} />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {loadedPartitionKeys.length > 1 ? null : (\n        <>\n          <SidebarSection\n            title={!isSourceAsset ? 'Materialization in last run' : 'Observation in last run'}\n          >\n            {displayedEvent ? (\n              <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n                <LatestMaterializationMetadata\n                  assetKey={asset.assetKey}\n                  latest={displayedEvent}\n                  liveData={liveData}\n                />\n              </div>\n            ) : (\n              <Box\n                margin={{horizontal: 24, vertical: 12}}\n                style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n              >\n                {!isSourceAsset ? `No materializations found` : `No observations found`}\n              </Box>\n            )}\n          </SidebarSection>\n          <SidebarSection\n            title={!isSourceAsset ? 'Materialization system tags' : 'Observation system tags'}\n            collapsedByDefault\n          >\n            {displayedEvent ? (\n              <div style={{margin: -1, maxWidth: '100%', overflowX: 'auto'}}>\n                <AssetEventSystemTags event={displayedEvent} paddingLeft={24} />\n              </div>\n            ) : (\n              <Box\n                margin={{horizontal: 24, vertical: 12}}\n                style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n              >\n                {!isSourceAsset ? `No materializations found` : `No observations found`}\n              </Box>\n            )}\n          </SidebarSection>\n        </>\n      )}\n      <SidebarSection title=\"Metadata plots\">\n        <AssetMaterializationGraphs\n          xAxis={xAxis}\n          asSidebarSection\n          groups={grouped}\n          columnCount={1}\n        />\n      </SidebarSection>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, ConfigTypeSchema, Icon, Spinner} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {ASSET_NODE_CONFIG_FRAGMENT} from '../assets/AssetConfig';\nimport {AssetDefinedInMultipleReposNotice} from '../assets/AssetDefinedInMultipleReposNotice';\nimport {\n  AssetMetadataTable,\n  ASSET_NODE_OP_METADATA_FRAGMENT,\n  metadataForAssetNode,\n} from '../assets/AssetMetadata';\nimport {AssetSidebarActivitySummary} from '../assets/AssetSidebarActivitySummary';\nimport {DependsOnSelfBanner} from '../assets/DependsOnSelfBanner';\nimport {PartitionHealthSummary} from '../assets/PartitionHealthSummary';\nimport {UnderlyingOpsOrGraph} from '../assets/UnderlyingOpsOrGraph';\nimport {Version} from '../assets/Version';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  healthRefreshHintFromLiveData,\n  usePartitionHealthData,\n} from '../assets/usePartitionHealthData';\nimport {DagsterTypeSummary} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {Description} from '../pipelines/Description';\nimport {SidebarSection, SidebarTitle} from '../pipelines/SidebarComponents';\nimport {ResourceContainer, ResourceHeader} from '../pipelines/SidebarOpHelpers';\nimport {pluginForMetadata} from '../plugins';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {LiveDataForNode, displayNameForAssetKey, GraphNode, nodeDependsOnSelf} from './Utils';\nimport {SidebarAssetQuery, SidebarAssetQueryVariables} from './types/SidebarAssetInfo.types';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\n\nexport const SidebarAssetInfo: React.FC<{\n  graphNode: GraphNode;\n  liveData?: LiveDataForNode;\n}> = ({graphNode, liveData}) => {\n  const {assetKey, definition} = graphNode;\n  const partitionHealthRefreshHint = healthRefreshHintFromLiveData(liveData);\n  const partitionHealthData = usePartitionHealthData(\n    [assetKey],\n    partitionHealthRefreshHint,\n    'background',\n  );\n  const {data} = useQuery<SidebarAssetQuery, SidebarAssetQueryVariables>(SIDEBAR_ASSET_QUERY, {\n    variables: {assetKey: {path: assetKey.path}},\n  });\n\n  const {lastMaterialization} = liveData || {};\n  const asset = data?.assetNodeOrError.__typename === 'AssetNode' ? data.assetNodeOrError : null;\n  if (!asset) {\n    return (\n      <>\n        <Header assetNode={definition} repoAddress={null} />\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  const repoAddress = buildRepoAddress(asset.repository.name, asset.repository.location.name);\n  const {assetMetadata, assetType} = metadataForAssetNode(asset);\n  const hasAssetMetadata = assetType || assetMetadata.length > 0;\n  const assetConfigSchema = asset.configField?.configType;\n\n  const OpMetadataPlugin = asset.op?.metadata && pluginForMetadata(asset.op.metadata);\n\n  return (\n    <>\n      <Header assetNode={definition} repoAddress={repoAddress} />\n\n      <AssetDefinedInMultipleReposNotice\n        assetKey={assetKey}\n        loadedFromRepo={repoAddress}\n        padded={false}\n      />\n\n      {(asset.description || OpMetadataPlugin?.SidebarComponent || !hasAssetMetadata) && (\n        <SidebarSection title=\"Description\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Description description={asset.description || 'No description provided'} />\n          </Box>\n          {asset.op && OpMetadataPlugin?.SidebarComponent && (\n            <Box padding={{bottom: 16, horizontal: 24}}>\n              <OpMetadataPlugin.SidebarComponent definition={asset.op} repoAddress={repoAddress} />\n            </Box>\n          )}\n        </SidebarSection>\n      )}\n\n      <AssetSidebarActivitySummary\n        asset={asset}\n        assetLastMaterializedAt={lastMaterialization?.timestamp}\n        isSourceAsset={definition.isSource}\n        liveData={liveData}\n      />\n\n      <div style={{borderBottom: `2px solid ${Colors.Gray300}`}} />\n\n      {nodeDependsOnSelf(graphNode) && <DependsOnSelfBanner />}\n\n      {asset.opVersion && (\n        <SidebarSection title=\"Code Version\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <Version>{asset.opVersion}</Version>\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetConfigSchema && (\n        <SidebarSection title=\"Config\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            <ConfigTypeSchema\n              type={assetConfigSchema}\n              typesInScope={assetConfigSchema.recursiveConfigTypes}\n            />\n          </Box>\n        </SidebarSection>\n      )}\n\n      {asset.requiredResources.length > 0 && (\n        <SidebarSection title=\"Required Resources\">\n          <Box padding={{vertical: 16, horizontal: 24}}>\n            {asset.requiredResources.map((resource) => (\n              <ResourceContainer key={resource.resourceKey}>\n                <Icon name=\"resource\" color={Colors.Gray700} />\n                {repoAddress ? (\n                  <Link\n                    to={workspacePathFromAddress(repoAddress, `/resources/${resource.resourceKey}`)}\n                  >\n                    <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                  </Link>\n                ) : (\n                  <ResourceHeader>{resource.resourceKey}</ResourceHeader>\n                )}\n              </ResourceContainer>\n            ))}\n          </Box>\n        </SidebarSection>\n      )}\n\n      {assetMetadata.length > 0 && (\n        <SidebarSection title=\"Metadata\">\n          <AssetMetadataTable assetMetadata={assetMetadata} repoLocation={repoAddress?.location} />\n        </SidebarSection>\n      )}\n\n      {assetType && <TypeSidebarSection assetType={assetType} />}\n\n      {asset.partitionDefinition && (\n        <SidebarSection title=\"Partitions\">\n          <Box padding={{vertical: 16, horizontal: 24}} flex={{direction: 'column', gap: 16}}>\n            <p>{asset.partitionDefinition.description}</p>\n            <PartitionHealthSummary assetKey={asset.assetKey} data={partitionHealthData} />\n          </Box>\n        </SidebarSection>\n      )}\n    </>\n  );\n};\n\nconst TypeSidebarSection: React.FC<{\n  assetType: DagsterTypeFragment;\n}> = ({assetType}) => {\n  return (\n    <SidebarSection title=\"Type\">\n      <DagsterTypeSummary type={assetType} />\n    </SidebarSection>\n  );\n};\n\nconst Header: React.FC<{\n  assetNode: AssetNodeForGraphQueryFragment;\n  opName?: string;\n  repoAddress?: RepoAddress | null;\n}> = ({assetNode, repoAddress}) => {\n  const displayName = displayNameForAssetKey(assetNode.assetKey);\n\n  return (\n    <Box flex={{gap: 4, direction: 'column'}} margin={{left: 24, right: 12, vertical: 16}}>\n      <SidebarTitle\n        style={{\n          marginBottom: 0,\n          display: 'flex',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <Box>{displayName}</Box>\n      </SidebarTitle>\n      <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n        <AssetCatalogLink to={assetDetailsPathForKey(assetNode.assetKey)}>\n          {'View in Asset Catalog '}\n          <Icon name=\"open_in_new\" color={Colors.Link} />\n        </AssetCatalogLink>\n\n        {repoAddress && (\n          <UnderlyingOpsOrGraph assetNode={assetNode} repoAddress={repoAddress} minimal />\n        )}\n      </Box>\n    </Box>\n  );\n};\nconst AssetCatalogLink = styled(Link)`\n  display: flex;\n  gap: 5px;\n  padding: 6px;\n  margin: -6px;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst SIDEBAR_ASSET_FRAGMENT = gql`\n  fragment SidebarAssetFragment on AssetNode {\n    id\n    description\n    ...AssetNodeConfigFragment\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    freshnessPolicy {\n      maximumLagMinutes\n      cronSchedule\n      cronScheduleTimezone\n    }\n    autoMaterializePolicy {\n      policyType\n    }\n    partitionDefinition {\n      description\n    }\n    assetKey {\n      path\n    }\n    op {\n      name\n      description\n      metadata {\n        key\n        value\n      }\n    }\n    opVersion\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    requiredResources {\n      resourceKey\n    }\n\n    ...AssetNodeOpMetadataFragment\n  }\n\n  ${ASSET_NODE_CONFIG_FRAGMENT}\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_NODE_OP_METADATA_FRAGMENT}\n`;\n\nexport const SIDEBAR_ASSET_QUERY = gql`\n  query SidebarAssetQuery($assetKey: AssetKeyInput!) {\n    assetNodeOrError(assetKey: $assetKey) {\n      ... on AssetNode {\n        id\n        ...SidebarAssetFragment\n      }\n    }\n  }\n\n  ${SIDEBAR_ASSET_FRAGMENT}\n`;\n","import {gql, useApolloClient} from '@apollo/client';\nimport React from 'react';\n\nimport {AssetKey} from '../assets/types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {RepoAddress} from '../workspace/types';\n\nimport {isHiddenAssetGroupJob} from './Utils';\nimport {\n  AssetForNavigationQuery,\n  AssetForNavigationQueryVariables,\n} from './types/useFindAssetLocation.types';\n\nexport interface AssetLocation {\n  assetKey: AssetKey;\n  opNames: string[];\n  jobName: string | null;\n  groupName: string | null;\n  repoAddress: RepoAddress | null;\n}\n\nexport function useFindAssetLocation() {\n  const apollo = useApolloClient();\n\n  return React.useCallback(\n    async (key: AssetKeyInput): Promise<AssetLocation> => {\n      const {data} = await apollo.query<AssetForNavigationQuery, AssetForNavigationQueryVariables>({\n        query: ASSET_FOR_NAVIGATION_QUERY,\n        variables: {key},\n      });\n      if (data?.assetOrError.__typename === 'Asset' && data?.assetOrError.definition) {\n        const def = data.assetOrError.definition;\n        return {\n          assetKey: key,\n          opNames: def.opNames,\n          jobName: def.jobNames.find((jobName) => !isHiddenAssetGroupJob(jobName)) || null,\n          groupName: def.groupName,\n          repoAddress: def.repository\n            ? buildRepoAddress(def.repository.name, def.repository.location.name)\n            : null,\n        };\n      }\n      return {assetKey: key, opNames: [], jobName: null, groupName: null, repoAddress: null};\n    },\n    [apollo],\n  );\n}\n\nconst ASSET_FOR_NAVIGATION_QUERY = gql`\n  query AssetForNavigationQuery($key: AssetKeyInput!) {\n    assetOrError(assetKey: $key) {\n      ... on Asset {\n        id\n        definition {\n          id\n          opNames\n          jobNames\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  Box,\n  Checkbox,\n  Colors,\n  NonIdealState,\n  SplitPanelContainer,\n  ErrorBoundary,\n} from '@dagster-io/ui';\nimport pickBy from 'lodash/pickBy';\nimport uniq from 'lodash/uniq';\nimport without from 'lodash/without';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {LaunchAssetExecutionButton} from '../assets/LaunchAssetExecutionButton';\nimport {LaunchAssetObservationButton} from '../assets/LaunchAssetObservationButton';\nimport {AssetKey} from '../assets/types';\nimport {SVGViewport} from '../graph/SVGViewport';\nimport {useAssetLayout} from '../graph/asyncGraphLayout';\nimport {closestNodeInDirection} from '../graph/common';\nimport {\n  GraphExplorerOptions,\n  OptionsOverlay,\n  QueryOverlay,\n  RightInfoPanel,\n  RightInfoPanelContent,\n} from '../pipelines/GraphExplorer';\nimport {\n  EmptyDAGNotice,\n  EntirelyFilteredDAGNotice,\n  LargeDAGNotice,\n  LoadingNotice,\n} from '../pipelines/GraphNotices';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\nimport {GraphQueryInput} from '../ui/GraphQueryInput';\nimport {Loading} from '../ui/Loading';\n\nimport {AssetEdges} from './AssetEdges';\nimport {AssetGraphJobSidebar} from './AssetGraphJobSidebar';\nimport {AssetGroupNode} from './AssetGroupNode';\nimport {AssetNode, AssetNodeMinimal} from './AssetNode';\nimport {AssetNodeLink} from './ForeignNode';\nimport {SidebarAssetInfo} from './SidebarAssetInfo';\nimport {GraphData, graphHasCycles, LiveData, GraphNode, tokenForAssetKey} from './Utils';\nimport {AssetGraphLayout} from './layout';\nimport {AssetNodeForGraphQueryFragment} from './types/useAssetGraphData.types';\nimport {AssetGraphFetchScope, AssetGraphQueryItem, useAssetGraphData} from './useAssetGraphData';\nimport {AssetLocation, useFindAssetLocation} from './useFindAssetLocation';\nimport {useLiveDataForAssetKeys} from './useLiveDataForAssetKeys';\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\ninterface Props {\n  options: GraphExplorerOptions;\n  setOptions?: (options: GraphExplorerOptions) => void;\n\n  fetchOptions: AssetGraphFetchScope;\n  fetchOptionFilters?: React.ReactNode;\n\n  explorerPath: ExplorerPath;\n  onChangeExplorerPath: (path: ExplorerPath, mode: 'replace' | 'push') => void;\n  onNavigateToSourceAssetNode: (node: AssetLocation) => void;\n}\n\nexport const MINIMAL_SCALE = 0.6;\nexport const GROUPS_ONLY_SCALE = 0.15;\n\nexport const AssetGraphExplorer: React.FC<Props> = (props) => {\n  const {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = useAssetGraphData(props.explorerPath.opsQuery, props.fetchOptions);\n\n  const {liveDataByNode, liveDataRefreshState} = useLiveDataForAssetKeys(graphAssetKeys);\n\n  return (\n    <Loading allowStaleData queryResult={fetchResult}>\n      {() => {\n        if (!assetGraphData || !allAssetKeys) {\n          return <NonIdealState icon=\"error\" title=\"Query Error\" />;\n        }\n\n        const hasCycles = graphHasCycles(assetGraphData);\n\n        if (hasCycles) {\n          return (\n            <NonIdealState\n              icon=\"error\"\n              title=\"Cycle detected\"\n              description=\"Assets dependencies form a cycle\"\n            />\n          );\n        }\n        return (\n          <AssetGraphExplorerWithData\n            key={props.explorerPath.pipelineName}\n            assetGraphData={assetGraphData}\n            allAssetKeys={allAssetKeys}\n            graphQueryItems={graphQueryItems}\n            applyingEmptyDefault={applyingEmptyDefault}\n            liveDataRefreshState={liveDataRefreshState}\n            liveDataByNode={liveDataByNode}\n            {...props}\n          />\n        );\n      }}\n    </Loading>\n  );\n};\n\ntype WithDataProps = {\n  allAssetKeys: AssetKey[];\n  assetGraphData: GraphData;\n  graphQueryItems: AssetGraphQueryItem[];\n  liveDataByNode: LiveData;\n  liveDataRefreshState: QueryRefreshState;\n  applyingEmptyDefault: boolean;\n} & Props;\n\nconst AssetGraphExplorerWithData: React.FC<WithDataProps> = ({\n  options,\n  setOptions,\n  explorerPath,\n  onChangeExplorerPath,\n  onNavigateToSourceAssetNode: onNavigateToSourceAssetNode,\n  liveDataRefreshState,\n  liveDataByNode,\n  assetGraphData,\n  graphQueryItems,\n  applyingEmptyDefault,\n  fetchOptions,\n  fetchOptionFilters,\n}) => {\n  const findAssetLocation = useFindAssetLocation();\n  const {layout, loading, async} = useAssetLayout(assetGraphData);\n  const viewportEl = React.useRef<SVGViewport>();\n\n  const [highlighted, setHighlighted] = React.useState<string | null>(null);\n\n  const selectedAssetValues = explorerPath.opNames[explorerPath.opNames.length - 1]!.split(',');\n  const selectedGraphNodes = Object.values(assetGraphData.nodes).filter((node) =>\n    selectedAssetValues.includes(tokenForAssetKey(node.definition.assetKey)),\n  );\n  const lastSelectedNode = selectedGraphNodes[selectedGraphNodes.length - 1]!;\n\n  const selectedDefinitions = selectedGraphNodes.map((a) => a.definition);\n  const allDefinitionsForMaterialize = applyingEmptyDefault\n    ? graphQueryItems.map((a) => a.node)\n    : Object.values(assetGraphData.nodes).map((a) => a.definition);\n\n  const onSelectNode = React.useCallback(\n    async (\n      e: React.MouseEvent<any> | React.KeyboardEvent<any>,\n      assetKey: {path: string[]},\n      node: GraphNode | null,\n    ) => {\n      e.stopPropagation();\n\n      const token = tokenForAssetKey(assetKey);\n      const nodeIsInDisplayedGraph = node?.definition;\n\n      if (!nodeIsInDisplayedGraph) {\n        // The asset's definition was not provided in our query for job.assetNodes. It's either\n        // in another job or asset group, or is a source asset not defined in any repository.\n        return onNavigateToSourceAssetNode(await findAssetLocation(assetKey));\n      }\n\n      // This asset is in a job and we can stay in the job graph explorer!\n      // If it's in our current job, allow shift / meta multi-selection.\n      let nextOpsNameSelection = token;\n\n      if (e.shiftKey || e.metaKey) {\n        let tokensToAdd = [token];\n        if (e.shiftKey && lastSelectedNode && node) {\n          const tokensInRange = opsInRange({\n            graph: assetGraphData,\n            from: lastSelectedNode,\n            to: node,\n          });\n          if (tokensInRange.length) {\n            tokensToAdd = tokensInRange;\n          }\n        }\n\n        const existing = explorerPath.opNames[0]!.split(',');\n        nextOpsNameSelection = (existing.includes(token)\n          ? without(existing, token)\n          : uniq([...existing, ...tokensToAdd])\n        ).join(',');\n      }\n\n      const nextCenter = layout?.nodes[nextOpsNameSelection[nextOpsNameSelection.length - 1]!];\n      if (nextCenter) {\n        viewportEl.current?.zoomToSVGCoords(nextCenter.bounds.x, nextCenter.bounds.y, true);\n      }\n\n      onChangeExplorerPath(\n        {\n          ...explorerPath,\n          opNames: [nextOpsNameSelection],\n          opsQuery: nodeIsInDisplayedGraph\n            ? explorerPath.opsQuery\n            : `${explorerPath.opsQuery},++\"${token}\"++`,\n          pipelineName: explorerPath.pipelineName,\n        },\n        'replace',\n      );\n    },\n    [\n      explorerPath,\n      onChangeExplorerPath,\n      onNavigateToSourceAssetNode,\n      findAssetLocation,\n      lastSelectedNode,\n      assetGraphData,\n      layout,\n    ],\n  );\n\n  const [lastRenderedLayout, setLastRenderedLayout] = React.useState<AssetGraphLayout | null>(null);\n  const renderingNewLayout = lastRenderedLayout !== layout;\n\n  React.useEffect(() => {\n    if (!renderingNewLayout || !layout || !viewportEl.current) {\n      return;\n    }\n    // The first render where we have our layout and viewport, autocenter or\n    // focus on the selected node. (If selection was specified in the URL).\n    // Don't animate this change.\n    if (lastSelectedNode) {\n      // viewportEl.current.zoomToSVGBox(layout.nodes[lastSelectedNode.id].bounds, false);\n      viewportEl.current.focus();\n    } else {\n      viewportEl.current.autocenter(false);\n    }\n    setLastRenderedLayout(layout);\n  }, [renderingNewLayout, lastSelectedNode, layout, viewportEl]);\n\n  const onClickBackground = () =>\n    onChangeExplorerPath(\n      {...explorerPath, pipelineName: explorerPath.pipelineName, opNames: []},\n      'replace',\n    );\n\n  const onArrowKeyDown = (e: React.KeyboardEvent<any>, dir: string) => {\n    if (!layout) {\n      return;\n    }\n    const hasDefinition = (node: {id: string}) => !!assetGraphData.nodes[node.id]?.definition;\n    const layoutWithoutExternalLinks = {...layout, nodes: pickBy(layout.nodes, hasDefinition)};\n\n    const nextId = closestNodeInDirection(layoutWithoutExternalLinks, lastSelectedNode.id, dir);\n    const node = nextId && assetGraphData.nodes[nextId];\n    if (node && viewportEl.current) {\n      onSelectNode(e, node.assetKey, node);\n      viewportEl.current.zoomToSVGBox(layout.nodes[nextId]!.bounds, true);\n    }\n  };\n\n  const allowGroupsOnlyZoomLevel = !!(layout && Object.keys(layout.groups).length);\n\n  return (\n    <SplitPanelContainer\n      identifier=\"explorer\"\n      firstInitialPercent={70}\n      firstMinSize={400}\n      first={\n        <ErrorBoundary region=\"graph\">\n          {graphQueryItems.length === 0 ? (\n            <EmptyDAGNotice nodeType=\"asset\" isGraph />\n          ) : applyingEmptyDefault ? (\n            <LargeDAGNotice nodeType=\"asset\" />\n          ) : Object.keys(assetGraphData.nodes).length === 0 ? (\n            <EntirelyFilteredDAGNotice nodeType=\"asset\" />\n          ) : undefined}\n          {loading || !layout ? (\n            <LoadingNotice async={async} nodeType=\"asset\" />\n          ) : (\n            <SVGViewport\n              ref={(r) => (viewportEl.current = r || undefined)}\n              interactor={SVGViewport.Interactors.PanAndZoom}\n              graphWidth={layout.width}\n              graphHeight={layout.height}\n              graphHasNoMinimumZoom={allowGroupsOnlyZoomLevel}\n              onClick={onClickBackground}\n              onArrowKeyDown={onArrowKeyDown}\n              onDoubleClick={(e) => {\n                viewportEl.current?.autocenter(true);\n                e.stopPropagation();\n              }}\n              maxZoom={1.2}\n              maxAutocenterZoom={1.0}\n            >\n              {({scale}) => (\n                <SVGContainer width={layout.width} height={layout.height}>\n                  <AssetEdges\n                    highlighted={highlighted}\n                    edges={layout.edges}\n                    strokeWidth={allowGroupsOnlyZoomLevel ? Math.max(4, 3 / scale) : 4}\n                    baseColor={\n                      allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE\n                        ? Colors.Gray400\n                        : Colors.KeylineGray\n                    }\n                  />\n\n                  {Object.values(layout.groups)\n                    .sort((a, b) => a.id.length - b.id.length)\n                    .map((group) => (\n                      <foreignObject\n                        key={group.id}\n                        {...group.bounds}\n                        onDoubleClick={(e) => {\n                          if (!viewportEl.current) {\n                            return;\n                          }\n                          const targetScale = viewportEl.current.scaleForSVGBounds(\n                            group.bounds.width,\n                            group.bounds.height,\n                          );\n                          viewportEl.current.zoomToSVGBox(group.bounds, true, targetScale * 0.9);\n                          e.stopPropagation();\n                        }}\n                      >\n                        <AssetGroupNode group={group} scale={scale} />\n                      </foreignObject>\n                    ))}\n\n                  {Object.values(layout.nodes).map(({id, bounds}) => {\n                    const graphNode = assetGraphData.nodes[id]!;\n                    const path = JSON.parse(id);\n                    if (allowGroupsOnlyZoomLevel && scale < GROUPS_ONLY_SCALE) {\n                      return;\n                    }\n                    return (\n                      <foreignObject\n                        {...bounds}\n                        key={id}\n                        onMouseEnter={() => setHighlighted(id)}\n                        onMouseLeave={() => setHighlighted(null)}\n                        onClick={(e) => onSelectNode(e, {path}, graphNode)}\n                        onDoubleClick={(e) => {\n                          viewportEl.current?.zoomToSVGBox(bounds, true, 1.2);\n                          e.stopPropagation();\n                        }}\n                        style={{overflow: 'visible'}}\n                      >\n                        {!graphNode ? (\n                          <AssetNodeLink assetKey={{path}} />\n                        ) : scale < MINIMAL_SCALE ? (\n                          <AssetNodeMinimal\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        ) : (\n                          <AssetNode\n                            definition={graphNode.definition}\n                            liveData={liveDataByNode[graphNode.id]}\n                            selected={selectedGraphNodes.includes(graphNode)}\n                          />\n                        )}\n                      </foreignObject>\n                    );\n                  })}\n                </SVGContainer>\n              )}\n            </SVGViewport>\n          )}\n          {setOptions && (\n            <OptionsOverlay>\n              <Checkbox\n                format=\"switch\"\n                label=\"View as Asset Graph\"\n                checked={options.preferAssetRendering}\n                onChange={() => {\n                  onChangeExplorerPath(\n                    {...explorerPath, opNames: selectedDefinitions[0]?.opNames || []},\n                    'replace',\n                  );\n                  setOptions({\n                    ...options,\n                    preferAssetRendering: !options.preferAssetRendering,\n                  });\n                }}\n              />\n            </OptionsOverlay>\n          )}\n\n          <Box\n            flex={{direction: 'column', alignItems: 'flex-end', gap: 8}}\n            style={{position: 'absolute', right: 12, top: 8}}\n          >\n            <Box flex={{alignItems: 'center', gap: 12}}>\n              <QueryRefreshCountdown\n                refreshState={liveDataRefreshState}\n                dataDescription=\"materializations\"\n              />\n              <LaunchAssetObservationButton\n                preferredJobName={explorerPath.pipelineName}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions.filter((a) => a.isObservable)}\n                    : {all: allDefinitionsForMaterialize.filter((a) => a.isObservable)}\n                }\n              />\n              <LaunchAssetExecutionButton\n                preferredJobName={explorerPath.pipelineName}\n                liveDataForStale={liveDataByNode}\n                scope={\n                  selectedDefinitions.length\n                    ? {selected: selectedDefinitions}\n                    : {all: allDefinitionsForMaterialize}\n                }\n              />\n            </Box>\n          </Box>\n          <QueryOverlay>\n            {fetchOptionFilters}\n\n            <GraphQueryInput\n              items={graphQueryItems}\n              value={explorerPath.opsQuery}\n              placeholder=\"Type an asset subset…\"\n              onChange={(opsQuery) => onChangeExplorerPath({...explorerPath, opsQuery}, 'replace')}\n              popoverPosition=\"bottom-left\"\n            />\n          </QueryOverlay>\n        </ErrorBoundary>\n      }\n      second={\n        selectedGraphNodes.length === 1 && selectedGraphNodes[0] ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset sidebar\" resetErrorOnChange={[selectedGraphNodes[0].id]}>\n                <SidebarAssetInfo\n                  graphNode={selectedGraphNodes[0]}\n                  liveData={liveDataByNode[selectedGraphNodes[0].id]}\n                />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : fetchOptions.pipelineSelector ? (\n          <RightInfoPanel>\n            <RightInfoPanelContent>\n              <ErrorBoundary region=\"asset job sidebar\">\n                <AssetGraphJobSidebar pipelineSelector={fetchOptions.pipelineSelector} />\n              </ErrorBoundary>\n            </RightInfoPanelContent>\n          </RightInfoPanel>\n        ) : null\n      }\n    />\n  );\n};\n\nconst SVGContainer = styled.svg`\n  overflow: visible;\n  border-radius: 0;\n`;\n\n// Helpers\n\nconst graphDirectionOf = ({\n  graph,\n  from,\n  to,\n}: {\n  graph: GraphData;\n  from: GraphNode;\n  to: GraphNode;\n}) => {\n  const stack = [from];\n  while (stack.length) {\n    const node = stack.pop()!;\n\n    const downstream = [...Object.keys(graph.downstream[node.id] || {})]\n      .map((n) => graph.nodes[n]!)\n      .filter(Boolean);\n    if (downstream.some((d) => d.id === to.id)) {\n      return 'downstream';\n    }\n    stack.push(...downstream);\n  }\n  return 'upstream';\n};\n\nconst opsInRange = (\n  {graph, from, to}: {graph: GraphData; from: GraphNode; to: GraphNode},\n  seen: string[] = [],\n) => {\n  if (!from) {\n    return [];\n  }\n  if (from.id === to.id) {\n    return [...to.definition.opNames];\n  }\n\n  if (seen.length === 0 && graphDirectionOf({graph, from, to}) === 'upstream') {\n    [from, to] = [to, from];\n  }\n\n  const downstream = [...Object.keys(graph.downstream[from.id] || {})]\n    .map((n) => graph.nodes[n]!)\n    .filter(Boolean);\n\n  const ledToTarget: string[] = [];\n\n  for (const node of downstream) {\n    if (seen.includes(node.id)) {\n      continue;\n    }\n    const result: string[] = opsInRange({graph, from: node, to}, [...seen, from.id]);\n    if (result.length) {\n      ledToTarget.push(...from.definition.opNames, ...result);\n    }\n  }\n  return uniq(ledToTarget);\n};\n","import {Box, Colors, FontFamily, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\nimport {buildRepoPathForHuman} from '../workspace/buildRepoAddress';\nimport {workspacePath} from '../workspace/workspacePath';\n\nimport {MINIMAL_SCALE, GROUPS_ONLY_SCALE} from './AssetGraphExplorer';\nimport {GroupLayout} from './layout';\n\nexport const AssetGroupNode: React.FC<{group: GroupLayout; scale: number}> = ({group, scale}) => {\n  const {\n    repositoryLocationName,\n    repositoryDisambiguationRequired,\n    repositoryName,\n    groupName,\n  } = group;\n\n  return (\n    <div style={{position: 'relative', width: '100%', height: '100%'}}>\n      {scale > GROUPS_ONLY_SCALE && (\n        <Box flex={{alignItems: 'flex-end'}} style={{height: 70}}>\n          <Mono\n            style={{\n              fontWeight: 600,\n              userSelect: 'none',\n              fontSize: scale > MINIMAL_SCALE ? '16px' : '32px',\n              display: 'flex',\n              gap: 6,\n            }}\n          >\n            <Icon\n              name=\"asset_group\"\n              color={Colors.Gray400}\n              size={scale > MINIMAL_SCALE ? 20 : 48}\n            />\n            <Box flex={{direction: 'column'}}>\n              <Link\n                style={{color: Colors.Gray400}}\n                onClick={(e) => e.stopPropagation()}\n                to={workspacePath(\n                  repositoryName,\n                  repositoryLocationName,\n                  `/asset-groups/${groupName}`,\n                )}\n              >\n                {groupName}\n              </Link>\n              {repositoryDisambiguationRequired && (\n                <GroupRepoName style={{marginBottom: '0.5em'}}>\n                  {withMiddleTruncation(\n                    buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                    {\n                      maxLength: 45,\n                    },\n                  )}\n                </GroupRepoName>\n              )}\n            </Box>\n          </Mono>\n        </Box>\n      )}\n\n      <GroupOutline\n        style={{\n          inset: 0,\n          top: 75,\n          position: 'absolute',\n          background:\n            scale < GROUPS_ONLY_SCALE ? `rgba(234, 234, 234, 1)` : `rgba(217, 217, 217, 0.25)`,\n        }}\n      />\n\n      {scale < GROUPS_ONLY_SCALE ? (\n        <Box\n          flex={{justifyContent: 'center', alignItems: 'center'}}\n          style={{inset: 0, position: 'absolute', fontSize: `${12 / scale}px`, userSelect: 'none'}}\n        >\n          <Box\n            flex={{direction: 'column', alignItems: 'center'}}\n            style={{fontWeight: 600, fontFamily: FontFamily.monospace}}\n          >\n            {groupName}\n            {repositoryDisambiguationRequired && (\n              <GroupRepoName>\n                {withMiddleTruncation(\n                  buildRepoPathForHuman(repositoryName, repositoryLocationName),\n                  {\n                    maxLength: 45,\n                  },\n                )}\n              </GroupRepoName>\n            )}\n          </Box>\n        </Box>\n      ) : undefined}\n    </div>\n  );\n};\n\nconst GroupOutline = styled.div`\n  width: 100%;\n  border-radius: 10px;\n  pointer-events: none;\n`;\n\nconst GroupRepoName = styled.div`\n  font-size: 0.8em;\n  line-height: 0.6em;\n  white-space: nowrap;\n  color: ${Colors.Gray400};\n`;\n","import {Colors, Icon, FontFamily} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {withMiddleTruncation} from '../app/Util';\n\nimport {ASSET_LINK_NAME_MAX_LENGTH} from './layout';\n\nexport const AssetNodeLink: React.FC<{\n  assetKey: {path: string[]};\n}> = React.memo(({assetKey}) => {\n  const label = assetKey.path[assetKey.path.length - 1]!;\n  return (\n    <AssetNodeLinkContainer>\n      <Icon name=\"open_in_new\" color={Colors.Link} />\n      <span className=\"label\" title={label}>\n        {withMiddleTruncation(label, {\n          maxLength: ASSET_LINK_NAME_MAX_LENGTH,\n        })}\n      </span>\n    </AssetNodeLinkContainer>\n  );\n});\n\nconst AssetNodeLinkContainer = styled.div`\n  display: flex;\n  padding: 4px 8px 6px;\n  margin-top: 26px;\n  line-height: 30px;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Link};\n  align-items: center;\n  font-weight: 600;\n  gap: 4px;\n  &:hover .label {\n    color: ${Colors.Link};\n    text-decoration: underline;\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport groupBy from 'lodash/groupBy';\nimport keyBy from 'lodash/keyBy';\nimport reject from 'lodash/reject';\nimport React from 'react';\n\nimport {filterByQuery, GraphQueryItem} from '../app/GraphQueryImpl';\nimport {AssetKey} from '../assets/types';\nimport {AssetGroupSelector, PipelineSelector} from '../graphql/types';\n\nimport {ASSET_NODE_FRAGMENT} from './AssetNode';\nimport {buildGraphData, GraphData, toGraphId, tokenForAssetKey} from './Utils';\nimport {\n  AssetGraphQuery,\n  AssetGraphQueryVariables,\n  AssetNodeForGraphQueryFragment,\n} from './types/useAssetGraphData.types';\n\nexport interface AssetGraphFetchScope {\n  hideEdgesToNodesOutsideQuery?: boolean;\n  hideNodesMatching?: (node: AssetNodeForGraphQueryFragment) => boolean;\n  pipelineSelector?: PipelineSelector;\n  groupSelector?: AssetGroupSelector;\n}\n\nexport type AssetGraphQueryItem = GraphQueryItem & {\n  node: AssetNode;\n};\n\n/** Fetches data for rendering an asset graph:\n *\n * @param pipelineSelector: Optionally scope to an asset job, or pass null for the global graph\n *\n * @param opsQuery: filter the returned graph using selector syntax string (eg: asset_name++)\n *\n * @param filterNodes: filter the returned graph using the provided function. The global graph\n * uses this option to implement the \"3 of 4 repositories\" picker.\n */\nexport function useAssetGraphData(opsQuery: string, options: AssetGraphFetchScope) {\n  const fetchResult = useQuery<AssetGraphQuery, AssetGraphQueryVariables>(ASSET_GRAPH_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      pipelineSelector: options.pipelineSelector,\n      groupSelector: options.groupSelector,\n    },\n  });\n\n  const nodes = fetchResult.data?.assetNodes;\n\n  const {\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  } = React.useMemo(() => {\n    if (nodes === undefined) {\n      return {\n        graphAssetKeys: [],\n        graphQueryItems: [],\n        assetGraphData: null,\n        applyingEmptyDefault: false,\n      };\n    }\n\n    // Apply any filters provided by the caller. This is where we do repo filtering\n    let matching = nodes;\n    if (options.hideNodesMatching) {\n      matching = reject(matching, options.hideNodesMatching);\n    }\n\n    // Filter the set of all AssetNodes down to those matching the `opsQuery`.\n    // In the future it might be ideal to move this server-side, but we currently\n    // get to leverage the useQuery cache almost 100% of the time above, making this\n    // super fast after the first load vs a network fetch on every page view.\n    const graphQueryItems = buildGraphQueryItems(matching);\n    const {all, applyingEmptyDefault} = filterByQuery(graphQueryItems, opsQuery);\n\n    // Assemble the response into the data structure used for layout, traversal, etc.\n    const assetGraphData = buildGraphData(all.map((n) => n.node));\n    if (options.hideEdgesToNodesOutsideQuery) {\n      removeEdgesToHiddenAssets(assetGraphData, nodes);\n    }\n\n    return {\n      allAssetKeys: matching.map((n) => n.assetKey),\n      graphAssetKeys: all.map((n) => ({path: n.node.assetKey.path})),\n      assetGraphData,\n      graphQueryItems,\n      applyingEmptyDefault,\n    };\n  }, [nodes, opsQuery, options.hideEdgesToNodesOutsideQuery, options.hideNodesMatching]);\n\n  return {\n    fetchResult,\n    assetGraphData,\n    graphQueryItems,\n    graphAssetKeys,\n    allAssetKeys,\n    applyingEmptyDefault,\n  };\n}\n\ntype AssetNode = AssetNodeForGraphQueryFragment;\n\nconst buildGraphQueryItems = (nodes: AssetNode[]) => {\n  const items: {[name: string]: AssetGraphQueryItem} = {};\n\n  for (const node of nodes) {\n    const name = tokenForAssetKey(node.assetKey);\n    items[name] = {\n      node,\n      name,\n      inputs: node.dependencyKeys.map((key) => ({\n        dependsOn: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n      outputs: node.dependedByKeys.map((key) => ({\n        dependedBy: [{solid: {name: tokenForAssetKey(key)}}],\n      })),\n    };\n  }\n  return Object.values(items);\n};\n\nconst removeEdgesToHiddenAssets = (graphData: GraphData, allNodes: AssetNode[]) => {\n  const allNodesById = groupBy(allNodes, (n) => toGraphId(n.assetKey));\n  const notSourceAsset = (id: string) => !!allNodesById[id];\n\n  for (const node of Object.keys(graphData.upstream)) {\n    for (const edge of Object.keys(graphData.upstream[node]!)) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[node]![edge];\n        delete graphData.downstream[edge]![node];\n      }\n    }\n  }\n\n  for (const node of Object.keys(graphData.downstream)) {\n    for (const edge of Object.keys(graphData.downstream[node]!)) {\n      if (!graphData.nodes[edge] && notSourceAsset(node)) {\n        delete graphData.upstream[edge]![node];\n        delete graphData.downstream[node]![edge];\n      }\n    }\n  }\n};\n\nexport const calculateGraphDistances = (items: GraphQueryItem[], assetKey: AssetKey) => {\n  const map = keyBy(items, (g) => g.name);\n  const start = map[tokenForAssetKey(assetKey)];\n  if (!start) {\n    return {upstream: 0, downstream: 0};\n  }\n\n  const dfsUpstream = (name: string, depth: number): number => {\n    const next = map[name]!.inputs.flatMap((i) => i.dependsOn.map((d) => d.solid.name)).filter(\n      (dname) => dname !== name,\n    );\n\n    return Math.max(depth, ...next.map((dname) => dfsUpstream(dname, depth + 1)));\n  };\n  const dfsDownstream = (name: string, depth: number): number => {\n    const next = map[name]!.outputs.flatMap((i) => i.dependedBy.map((d) => d.solid.name)).filter(\n      (dname) => dname !== name,\n    );\n\n    return Math.max(depth, ...next.map((dname) => dfsDownstream(dname, depth + 1)));\n  };\n\n  return {\n    upstream: dfsUpstream(start.name, 0),\n    downstream: dfsDownstream(start.name, 0),\n  };\n};\n\nexport const ASSET_GRAPH_QUERY = gql`\n  query AssetGraphQuery($pipelineSelector: PipelineSelector, $groupSelector: AssetGroupSelector) {\n    assetNodes(pipeline: $pipelineSelector, group: $groupSelector) {\n      id\n      ...AssetNodeForGraphQuery\n    }\n  }\n\n  fragment AssetNodeForGraphQuery on AssetNode {\n    id\n    groupName\n    hasMaterializePermission\n    repository {\n      id\n      name\n      location {\n        id\n        name\n      }\n    }\n    dependencyKeys {\n      path\n    }\n    dependedByKeys {\n      path\n    }\n    ...AssetNodeFragment\n  }\n\n  ${ASSET_NODE_FRAGMENT}\n`;\n","import {Box, ButtonLink, Caption, Colors, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {AssetEventGroup} from './groupByPartition';\n\n// There can be other keys in the event tags, but we want to show data and code version\n// at the top consistently regardless of their alphabetical / backend ordering.\nconst ORDER = [\n  DagsterTag.AssetEventDataVersion.valueOf(),\n  DagsterTag.AssetEventDataVersionDeprecated.valueOf(),\n  DagsterTag.AssetEventCodeVersion.valueOf(),\n];\n\nexport const AssetEventSystemTags: React.FC<{\n  event: AssetEventGroup['latest'] | null;\n  paddingLeft?: number;\n  collapsible?: boolean;\n}> = ({event, paddingLeft, collapsible}) => {\n  const [shown, setShown] = useStateWithStorage('show-asset-system-tags', Boolean);\n\n  if (collapsible && !shown) {\n    return (\n      <Caption>\n        <ButtonLink onClick={() => setShown(true)}>\n          <Box flex={{alignItems: 'center'}}>\n            <span>Show tags ({event?.tags.length || 0})</span>\n            <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(0deg)'}} />\n          </Box>\n        </ButtonLink>\n      </Caption>\n    );\n  }\n\n  return (\n    <>\n      <AssetEventSystemTagsTable>\n        <tbody>\n          {event?.tags.length ? (\n            [...event.tags]\n              .sort((a, b) => ORDER.indexOf(b.key) - ORDER.indexOf(a.key))\n              .map((t) => (\n                <tr key={t.key}>\n                  <td style={{paddingLeft}}>\n                    <Mono>{t.key.replace(DagsterTag.Namespace, '')}</Mono>\n                  </td>\n                  <td>{t.value}</td>\n                </tr>\n              ))\n          ) : (\n            <tr>\n              <td style={{paddingLeft}}>No tags to display.</td>\n            </tr>\n          )}\n        </tbody>\n      </AssetEventSystemTagsTable>\n      {collapsible && (\n        <Caption>\n          <ButtonLink onClick={() => setShown(false)}>\n            <Box flex={{alignItems: 'center'}}>\n              <span>Hide tags</span>\n              <Icon name=\"arrow_drop_down\" style={{transform: 'rotate(180deg)'}} />\n            </Box>\n          </ButtonLink>\n        </Caption>\n      )}\n    </>\n  );\n};\n\nconst AssetEventSystemTagsTable = styled.table`\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  tr td:first-child {\n    max-width: 300px;\n    word-wrap: break-word;\n    width: 25%;\n  }\n  tr td {\n    border: 1px solid ${Colors.KeylineGray};\n    padding: 8px 12px;\n    font-size: 14px;\n    vertical-align: top;\n  }\n`;\n","import {gql} from '@apollo/client';\nimport {Box, ButtonLink, Tooltip} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Timestamp} from '../app/time/Timestamp';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {AssetLineageFragment} from './types/AssetLineageElements.types';\n\nconst AssetLineageInfoElement: React.FC<{\n  lineage_info: AssetLineageFragment;\n  timestamp: string;\n}> = ({lineage_info, timestamp}) => {\n  const partition_list_label = lineage_info.partitions.length === 1 ? 'Partition' : 'Partitions';\n  const partition_list_str = lineage_info.partitions\n    .map((partition) => `\"${partition}\"`)\n    .join(', ');\n  const to = assetDetailsPathForKey(lineage_info.assetKey, {asOf: timestamp});\n\n  return (\n    <Box margin={{bottom: 4}}>\n      {lineage_info.partitions.length > 0\n        ? `${partition_list_label} ${partition_list_str} of `\n        : ''}\n      <Tooltip\n        content={\n          <>\n            View snapshot as of{' '}\n            <Timestamp\n              timestamp={{ms: Number(timestamp)}}\n              timeFormat={{showSeconds: true, showTimezone: true}}\n            />\n          </>\n        }\n        modifiers={{offset: {enabled: true, options: {offset: [0, 16]}}}}\n        placement=\"right\"\n      >\n        <Link to={to}>\n          <Box flex={{display: 'inline-flex', alignItems: 'center'}}>\n            {lineage_info.assetKey.path\n              .map((p, i) => <span key={i}>{p}</span>)\n              .reduce(\n                (accum, curr, ii) => [\n                  ...accum,\n                  ii > 0 ? (\n                    <React.Fragment key={`${ii}-space`}>&nbsp;{'>'}&nbsp;</React.Fragment>\n                  ) : null,\n                  curr,\n                ],\n                [] as React.ReactNode[],\n              )}\n          </Box>\n        </Link>\n      </Tooltip>\n    </Box>\n  );\n};\n\nconst MAX_COLLAPSED = 5;\n\nexport const AssetLineageElements: React.FC<{\n  elements: AssetLineageFragment[];\n  timestamp: string;\n}> = ({elements, timestamp}) => {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  return (\n    <div>\n      {elements.length > MAX_COLLAPSED && (\n        <ButtonLink onClick={() => setCollapsed(!collapsed)}>\n          {collapsed ? 'Show More' : 'Show Less'}\n        </ButtonLink>\n      )}\n      {(collapsed ? elements.slice(elements.length - MAX_COLLAPSED) : elements).map((info, idx) => (\n        <AssetLineageInfoElement key={idx} lineage_info={info} timestamp={timestamp} />\n      ))}\n    </div>\n  );\n};\n\nexport const ASSET_LINEAGE_FRAGMENT = gql`\n  fragment AssetLineageFragment on AssetLineageInfo {\n    assetKey {\n      path\n    }\n    partitions\n  }\n`;\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Caption,\n  Subheading,\n  ExternalAnchorButton,\n} from '@dagster-io/ui';\nimport flatMap from 'lodash/flatMap';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {AssetValueGraph, AssetValueGraphData} from './AssetValueGraph';\nimport {AssetEventGroup} from './groupByPartition';\n\nexport const AssetMaterializationGraphs: React.FC<{\n  groups: AssetEventGroup[];\n  xAxis: 'partition' | 'time';\n  asSidebarSection?: boolean;\n  columnCount?: number;\n}> = (props) => {\n  const [xHover, setXHover] = React.useState<string | number | null>(null);\n\n  const reversed = React.useMemo(() => {\n    return [...props.groups].reverse();\n  }, [props.groups]);\n\n  const graphDataByMetadataLabel = extractNumericData(reversed, props.xAxis);\n  const graphLabels = Object.keys(graphDataByMetadataLabel).slice(0, 20).sort();\n\n  if (process.env.NODE_ENV === 'test') {\n    return <span />; // chartjs and our useViewport hook don't play nicely with jest\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `1fr `.repeat(props.columnCount || 2),\n          justifyContent: 'stretch',\n        }}\n      >\n        {graphLabels.map((label) => (\n          <Box\n            key={label}\n            style={{width: '100%'}}\n            border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n          >\n            <Box\n              style={{width: '100%'}}\n              border={{side: 'right', width: 1, color: Colors.KeylineGray}}\n            >\n              {props.asSidebarSection ? (\n                <Box padding={{horizontal: 24, top: 8}} flex={{justifyContent: 'space-between'}}>\n                  <Caption style={{fontWeight: 700}}>{label}</Caption>\n                </Box>\n              ) : (\n                <Box\n                  padding={{horizontal: 24, vertical: 16}}\n                  border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n                  flex={{justifyContent: 'space-between'}}\n                >\n                  <Subheading>{label}</Subheading>\n                </Box>\n              )}\n              <Box padding={{horizontal: 24, vertical: 16}}>\n                <AssetValueGraph\n                  label={label}\n                  width=\"100%\"\n                  data={graphDataByMetadataLabel[label]!}\n                  xHover={xHover}\n                  onHoverX={(x) => x !== xHover && setXHover(x)}\n                />\n              </Box>\n            </Box>\n          </Box>\n        ))}\n      </div>\n      {graphLabels.length === 0 ? (\n        props.asSidebarSection ? (\n          <Box\n            margin={{horizontal: 24, vertical: 12}}\n            style={{color: Colors.Gray500, fontSize: '0.8rem'}}\n          >\n            No numeric metadata entries available to be graphed.\n          </Box>\n        ) : (\n          <Box padding={{horizontal: 24, top: 64}}>\n            <NonIdealState\n              shrinkable\n              icon=\"asset_plot\"\n              title=\"Asset plots are automatically generated by metadata\"\n              description=\"Include numeric metadata entries in your materializations and observations to see data graphed by time or partition.\"\n              action={\n                <ExternalAnchorButton href=\"https://docs.dagster.io/concepts/assets/software-defined-assets#recording-materialization-metadata\">\n                  View documentation\n                </ExternalAnchorButton>\n              }\n            />\n          </Box>\n        )\n      ) : (\n        props.xAxis === 'partition' && (\n          <Box padding={{vertical: 16, horizontal: 24}} style={{color: Colors.Gray400}}>\n            When graphing values by partition, the highest data point for each materialized event\n            label is displayed.\n          </Box>\n        )\n      )}\n    </>\n  );\n};\n\n/**\n * Helper function that iterates over the asset materializations and assembles time series data\n * and stats for all numeric metadata entries. This function makes the following guaruntees:\n *\n * - If a metadata entry is sparsely emitted, points are still included for missing x values\n *   with y = NaN. (For compatiblity with react-chartjs-2)\n * - If a metadata entry is generated many times for the same partition, and xAxis = partition,\n *   the MAX value emitted is used as the data point.\n *\n * Assumes that the data is pre-sorted in ascending partition order if using xAxis = partition.\n */\nconst extractNumericData = (datapoints: AssetEventGroup[], xAxis: 'time' | 'partition') => {\n  const series: {\n    [metadataEntryLabel: string]: AssetValueGraphData;\n  } = {};\n\n  // Build a set of the numeric metadata entry labels (note they may be sparsely emitted)\n  const numericMetadataLabels = uniq(\n    flatMap(datapoints, (e) =>\n      (e.latest?.metadataEntries || [])\n        .filter((k) => ['IntMetadataEntry', 'FloatMetadataEntry'].includes(k.__typename))\n        .map((k) => k.label),\n    ),\n  );\n\n  const append = (label: string, {x, y}: {x: number | string; y: number}) => {\n    const target: AssetValueGraphData = series[label] || {\n      minY: 0,\n      maxY: 0,\n      minXNumeric: 0,\n      maxXNumeric: 0,\n      values: [],\n      xAxis,\n    };\n\n    if (xAxis === 'partition') {\n      // If the xAxis is partition keys, the graph may only contain one value for each partition.\n      // If the existing sample for the partition was null, replace it. Otherwise take the\n      // most recent value.\n      const existingForPartition = target.values.find((v) => v.x === x);\n      if (existingForPartition) {\n        if (!isNaN(y)) {\n          existingForPartition.y = y;\n        }\n        return;\n      }\n    }\n    target.values.push({\n      xNumeric: typeof x === 'number' ? x : target.values.length,\n      x,\n      y,\n    });\n\n    series[label] = target;\n  };\n\n  for (const {partition, latest} of datapoints) {\n    const x = (xAxis === 'partition' ? partition : Number(latest?.timestamp)) || null;\n\n    if (x === null) {\n      // exclude materializations where partition = null from partitioned graphs\n      continue;\n    }\n\n    // Add an entry for every numeric metadata label\n    for (const label of numericMetadataLabels) {\n      const entry = latest?.metadataEntries.find((l) => l.label === label);\n      if (!entry) {\n        append(label, {x, y: NaN});\n        continue;\n      }\n\n      let y = NaN;\n      if (entry.__typename === 'IntMetadataEntry') {\n        if (entry.intValue !== null) {\n          y = entry.intValue;\n        } else {\n          // will incur precision loss here\n          y = parseInt(entry.intRepr);\n        }\n      }\n      if (entry.__typename === 'FloatMetadataEntry' && entry.floatValue !== null) {\n        y = entry.floatValue;\n      }\n      append(label, {x, y});\n    }\n  }\n\n  for (const serie of Object.values(series)) {\n    const xs = serie.values.map((v) => v.xNumeric);\n    const ys = serie.values.map((v) => v.y).filter((v) => !isNaN(v));\n    serie.minXNumeric = Math.min(...xs);\n    serie.maxXNumeric = Math.max(...xs);\n    serie.minY = Math.min(...ys);\n    serie.maxY = Math.max(...ys);\n  }\n  return series;\n};\n","import {gql} from '@apollo/client';\nimport {Box, MetadataTable} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DAGSTER_TYPE_FRAGMENT} from '../dagstertype/DagsterType';\nimport {DagsterTypeFragment} from '../dagstertype/types/DagsterType.types';\nimport {MetadataEntry, METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\nimport {MetadataEntryFragment} from '../metadata/types/MetadataEntry.types';\n\nimport {AssetNodeOpMetadataFragment} from './types/AssetMetadata.types';\n\nexport const metadataForAssetNode = (\n  assetNode: AssetNodeOpMetadataFragment,\n): {assetType?: DagsterTypeFragment; assetMetadata: MetadataEntryFragment[]} => {\n  const assetType = assetNode.type ? assetNode.type : undefined;\n  const assetMetadata = assetNode.metadataEntries || [];\n  return {assetType, assetMetadata};\n};\n\nexport const AssetMetadataTable: React.FC<{\n  assetMetadata: MetadataEntryFragment[];\n  repoLocation: string;\n}> = ({assetMetadata, repoLocation}) => {\n  const rows = assetMetadata.map((entry) => {\n    return {\n      key: entry.label,\n      value: <MetadataEntry entry={entry} repoLocation={repoLocation} />,\n    };\n  });\n  return (\n    <Box padding={{vertical: 16, horizontal: 24}}>\n      <MetadataTable rows={rows} />\n    </Box>\n  );\n};\n\nexport const ASSET_NODE_OP_METADATA_FRAGMENT = gql`\n  fragment AssetNodeOpMetadataFragment on AssetNode {\n    id\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    type {\n      ...DagsterTypeFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${DAGSTER_TYPE_FRAGMENT}\n`;\n","import {Tag} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {AutoMaterializePolicyType} from '../graphql/types';\n\nexport const AutomaterializePolicyTag: React.FC<{\n  policy: {\n    policyType: AutoMaterializePolicyType;\n  };\n}> = ({policy}) => (\n  <Tag>{policy.policyType === AutoMaterializePolicyType.LAZY ? 'Lazy' : 'Eager'}</Tag>\n);\n\nexport const automaterializePolicyDescription = (policy: {\n  policyType: AutoMaterializePolicyType;\n}) => (\n  <>\n    This asset is automatically re-materialized when at least one of the following are true:\n    <ul style={{paddingLeft: 20}}>\n      <li>it is missing</li>\n      <li>it has a freshness policy that requires more up-to-date data</li>\n      <li>any of its descendants have a freshness policy that require more up-to-date data</li>\n      {policy.policyType === AutoMaterializePolicyType.EAGER && (\n        <li>any of its parent assets / partitions have newer data</li>\n      )}\n    </ul>\n    and none of the following are true:\n    <ul style={{paddingLeft: 20, marginBottom: 0}}>\n      <li>any of its parent assets / partitions are missing</li>\n      <li>any of its ancestor assets / partitions have ancestors of their own with newer data</li>\n    </ul>\n  </>\n);\n","import {Alert, Box, Spinner} from '@dagster-io/ui';\nimport {BorderSetting} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LiveDataForNode} from '../asset-graph/Utils';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const CurrentRunsBanner: React.FC<{liveData?: LiveDataForNode; border: BorderSetting}> = ({\n  liveData,\n  border,\n}) => {\n  const {inProgressRunIds = [], unstartedRunIds = []} = liveData || {};\n\n  if (inProgressRunIds.length === 0 && unstartedRunIds.length === 0) {\n    return null;\n  }\n  return (\n    <Box padding={{vertical: 16, left: 24, right: 12}} border={border}>\n      <Alert\n        intent=\"info\"\n        icon={<Spinner purpose=\"body-text\" />}\n        title={\n          <div style={{fontWeight: 400}}>\n            {inProgressRunIds.length > 0 && (\n              <>\n                {inProgressRunIds.map((id) => (\n                  <React.Fragment key={id}>\n                    Run <Link to={`/runs/${id}`}>{titleForRun({id})}</Link>\n                  </React.Fragment>\n                ))}{' '}\n                {inProgressRunIds.length === 1 ? 'is' : 'are'} currently refreshing this asset.\n              </>\n            )}\n            {unstartedRunIds.length > 0 && (\n              <>\n                {unstartedRunIds.map((id) => (\n                  <React.Fragment key={id}>\n                    Run <Link to={`/runs/${id}`}>{titleForRun({id})}</Link>\n                  </React.Fragment>\n                ))}{' '}\n                {unstartedRunIds.length === 1 ? 'has' : 'have'} started and will refresh this asset.\n              </>\n            )}\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box, Colors, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nexport const DependsOnSelfBanner: React.FC = () => {\n  return (\n    <Box\n      padding={{vertical: 16, left: 24, right: 12}}\n      border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n    >\n      <Alert\n        intent=\"info\"\n        icon={\n          <Icon name=\"history_toggle_off\" size={16} color={Colors.Blue700} style={{marginTop: 1}} />\n        }\n        title={\n          <div style={{fontWeight: 400}}>This asset depends on earlier partitions of itself. </div>\n        }\n      />\n    </Box>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport {BorderSetting, DirectionalSpacing} from '@dagster-io/ui/src/components/types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AssetLatestInfoRunFragment} from '../asset-graph/types/useLiveDataForAssetKeys.types';\nimport {titleForRun} from '../runs/RunUtils';\n\nexport const FailedRunSinceMaterializationBanner: React.FC<{\n  run: AssetLatestInfoRunFragment | null;\n  padding?: DirectionalSpacing;\n  border?: BorderSetting;\n}> = ({run, border, padding = {vertical: 16, left: 24, right: 12}}) => {\n  if (run) {\n    return (\n      <Box padding={padding} border={border}>\n        <Alert\n          intent=\"error\"\n          title={\n            <div style={{fontWeight: 400}}>\n              Run <Link to={`/runs/${run.id}`}>{titleForRun(run)}</Link> failed to materialize this\n              asset.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n  return null;\n};\n","import {ApolloClient, useApolloClient} from '@apollo/client';\nimport {Button, Spinner, Tooltip, Icon} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {useLaunchPadHooks} from '../launchpad/LaunchpadHooksContext';\nimport {LaunchPipelineExecutionMutationVariables} from '../runs/types/RunUtils.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nimport {\n  AssetsInScope,\n  buildAssetCollisionsAlert,\n  executionParamsForAssetJob,\n  getCommonJob,\n  LAUNCH_ASSET_LOADER_QUERY,\n} from './LaunchAssetExecutionButton';\nimport {\n  LaunchAssetExecutionAssetNodeFragment,\n  LaunchAssetLoaderQuery,\n  LaunchAssetLoaderQueryVariables,\n} from './types/LaunchAssetExecutionButton.types';\n\ntype ObserveAssetsState =\n  | {type: 'none'}\n  | {type: 'loading'}\n  | {type: 'error'; error: string}\n  | {\n      type: 'single-run';\n      executionParams: LaunchPipelineExecutionMutationVariables['executionParams'];\n    };\n\nexport const LaunchAssetObservationButton: React.FC<{\n  scope: AssetsInScope;\n  intent?: 'primary' | 'none';\n  preferredJobName?: string;\n}> = ({scope, preferredJobName, intent = 'none'}) => {\n  const {useLaunchWithTelemetry} = useLaunchPadHooks();\n  const launchWithTelemetry = useLaunchWithTelemetry();\n\n  const [state, setState] = React.useState<ObserveAssetsState>({type: 'none'});\n  const client = useApolloClient();\n\n  const scopeAssets = 'selected' in scope ? scope.selected : scope.all;\n  if (!scopeAssets.length) {\n    return <span />;\n  }\n\n  const count = scopeAssets.length > 1 ? ` (${scopeAssets.length})` : '';\n  const label =\n    'selected' in scope\n      ? `Observe selected${count}`\n      : scope.skipAllTerm\n      ? `Observe${count}`\n      : `Observe sources ${count}`;\n\n  const hasMaterializePermission = scopeAssets.every((a) => a.hasMaterializePermission);\n  if (!hasMaterializePermission) {\n    return (\n      <Tooltip content=\"You do not have permission to observe source assets\">\n        <Button intent={intent} icon={<Icon name=\"observation\" />} disabled>\n          {label}\n        </Button>\n      </Tooltip>\n    );\n  }\n\n  const onClick = async (e: React.MouseEvent<any>) => {\n    if (state.type === 'loading') {\n      return;\n    }\n    setState({type: 'loading'});\n\n    const result = await client.query<LaunchAssetLoaderQuery, LaunchAssetLoaderQueryVariables>({\n      query: LAUNCH_ASSET_LOADER_QUERY,\n      variables: {assetKeys: scopeAssets.map((a) => ({path: a.assetKey.path}))},\n    });\n\n    if (result.data.assetNodeDefinitionCollisions.length) {\n      showCustomAlert(buildAssetCollisionsAlert(result.data));\n      setState({type: 'none'});\n      return;\n    }\n\n    const assets = result.data.assetNodes;\n    const forceLaunchpad = e.shiftKey;\n\n    const next = await stateForObservingAssets(client, assets, forceLaunchpad, preferredJobName);\n\n    if (next.type === 'error') {\n      showCustomAlert({\n        title: 'Unable to observe',\n        body: next.error,\n      });\n      setState({type: 'none'});\n      return;\n    }\n\n    if (next.type === 'single-run') {\n      await launchWithTelemetry({executionParams: next.executionParams}, 'toast');\n      setState({type: 'none'});\n    } else {\n      setState(next);\n    }\n  };\n\n  return (\n    <Button\n      intent={intent}\n      onClick={onClick}\n      icon={\n        state.type === 'loading' ? <Spinner purpose=\"body-text\" /> : <Icon name=\"observation\" />\n      }\n    >\n      {label}\n    </Button>\n  );\n};\n\nasync function stateForObservingAssets(\n  _client: ApolloClient<any>,\n  assets: LaunchAssetExecutionAssetNodeFragment[],\n  _forceLaunchpad: boolean,\n  preferredJobName?: string,\n): Promise<ObserveAssetsState> {\n  if (assets.some((x) => !x.isSource)) {\n    return {\n      type: 'error',\n      error: 'One or more non-source assets are selected and cannot be observed.',\n    };\n  }\n\n  if (assets.some((x) => !x.isObservable)) {\n    return {\n      type: 'error',\n      error: 'One or more of the selected source assets are unversioned and cannot be observed.',\n    };\n  }\n  const repoAddress = buildRepoAddress(\n    assets[0]?.repository.name || '',\n    assets[0]?.repository.location.name || '',\n  );\n  const repoName = repoAddressAsHumanString(repoAddress);\n\n  if (\n    !assets.every(\n      (a) =>\n        a.repository.name === repoAddress.name &&\n        a.repository.location.name === repoAddress.location,\n    )\n  ) {\n    return {\n      type: 'error',\n      error: `Assets must be in ${repoName} to be materialized together.`,\n    };\n  }\n\n  const jobName = getCommonJob(assets, preferredJobName);\n  if (!jobName) {\n    return {\n      type: 'error',\n      error: 'Assets must be in the same job to be observed together.',\n    };\n  }\n\n  return {\n    type: 'single-run',\n    executionParams: executionParamsForAssetJob(repoAddress, jobName, assets, []),\n  };\n}\n","import {gql} from '@apollo/client';\nimport {Box, Icon, Mono} from '@dagster-io/ui';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {UnderlyingOpsAssetNodeFragment} from './types/UnderlyingOpsOrGraph.types';\n\nexport const UnderlyingOpsOrGraph: React.FC<{\n  assetNode: UnderlyingOpsAssetNodeFragment;\n  repoAddress: RepoAddress;\n  minimal?: boolean;\n}> = ({assetNode, repoAddress, minimal}) => {\n  const {assetKey, graphName, opNames, jobNames} = assetNode;\n  const opCount = opNames.length;\n\n  if (!opCount) {\n    return null;\n  }\n\n  if (!graphName) {\n    const firstOp = opNames[0];\n    if (displayNameForAssetKey(assetKey) === firstOp) {\n      return null;\n    }\n    const opPath = workspacePathFromAddress(repoAddress, `/ops/${firstOp}`);\n    return (\n      <Box flex={{gap: 4, alignItems: 'center'}}>\n        <Icon name=\"op\" size={16} />\n        <Mono>\n          <Link to={opPath}>{firstOp}</Link>\n        </Mono>\n      </Box>\n    );\n  }\n\n  if (!jobNames.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{gap: 4, alignItems: 'center'}}>\n      <Icon name=\"schema\" size={16} />\n      {minimal ? (\n        <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n          View graph\n        </Link>\n      ) : (\n        <Mono>\n          <Link to={workspacePathFromAddress(repoAddress, `/graphs/${jobNames[0]}/${graphName}/`)}>\n            {graphName}\n          </Link>\n          {` (${opCount === 1 ? '1 op' : `${opCount} ops`})`}\n        </Mono>\n      )}\n    </Box>\n  );\n};\n\nexport const UNDERLYING_OPS_ASSET_NODE_FRAGMENT = gql`\n  fragment UnderlyingOpsAssetNodeFragment on AssetNode {\n    id\n    assetKey {\n      path\n    }\n    graphName\n    opNames\n    jobNames\n  }\n`;\n","import {FontFamily} from '@dagster-io/ui';\nimport styled from 'styled-components/macro';\n\nexport const Version = styled.div`\n  font-family: ${FontFamily.monospace};\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import groupBy from 'lodash/groupBy';\nimport React from 'react';\n\nimport {\n  AssetMaterializationFragment,\n  AssetObservationFragment,\n} from './types/useRecentAssetEvents.types';\n\nconst NO_PARTITION_KEY = '__NO_PARTITION__';\n\ntype Event = AssetMaterializationFragment | AssetObservationFragment;\n\nexport type AssetEventGroup = {\n  latest: Event | null;\n  all: Event[];\n  timestamp?: string;\n  partition?: string;\n};\n\nconst sortByEventTimestamp = (a: Event, b: Event) => Number(b?.timestamp) - Number(a?.timestamp);\n\n/**\n * A hook that can bucket a list of materializations by partition, if any, with the `latest`\n * materialization separated from predecessor materializations.\n */\nconst groupByPartition = (events: Event[], definedPartitionKeys: string[]): AssetEventGroup[] => {\n  const grouped = groupBy(events, (m) => m.partition || NO_PARTITION_KEY);\n  const orderedPartitionKeys = [...definedPartitionKeys].reverse();\n\n  if (NO_PARTITION_KEY in grouped) {\n    orderedPartitionKeys.push(NO_PARTITION_KEY);\n  }\n\n  return orderedPartitionKeys\n    .filter((key) => key !== NO_PARTITION_KEY)\n    .map((key) => {\n      const sorted = [...(grouped[key] || [])].sort(sortByEventTimestamp);\n      const latestMaterialization = sorted.find((a) => a.__typename === 'MaterializationEvent');\n      const latest = latestMaterialization || sorted[0] || null;\n\n      return {\n        all: sorted,\n        latest,\n        timestamp: latest?.timestamp,\n        partition: key,\n      };\n    });\n};\n\nexport function useGroupedEvents(\n  xAxis: 'partition' | 'time',\n  materializations: Event[],\n  observations: Event[],\n  loadedPartitionKeys: string[] | undefined,\n) {\n  return React.useMemo<AssetEventGroup[]>(() => {\n    const events = [...materializations, ...observations].sort(\n      (b, a) => Number(a.timestamp) - Number(b.timestamp),\n    );\n    if (xAxis === 'partition' && loadedPartitionKeys) {\n      return groupByPartition(events, loadedPartitionKeys);\n    } else {\n      // return a group for every materialization to achieve un-grouped rendering\n      return events.map((event) => ({\n        latest: event,\n        partition: event.partition || undefined,\n        timestamp: event.timestamp,\n        all: [],\n      }));\n    }\n  }, [loadedPartitionKeys, materializations, observations, xAxis]);\n}\n","import {gql, useQuery} from '@apollo/client';\nimport uniq from 'lodash/uniq';\nimport * as React from 'react';\n\nimport {METADATA_ENTRY_FRAGMENT} from '../metadata/MetadataEntry';\n\nimport {ASSET_LINEAGE_FRAGMENT} from './AssetLineageElements';\nimport {AssetViewParams} from './AssetView';\nimport {AssetKey} from './types';\nimport {AssetEventsQuery, AssetEventsQueryVariables} from './types/useRecentAssetEvents.types';\n\n/**\n * If the asset has a defined partition space, we load all materializations in the\n * last 100 partitions. This ensures that if you run a huge backfill of old partitions,\n * you still see accurate info for the last 100 partitions in the UI. A count-based\n * limit could cause random partitions to disappear if materializations were out of order.\n */\nexport function useRecentAssetEvents(\n  assetKey: AssetKey,\n  params: AssetViewParams,\n  {assetHasDefinedPartitions}: {assetHasDefinedPartitions: boolean},\n) {\n  // The params behavior on this page is a bit nuanced - there are two main query\n  // params: ?timestamp= and ?partition= and only one is set at a time. They can\n  // be undefined, an empty string or a value and all three states are used.\n  //\n  // - If both are undefined, we expand the first item in the table by default\n  // - If one is present, it determines which xAxis is used (partition grouping)\n  // - If one is present and set to a value, that item in the table is expanded.\n  // - If one is present but an empty string, no items in the table is expanded.\n\n  const before = params.asOf ? `${Number(params.asOf) + 1}` : undefined;\n  const xAxisDefault = assetHasDefinedPartitions ? 'partition' : 'time';\n  const xAxis: 'partition' | 'time' =\n    params.partition !== undefined\n      ? 'partition'\n      : params.time !== undefined || before\n      ? 'time'\n      : xAxisDefault;\n\n  const loadUsingPartitionKeys = assetHasDefinedPartitions && xAxis === 'partition';\n\n  const {data, loading, refetch} = useQuery<AssetEventsQuery, AssetEventsQueryVariables>(\n    ASSET_EVENTS_QUERY,\n    {\n      variables: loadUsingPartitionKeys\n        ? {\n            assetKey: {path: assetKey.path},\n            before,\n            partitionInLast: 120,\n          }\n        : {\n            assetKey: {path: assetKey.path},\n            before,\n            limit: 100,\n          },\n    },\n  );\n\n  return React.useMemo(() => {\n    const asset = data?.assetOrError.__typename === 'Asset' ? data?.assetOrError : null;\n    const materializations = asset?.assetMaterializations || [];\n    const observations = asset?.assetObservations || [];\n\n    const allPartitionKeys = asset?.definition?.partitionKeys;\n    const loadedPartitionKeys =\n      loadUsingPartitionKeys && allPartitionKeys\n        ? allPartitionKeys.slice(allPartitionKeys.length - 120)\n        : uniq(\n            [...materializations, ...observations].map((p) => p.partition!).filter(Boolean),\n          ).sort();\n\n    return {\n      asset,\n      loadedPartitionKeys,\n      materializations,\n      observations,\n      loading,\n      refetch,\n      xAxis,\n    };\n  }, [data, loading, refetch, loadUsingPartitionKeys, xAxis]);\n}\n\nexport const ASSET_MATERIALIZATION_FRAGMENT = gql`\n  fragment AssetMaterializationFragment on MaterializationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n    assetLineage {\n      ...AssetLineageFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n  ${ASSET_LINEAGE_FRAGMENT}\n`;\n\nexport const ASSET_OBSERVATION_FRAGMENT = gql`\n  fragment AssetObservationFragment on ObservationEvent {\n    partition\n    tags {\n      key\n      value\n    }\n    runOrError {\n      ... on PipelineRun {\n        id\n        mode\n        repositoryOrigin {\n          id\n          repositoryName\n          repositoryLocationName\n        }\n        status\n        pipelineName\n        pipelineSnapshotId\n      }\n    }\n    runId\n    timestamp\n    stepKey\n    label\n    description\n    metadataEntries {\n      ...MetadataEntryFragment\n    }\n  }\n\n  ${METADATA_ENTRY_FRAGMENT}\n`;\n\nexport const ASSET_EVENTS_QUERY = gql`\n  query AssetEventsQuery(\n    $assetKey: AssetKeyInput!\n    $limit: Int\n    $before: String\n    $partitionInLast: Int\n  ) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        key {\n          path\n        }\n        assetObservations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetObservationFragment\n        }\n        assetMaterializations(\n          limit: $limit\n          beforeTimestampMillis: $before\n          partitionInLast: $partitionInLast\n        ) {\n          ...AssetMaterializationFragment\n        }\n\n        definition {\n          id\n          partitionKeys\n        }\n      }\n    }\n  }\n\n  ${ASSET_OBSERVATION_FRAGMENT}\n  ${ASSET_MATERIALIZATION_FRAGMENT}\n`;\n","import {NonIdealState} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  isGraph: boolean;\n  repoAddress?: RepoAddress;\n  result:\n    | {\n        __typename: 'PipelineSnapshotNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PipelineNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'RepositoryNotFoundError';\n        message: string;\n      }\n    | {\n        __typename: 'PythonError';\n        message: string;\n      };\n}\n\nexport const NonIdealPipelineQueryResult: React.FC<Props> = ({isGraph, repoAddress, result}) => {\n  if (result.__typename === 'PipelineSnapshotNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph snapshot not found' : 'Pipeline snapshot not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PipelineNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={isGraph ? 'Graph not found' : 'Pipeline not found'}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'RepositoryNotFoundError') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title={`${repoAddress ? repoAddressAsHumanString(repoAddress) : 'Definitions'} not found`}\n        description={result.message}\n      />\n    );\n  }\n  if (result.__typename === 'PythonError') {\n    return <NonIdealState icon=\"error\" title=\"Query error\" description={result.message} />;\n  }\n  return <span />;\n};\n"],"names":["AssetEdges","_ref","edges","highlighted","_ref$strokeWidth","strokeWidth","_ref$baseColor","baseColor","Colors","_jsxs","React","children","_jsx","AssetEdgeSet","color","filter","_ref2","fromId","toId","_ref3","_Fragment","id","concat","btoa","viewBox","refX","refY","markerUnits","markerWidth","orient","d","fill","map","edge","idx","buildSVGPath","source","from","target","to","stroke","markerEnd","AssetGraphJobSidebar","pipelineSelector","queryResult","useQuery","ASSET_GRAPH_JOB_SIDEBAR","variables","repositoryName","repositoryLocationName","repoAddress","buildRepoAddress","Loading","pipelineSnapshotOrError","__typename","NonIdealPipelineQueryResult","isGraph","result","SidebarContainerOverview","container","gql","_templateObject","_taggedTemplateLiteral","SIDEBAR_ROOT_CONTAINER_FRAGMENT","PYTHON_ERROR_FRAGMENT","LatestMaterializationMetadata","assetKey","latest","liveData","latestRun","runOrError","repositoryOrigin","repo","useRepository","Box","padding","top","bottom","NonIdealState","icon","title","description","latestEvent","latestAssetLineage","assetLineage","MetadataTable","Link","runId","timestamp","Mono","titleForRun","isHiddenAssetGroupJob","pipelineName","left","PipelineReference","showIcon","pipelineHrefContext","snapshotId","pipelineSnapshotId","isJob","isThisThingAJob","Group","direction","spacing","alignItems","Icon","name","linkToRunEvent","stepKey","partition","flex","gap","Timestamp","ms","Number","StaleReasonsTags","include","length","AssetLineageElements","elements","metadataEntries","entry","label","MetadataEntry","expandSmallValues","repoLocation","location","styled","Table","withConfig","displayName","componentId","AssetSidebarActivitySummary","asset","assetLastMaterializedAt","isSourceAsset","_useRecentAssetEvents","useRecentAssetEvents","assetHasDefinedPartitions","partitionDefinition","materializations","observations","loadedPartitionKeys","loading","refetch","xAxis","grouped","useGroupedEvents","displayedEvent","vertical","Spinner","purpose","FailedRunSinceMaterializationBanner","run","runWhichFailedToMaterialize","border","side","width","CurrentRunsBanner","freshnessPolicy","SidebarSection","margin","horizontal","Body","style","freshnessPolicyDescription","CurrentMinutesLateTag","policy","autoMaterializePolicy","automaterializePolicyDescription","AutomaterializePolicyTag","maxWidth","overflowX","fontSize","collapsedByDefault","AssetEventSystemTags","event","paddingLeft","AssetMaterializationGraphs","asSidebarSection","groups","columnCount","SidebarAssetInfo","_asset$configField","_asset$op","graphNode","definition","partitionHealthRefreshHint","healthRefreshHintFromLiveData","partitionHealthData","usePartitionHealthData","data","SIDEBAR_ASSET_QUERY","path","lastMaterialization","assetNodeOrError","Header","assetNode","repository","_metadataForAssetNode","metadataForAssetNode","assetMetadata","assetType","hasAssetMetadata","assetConfigSchema","configField","configType","OpMetadataPlugin","op","metadata","pluginForMetadata","AssetDefinedInMultipleReposNotice","loadedFromRepo","padded","SidebarComponent","Description","isSource","borderBottom","nodeDependsOnSelf","DependsOnSelfBanner","opVersion","Version","ConfigTypeSchema","type","typesInScope","recursiveConfigTypes","requiredResources","resource","ResourceContainer","workspacePathFromAddress","resourceKey","ResourceHeader","AssetMetadataTable","TypeSidebarSection","PartitionHealthSummary","DagsterTypeSummary","_ref4","displayNameForAssetKey","right","SidebarTitle","marginBottom","display","justifyContent","flexWrap","AssetCatalogLink","assetDetailsPathForKey","UnderlyingOpsOrGraph","minimal","SIDEBAR_ASSET_FRAGMENT","ASSET_NODE_CONFIG_FRAGMENT","METADATA_ENTRY_FRAGMENT","ASSET_NODE_OP_METADATA_FRAGMENT","_templateObject2","ASSET_FOR_NAVIGATION_QUERY","MINIMAL_SCALE","GROUPS_ONLY_SCALE","AssetGraphExplorer","props","_useAssetGraphData","useAssetGraphData","explorerPath","opsQuery","fetchOptions","fetchResult","assetGraphData","graphQueryItems","graphAssetKeys","allAssetKeys","applyingEmptyDefault","_useLiveDataForAssetK","useLiveDataForAssetKeys","liveDataByNode","liveDataRefreshState","allowStaleData","graphHasCycles","AssetGraphExplorerWithData","_objectSpread","options","setOptions","onChangeExplorerPath","onNavigateToSourceAssetNode","fetchOptionFilters","findAssetLocation","apollo","useApolloClient","_asyncToGenerator","_regeneratorRuntime","mark","_callee","key","_yield$apollo$query","def","wrap","_context","prev","next","query","sent","assetOrError","abrupt","opNames","jobName","jobNames","find","groupName","stop","_x","apply","arguments","useFindAssetLocation","_useAssetLayout","useAssetLayout","layout","async","viewportEl","_React$useState","_React$useState2","_slicedToArray","setHighlighted","selectedAssetValues","split","selectedGraphNodes","Object","values","nodes","node","includes","tokenForAssetKey","lastSelectedNode","selectedDefinitions","a","allDefinitionsForMaterialize","onSelectNode","e","token","nodeIsInDisplayedGraph","nextOpsNameSelection","tokensToAdd","tokensInRange","existing","nextCenter","_viewportEl$current","stopPropagation","t0","t1","shiftKey","metaKey","opsInRange","graph","without","uniq","_toConsumableArray","join","current","zoomToSVGCoords","bounds","x","y","_x2","_x3","_React$useState3","_React$useState4","lastRenderedLayout","setLastRenderedLayout","renderingNewLayout","focus","autocenter","allowGroupsOnlyZoomLevel","keys","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","ErrorBoundary","region","EmptyDAGNotice","nodeType","LargeDAGNotice","EntirelyFilteredDAGNotice","undefined","LoadingNotice","SVGViewport","ref","r","interactor","graphWidth","graphHeight","height","graphHasNoMinimumZoom","onClick","onArrowKeyDown","dir","layoutWithoutExternalLinks","pickBy","_assetGraphData$nodes","nextId","closestNodeInDirection","zoomToSVGBox","onDoubleClick","_viewportEl$current2","maxZoom","maxAutocenterZoom","scale","SVGContainer","Math","max","sort","b","group","targetScale","scaleForSVGBounds","AssetGroupNode","JSON","parse","_createElement","onMouseEnter","onMouseLeave","_viewportEl$current3","overflow","AssetNodeMinimal","selected","AssetNode","AssetNodeLink","OptionsOverlay","Checkbox","format","checked","preferAssetRendering","onChange","_selectedDefinitions$","position","QueryRefreshCountdown","refreshState","dataDescription","LaunchAssetObservationButton","preferredJobName","scope","isObservable","all","LaunchAssetExecutionButton","liveDataForStale","QueryOverlay","GraphQueryInput","items","value","placeholder","popoverPosition","second","RightInfoPanel","RightInfoPanelContent","resetErrorOnChange","_ref6","seen","_ref5","stack","pop","downstream","n","Boolean","some","push","graphDirectionOf","_ref7","_step","ledToTarget","_iterator","_createForOfIteratorHelper","s","done","err","f","repositoryDisambiguationRequired","fontWeight","userSelect","size","workspacePath","GroupRepoName","withMiddleTruncation","buildRepoPathForHuman","maxLength","GroupOutline","inset","background","fontFamily","FontFamily","AssetNodeLinkContainer","className","ASSET_LINK_NAME_MAX_LENGTH","_fetchResult$data","ASSET_GRAPH_QUERY","notifyOnNetworkStatusChange","groupSelector","assetNodes","_React$useMemo","matching","hideNodesMatching","reject","buildGraphQueryItems","_filterByQuery","filterByQuery","buildGraphData","hideEdgesToNodesOutsideQuery","removeEdgesToHiddenAssets","inputs","dependencyKeys","dependsOn","solid","outputs","dependedByKeys","dependedBy","graphData","allNodes","allNodesById","groupBy","toGraphId","notSourceAsset","_i","_Object$keys","upstream","_i2","_Object$keys2","_i3","_Object$keys3","_i4","_Object$keys4","calculateGraphDistances","keyBy","g","start","dfsUpstream","depth","flatMap","i","dname","dfsDownstream","ASSET_NODE_FRAGMENT","ORDER","DagsterTag","collapsible","_useStateWithStorage","useStateWithStorage","_useStateWithStorage2","shown","setShown","Caption","ButtonLink","tags","transform","AssetEventSystemTagsTable","indexOf","t","replace","AssetLineageInfoElement","lineage_info","partition_list_label","partitions","partition_list_str","asOf","Tooltip","content","timeFormat","showSeconds","showTimezone","modifiers","offset","enabled","placement","p","reduce","accum","curr","ii","collapsed","setCollapsed","slice","info","ASSET_LINEAGE_FRAGMENT","xHover","setXHover","reversed","reverse","graphDataByMetadataLabel","extractNumericData","graphLabels","gridTemplateColumns","repeat","Subheading","AssetValueGraph","onHoverX","shrinkable","action","ExternalAnchorButton","href","datapoints","series","numericMetadataLabels","_e$latest","k","append","minY","maxY","minXNumeric","maxXNumeric","existingForPartition","v","isNaN","xNumeric","_step$value","_step2","_iterator2","_loop","l","NaN","intValue","parseInt","intRepr","floatValue","_Object$values","serie","xs","ys","min","rows","DAGSTER_TYPE_FRAGMENT","Tag","policyType","AutoMaterializePolicyType","_ref2$inProgressRunId","inProgressRunIds","_ref2$unstartedRunIds","unstartedRunIds","Alert","intent","marginTop","_ref$padding","_ref$intent","launchWithTelemetry","useLaunchWithTelemetry","useLaunchPadHooks","state","setState","client","scopeAssets","count","skipAllTerm","every","hasMaterializePermission","Button","disabled","assets","forceLaunchpad","LAUNCH_ASSET_LOADER_QUERY","assetKeys","assetNodeDefinitionCollisions","showCustomAlert","buildAssetCollisionsAlert","stateForObservingAssets","body","error","executionParams","_x4","_x5","_stateForObservingAssets","_callee2","_client","_forceLaunchpad","_assets$","_assets$2","repoName","_context2","repoAddressAsHumanString","getCommonJob","executionParamsForAssetJob","graphName","opCount","firstOp","opPath","UNDERLYING_OPS_ASSET_NODE_FRAGMENT","NO_PARTITION_KEY","sortByEventTimestamp","groupByPartition","events","definedPartitionKeys","m","orderedPartitionKeys","sorted","params","before","xAxisDefault","time","loadUsingPartitionKeys","_useQuery","ASSET_EVENTS_QUERY","partitionInLast","limit","_asset$definition","assetMaterializations","assetObservations","allPartitionKeys","partitionKeys","ASSET_MATERIALIZATION_FRAGMENT","ASSET_OBSERVATION_FRAGMENT","_templateObject3","message"],"sourceRoot":""}