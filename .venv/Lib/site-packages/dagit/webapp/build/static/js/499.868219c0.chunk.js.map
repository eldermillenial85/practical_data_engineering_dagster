{"version":3,"file":"static/js/499.868219c0.chunk.js","mappings":"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","sources":["../../core/src/instance/BackfillPartitionsRequestedDialog.tsx","../../core/src/instance/BackfillRow.tsx","../../core/src/instance/BackfillStepStatusDialog.tsx","../../core/src/instance/BackfillTerminationDialog.tsx","../../core/src/instance/BackfillTable.tsx","../../core/src/instance/LastRunSummary.tsx","../../core/src/instance/StepSummaryForRun.tsx","../../core/src/instigation/InstigationTick.tsx","../../core/src/instigation/InstigationUtils.tsx","../../core/src/instigation/filterPermissionedInstigationState.tsx","../../core/src/instigation/instigationStateSummary.tsx","../../core/src/instigation/useInstigationStateReducer.tsx","../../core/src/overview/BasicInstigationStateFragment.tsx","../../core/src/overview/OverviewExpansionKey.tsx","../../core/src/partitions/PartitionRunList.tsx","../../core/src/partitions/PartitionStepStatus.tsx","../../core/src/partitions/RunMatrixUtils.tsx","../../core/src/partitions/useMatrixData.tsx","../../core/src/partitions/usePartitionStepQuery.tsx","../../core/src/resources/ResourceTabs.tsx","../../core/src/resources/ResourceRoot.tsx","../../core/src/resources/VirtualizedResourceRow.tsx","../../core/src/resources/VirtualizedResourceTable.tsx","../../core/src/resources/WorkspaceResourcesRoot.tsx","../../core/src/runs/RepoSectionHeader.tsx","../../core/src/runs/RunStatusPez.tsx","../../core/src/runs/mergeStatusToBackground.tsx","../../core/src/runs/RunTimeline.tsx","../../core/src/ui/useFormatDateTime.tsx","../../core/src/runs/batchRunsForTimeline.tsx","../../core/src/schedules/ScheduleStateChangeDialog.tsx","../../core/src/schedules/ScheduleBulkActionMenu.tsx","../../core/src/schedules/SchedulerInfo.tsx","../../core/src/schedules/makeScheduleKey.tsx","../../core/src/sensors/SensorStateChangeDialog.tsx","../../core/src/sensors/SensorBulkActionMenu.tsx","../../core/src/sensors/EditCursorDialog.tsx","../../core/src/ticks/SensorDryRunDialog.tsx","../../core/src/sensors/SensorDetails.tsx","../../core/src/sensors/SensorInfo.tsx","../../core/src/sensors/makeSensorKey.tsx","../../core/src/ticks/DryRunRequestTable.tsx","../../core/src/ticks/DynamicPartitionRequests.tsx","../../core/src/ticks/RunRequestFragment.tsx","../../core/src/ui/CheckAllBox.tsx","../../core/src/ui/Filters/useInstigationStatusFilter.tsx","../../core/src/ui/findDuplicateRepoNames.tsx","../../core/src/ui/useRepoExpansionState.tsx","../../core/src/instance/JobMenu.tsx","../../core/src/workspace/VirtualizedJobRow.tsx","../../core/src/schedules/SchedulesTable.tsx","../../core/src/workspace/VirtualizedScheduleRow.tsx","../../core/src/workspace/VirtualizedSensorRow.tsx","../../core/src/workspace/VirtualizedWorkspaceTable.tsx","../../core/src/workspace/WorkspaceTabs.tsx","../../core/src/workspace/WorkspaceHeader.tsx"],"sourcesContent":["import {Button, DialogBody, DialogFooter, Dialog, FontFamily, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\nexport const BackfillPartitionsRequestedDialog = ({backfill, onClose}: Props) => {\n  return (\n    <Dialog\n      isOpen={!!backfill}\n      title={\n        <span>\n          Partitions requested for backfill:{' '}\n          <span style={{fontSize: '18px', fontFamily: FontFamily.monospace}}>{backfill?.id}</span>\n        </span>\n      }\n      onClose={onClose}\n    >\n      <DialogBody>\n        {backfill && backfill.partitionNames ? (\n          <Box flex={{direction: 'column', gap: 8}} style={{maxHeight: '80vh', overflowY: 'auto'}}>\n            {backfill.partitionNames.map((partitionName) => (\n              <div key={partitionName}>{partitionName}</div>\n            ))}\n          </Box>\n        ) : null}\n      </DialogBody>\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n","import {gql, QueryResult, useLazyQuery} from '@apollo/client';\nimport {Box, Button, Colors, Icon, MenuItem, Menu, Popover, Tag, Mono} from '@dagster-io/ui';\nimport countBy from 'lodash/countBy';\nimport * as React from 'react';\nimport {useHistory, Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {RunStatus, BulkActionStatus} from '../graphql/types';\nimport {PartitionStatus, PartitionStatusHealthSourceOps} from '../partitions/PartitionStatus';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {AssetKeyTagCollection} from '../runs/AssetKeyTagCollection';\nimport {inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStatusTagsWithCounts} from '../runs/RunTimeline';\nimport {runsPathWithFilters} from '../runs/RunsFilterInput';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {LoadingOrNone, useDelayedRowQuery} from '../workspace/VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {workspacePathFromAddress, workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {\n  PartitionStatusesForBackfillFragment,\n  SingleBackfillCountsQuery,\n  SingleBackfillCountsQueryVariables,\n  SingleBackfillQuery,\n  SingleBackfillQueryVariables,\n} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\n\nconst NoBackfillStatusQuery = [\n  () => Promise.resolve({data: undefined} as QueryResult<undefined>),\n  {data: undefined, called: true, loading: false} as QueryResult<undefined>,\n] as const;\n\nexport const BackfillRow = ({\n  backfill,\n  allPartitions,\n  showBackfillTarget,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n  onShowPartitionsRequested,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  showBackfillTarget: boolean;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n  onShowPartitionsRequested: (backfill: BackfillTableFragment) => void;\n}) => {\n  const statusDetails = useLazyQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {backfillId: backfill.id},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusCounts = useLazyQuery<SingleBackfillCountsQuery, SingleBackfillCountsQueryVariables>(\n    SINGLE_BACKFILL_STATUS_COUNTS_QUERY,\n    {\n      variables: {backfillId: backfill.id},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const statusUnsupported = backfill.numPartitions === null || backfill.partitionNames === null;\n\n  // Note: We switch queries based on how many partitions there are to display,\n  // because the detail is nice for small backfills but breaks for 100k+ partitions.\n  //\n  // If the number of partitions or partition names are missing, we use a mock to\n  // avoid executing any query at all. This is a bit awkward, but seems cleaner than\n  // making the hooks below support an optional query function / result.\n  const [statusQueryFn, statusQueryResult] = statusUnsupported\n    ? NoBackfillStatusQuery\n    : (backfill.numPartitions || 0) > BACKFILL_PARTITIONS_COUNTS_THRESHOLD\n    ? statusCounts\n    : statusDetails;\n\n  useDelayedRowQuery(statusQueryFn);\n  useQueryRefreshAtInterval(statusQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = statusQueryResult;\n  const {counts, statuses} = React.useMemo(() => {\n    if (data?.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {counts: null, statuses: null};\n    }\n    if ('partitionStatusCounts' in data.partitionBackfillOrError) {\n      const counts = Object.fromEntries(\n        data.partitionBackfillOrError.partitionStatusCounts.map((e) => [e.runStatus, e.count]),\n      );\n      return {counts, statuses: null};\n    }\n    const statuses = data.partitionBackfillOrError.partitionStatuses?.results;\n    const counts = countBy(statuses, (k) => k.runStatus);\n    return {counts, statuses};\n  }, [data]);\n\n  const canCancelRuns = React.useMemo(() => {\n    if (counts) {\n      const queuedCount = counts[RunStatus.QUEUED] || 0;\n      const startedCount = counts[RunStatus.STARTED] || 0;\n      return queuedCount > 0 || startedCount > 0;\n    }\n    return false;\n  }, [counts]);\n\n  return (\n    <tr>\n      <td style={{width: 120}}>\n        <Mono style={{fontSize: '16px', lineHeight: '18px'}}>\n          <Link\n            to={\n              backfill.isAssetBackfill\n                ? `/overview/backfills/${backfill.id}`\n                : runsPathWithFilters([\n                    {\n                      token: 'tag',\n                      value: `dagster/backfill=${backfill.id}`,\n                    },\n                  ])\n            }\n          >\n            {backfill.id}\n          </Link>\n        </Mono>\n      </td>\n      <td style={{width: 220}}>\n        {backfill.timestamp ? <TimestampDisplay timestamp={backfill.timestamp} /> : '-'}\n      </td>\n      {showBackfillTarget ? (\n        <td style={{width: '20%'}}>\n          <BackfillTarget backfill={backfill} />\n        </td>\n      ) : null}\n      <td style={{width: allPartitions ? 300 : 140}}>\n        <BackfillRequestedRange\n          backfill={backfill}\n          allPartitions={allPartitions}\n          onExpand={() => onShowPartitionsRequested(backfill)}\n        />\n      </td>\n      <td style={{width: 140}}>\n        {counts || statusUnsupported ? (\n          <BackfillStatusTag backfill={backfill} counts={counts} />\n        ) : (\n          <LoadingOrNone queryResult={statusQueryResult} noneString={'\\u2013'} />\n        )}\n      </td>\n      <td>\n        {backfill.isValidSerialization ? (\n          counts && statuses ? (\n            <BackfillRunStatus backfill={backfill} counts={counts} statuses={statuses} />\n          ) : (\n            <LoadingOrNone queryResult={statusQueryResult} noneString={'\\u2013'} />\n          )\n        ) : (\n          <p>A partitions definition has changed since this backfill ran.</p>\n        )}\n      </td>\n      <td>\n        <BackfillMenu\n          backfill={backfill}\n          onResumeBackfill={onResumeBackfill}\n          onTerminateBackfill={onTerminateBackfill}\n          onShowStepStatus={onShowStepStatus}\n          canCancelRuns={canCancelRuns}\n        />\n      </td>\n    </tr>\n  );\n};\n\nconst BackfillMenu = ({\n  backfill,\n  canCancelRuns,\n  onTerminateBackfill,\n  onResumeBackfill,\n  onShowStepStatus,\n}: {\n  backfill: BackfillTableFragment;\n  canCancelRuns: boolean;\n  onTerminateBackfill: (backfill: BackfillTableFragment) => void;\n  onResumeBackfill: (backfill: BackfillTableFragment) => void;\n  onShowStepStatus: (backfill: BackfillTableFragment) => void;\n}) => {\n  const history = useHistory();\n  const {hasResumePermission} = backfill;\n\n  const runsUrl = runsPathWithFilters([\n    {\n      token: 'tag',\n      value: `dagster/backfill=${backfill.id}`,\n    },\n  ]);\n\n  return (\n    <Popover\n      content={\n        <Menu>\n          {backfill.hasCancelPermission ? (\n            <>\n              {(backfill.isAssetBackfill && backfill.status === BulkActionStatus.REQUESTED) ||\n              backfill.numCancelable > 0 ? (\n                <MenuItem\n                  text=\"Cancel backfill submission\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n              {canCancelRuns ? (\n                <MenuItem\n                  text=\"Terminate unfinished runs\"\n                  icon=\"cancel\"\n                  intent=\"danger\"\n                  onClick={() => onTerminateBackfill(backfill)}\n                />\n              ) : null}\n            </>\n          ) : null}\n          {hasResumePermission &&\n          backfill.status === BulkActionStatus.FAILED &&\n          backfill.partitionSet ? (\n            <MenuItem\n              text=\"Resume failed backfill\"\n              title=\"Submits runs for all partitions in the backfill that do not have a corresponding run. Does not retry failed runs.\"\n              icon=\"refresh\"\n              onClick={() => onResumeBackfill(backfill)}\n            />\n          ) : null}\n          <MenuItem\n            text=\"View backfill runs\"\n            icon=\"settings_backup_restore\"\n            onClick={() => history.push(runsUrl)}\n          />\n          <MenuItem\n            text=\"View step status\"\n            icon=\"view_list\"\n            onClick={() => {\n              onShowStepStatus(backfill);\n            }}\n          />\n        </Menu>\n      }\n      position=\"bottom-right\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\nconst BACKFILL_PARTITIONS_COUNTS_THRESHOLD = 1000;\n\nconst BackfillRunStatus = ({\n  backfill,\n  statuses,\n  counts,\n}: {\n  backfill: BackfillTableFragment;\n  statuses: PartitionStatusesForBackfillFragment['results'] | null;\n  counts: {[status: string]: number};\n}) => {\n  const history = useHistory();\n  const partitionCounts = Object.entries(counts).reduce((partitionCounts, [runStatus, count]) => {\n    partitionCounts[runStatus] = (partitionCounts[runStatus] || 0) + count;\n    return partitionCounts;\n  }, {} as {[status: string]: number});\n\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        statuses?.filter((s) => s.partitionName === key)[0]?.runStatus || RunStatus.NOT_STARTED,\n    }),\n    [statuses],\n  );\n\n  return statuses && backfill.partitionNames ? (\n    <PartitionStatus\n      partitionNames={backfill.partitionNames}\n      health={health}\n      splitPartitions\n      onClick={(partitionName) => {\n        const entry = statuses.find((r) => r.partitionName === partitionName);\n        if (entry?.runId) {\n          history.push(`/runs/${entry.runId}`);\n        }\n      }}\n    />\n  ) : (\n    <RunStatusTagsWithCounts\n      succeededCount={partitionCounts[RunStatus.SUCCESS] || 0}\n      inProgressCount={partitionCounts[RunStatus.STARTED] || 0}\n      failedCount={partitionCounts[RunStatus.FAILURE] || 0}\n    />\n  );\n};\n\nconst BackfillTarget: React.FC<{\n  backfill: BackfillTableFragment;\n}> = ({backfill}) => {\n  const {assetSelection, partitionSet, partitionSetName} = backfill;\n\n  const repoAddress = partitionSet\n    ? buildRepoAddress(\n        partitionSet.repositoryOrigin.repositoryName,\n        partitionSet.repositoryOrigin.repositoryLocationName,\n      )\n    : null;\n\n  const repo = useRepository(repoAddress);\n  const isHiddenAssetPartitionSet = isHiddenAssetGroupJob(partitionSetName || '');\n\n  const buildHeader = () => {\n    if (isHiddenAssetPartitionSet) {\n      return null;\n    }\n    if (partitionSet && repo) {\n      return (\n        <Link\n          style={{fontWeight: 500}}\n          to={workspacePipelinePath({\n            repoName: partitionSet.repositoryOrigin.repositoryName,\n            repoLocation: partitionSet.repositoryOrigin.repositoryLocationName,\n            pipelineName: partitionSet.pipelineName,\n            isJob: isThisThingAJob(repo, partitionSet.pipelineName),\n            path: `/partitions?partitionSet=${encodeURIComponent(partitionSet.name)}`,\n          })}\n        >\n          {partitionSet.name}\n        </Link>\n      );\n    }\n    if (partitionSetName) {\n      return <span style={{fontWeight: 500}}>{partitionSetName}</span>;\n    }\n    return null;\n  };\n\n  const buildRepoLink = () =>\n    repoAddress ? (\n      <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} style={{fontSize: '12px'}}>\n        <Icon name=\"repo\" color={Colors.Gray400} />\n        <Link to={workspacePathFromAddress(repoAddress)}>\n          {repoAddressAsHumanString(repoAddress)}\n        </Link>\n      </Box>\n    ) : undefined;\n\n  const buildPipelineOrAssets = () => {\n    if (assetSelection?.length) {\n      return <AssetKeyTagCollection assetKeys={assetSelection} modalTitle=\"Assets in backfill\" />;\n    }\n    if (partitionSet && repo) {\n      return (\n        <PipelineReference\n          showIcon\n          size=\"small\"\n          pipelineName={partitionSet.pipelineName}\n          pipelineHrefContext={{\n            name: partitionSet.repositoryOrigin.repositoryName,\n            location: partitionSet.repositoryOrigin.repositoryLocationName,\n          }}\n          isJob={isThisThingAJob(repo, partitionSet.pipelineName)}\n        />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      {buildHeader()}\n      <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n        {buildRepoLink()}\n        {buildPipelineOrAssets()}\n      </Box>\n    </Box>\n  );\n};\n\nconst BackfillRequestedRange = ({\n  allPartitions,\n  backfill,\n  onExpand,\n}: {\n  backfill: BackfillTableFragment;\n  allPartitions?: string[];\n  onExpand: () => void;\n}) => {\n  const {partitionNames, numPartitions} = backfill;\n\n  if (numPartitions === null) {\n    return <span />;\n  }\n\n  const numPartitionsLabel = `${numPartitions.toLocaleString()} ${\n    numPartitions === 1 ? 'partition' : 'partitions'\n  }`;\n  return (\n    <Box flex={{direction: 'column', gap: 8}}>\n      <div>\n        {partitionNames ? (\n          <TagButton onClick={onExpand}>\n            <Tag intent=\"primary\" interactive>\n              {numPartitionsLabel}\n            </Tag>\n          </TagButton>\n        ) : (\n          <Tag intent=\"primary\">{numPartitionsLabel}</Tag>\n        )}\n      </div>\n      {allPartitions && partitionNames && (\n        <RequestedPartitionStatusBar all={allPartitions} requested={partitionNames} />\n      )}\n    </Box>\n  );\n};\n\nconst RequestedPartitionStatusBar = ({all, requested}: {all: string[]; requested: string[]}) => {\n  const health: PartitionStatusHealthSourceOps = React.useMemo(\n    () => ({\n      runStatusForPartitionKey: (key: string) =>\n        requested && requested.includes(key) ? RunStatus.QUEUED : RunStatus.NOT_STARTED,\n    }),\n    [requested],\n  );\n  return <PartitionStatus small hideStatusTooltip partitionNames={all} health={health} />;\n};\n\nexport const BackfillStatusTag = ({\n  backfill,\n  counts,\n}: {\n  backfill: Pick<BackfillTableFragment, 'status' | 'error' | 'partitionNames'>;\n  counts: {[status: string]: number} | null;\n}) => {\n  switch (backfill.status) {\n    case BulkActionStatus.REQUESTED:\n      return <Tag>In Progress</Tag>;\n    case BulkActionStatus.CANCELED:\n    case BulkActionStatus.FAILED:\n      return (\n        <Box margin={{bottom: 12}}>\n          <TagButton\n            onClick={() =>\n              backfill.error &&\n              showCustomAlert({title: 'Error', body: <PythonErrorInfo error={backfill.error} />})\n            }\n          >\n            <Tag intent=\"danger\">{backfill.status === 'FAILED' ? 'Failed' : 'Canceled'}</Tag>\n          </TagButton>\n        </Box>\n      );\n    case BulkActionStatus.COMPLETED:\n      if (backfill.partitionNames === null) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (!counts) {\n        return <div style={{color: Colors.Gray500}}>None</div>;\n      }\n      if (counts[RunStatus.SUCCESS] === backfill.partitionNames.length) {\n        return <Tag intent=\"success\">Completed</Tag>;\n      }\n      if (Array.from(inProgressStatuses).some((status) => counts[status])) {\n        return <Tag intent=\"primary\">In progress</Tag>;\n      }\n      return <Tag intent=\"warning\">Incomplete</Tag>;\n    case BulkActionStatus.CANCELING:\n      return <Tag>Canceling</Tag>;\n  }\n};\n\nconst TagButton = styled.button`\n  border: none;\n  background: none;\n  cursor: pointer;\n  padding: 0;\n  margin: 0;\n\n  :focus {\n    outline: none;\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_COUNTS_QUERY = gql`\n  query SingleBackfillCountsQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatusCounts {\n          runStatus\n          count\n        }\n      }\n    }\n  }\n`;\n\nexport const SINGLE_BACKFILL_STATUS_DETAILS_QUERY = gql`\n  query SingleBackfillQuery($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ... on PartitionBackfill {\n        id\n        partitionStatuses {\n          ...PartitionStatusesForBackfill\n        }\n      }\n    }\n  }\n\n  fragment PartitionStatusesForBackfill on PartitionStatuses {\n    results {\n      id\n      partitionName\n      runId\n      runStatus\n    }\n  }\n`;\n","import {Button, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PartitionPerOpStatus} from '../partitions/PartitionStepStatus';\nimport {usePartitionStepQuery} from '../partitions/usePartitionStepQuery';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {\n  BackfillTableFragment,\n  PartitionSetForBackfillTableFragment,\n} from './types/BackfillTable.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n}\n\nexport const BackfillStepStatusDialog = ({backfill, onClose}: Props) => {\n  const content = () => {\n    if (!backfill?.partitionSet || backfill.partitionNames === null) {\n      return null;\n    }\n\n    const repoAddress = buildRepoAddress(\n      backfill.partitionSet.repositoryOrigin.repositoryName,\n      backfill.partitionSet.repositoryOrigin.repositoryLocationName,\n    );\n\n    return (\n      <BackfillStepStatusDialogContent\n        backfill={backfill}\n        partitionSet={backfill.partitionSet}\n        partitionNames={backfill.partitionNames}\n        repoAddress={repoAddress}\n        onClose={onClose}\n      />\n    );\n  };\n\n  return (\n    <Dialog\n      isOpen={!!backfill?.partitionSet}\n      title={`Step status for backfill: ${backfill?.id}`}\n      onClose={onClose}\n      style={{width: '80vw'}}\n    >\n      {content()}\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Done</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface ContentProps {\n  backfill: BackfillTableFragment;\n  partitionSet: PartitionSetForBackfillTableFragment;\n  partitionNames: string[];\n  repoAddress: RepoAddress;\n  onClose: () => void;\n}\n\nconst BackfillStepStatusDialogContent = ({\n  backfill,\n  partitionSet,\n  partitionNames,\n  repoAddress,\n}: ContentProps) => {\n  const [pageSize, setPageSize] = React.useState(60);\n  const [offset, setOffset] = React.useState<number>(0);\n\n  const runsFilter = React.useMemo(() => {\n    const token: RunFilterToken = {token: 'tag', value: `dagster/backfill=${backfill.id}`};\n    return [token];\n  }, [backfill.id]);\n\n  const partitions = usePartitionStepQuery({\n    partitionSetName: partitionSet.name,\n    partitionTagName: DagsterTag.Partition,\n    partitionNames,\n    pageSize,\n    runsFilter,\n    repositorySelector: repoAddressToSelector(repoAddress),\n    jobName: partitionSet.pipelineName,\n    offset,\n    skipQuery: !backfill,\n  });\n\n  return (\n    <PartitionPerOpStatus\n      partitionNames={partitionNames}\n      partitions={partitions}\n      pipelineName={partitionSet?.pipelineName}\n      repoAddress={repoAddress}\n      setPageSize={setPageSize}\n      offset={offset}\n      setOffset={setOffset}\n    />\n  );\n};\n","import {gql, useMutation, useQuery} from '@apollo/client';\nimport {Button, DialogBody, DialogFooter, Dialog} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {BulkActionStatus} from '../graphql/types';\nimport {cancelableStatuses} from '../runs/RunStatuses';\nimport {TerminationDialog} from '../runs/TerminationDialog';\n\nimport {SINGLE_BACKFILL_STATUS_DETAILS_QUERY} from './BackfillRow';\nimport {SingleBackfillQuery, SingleBackfillQueryVariables} from './types/BackfillRow.types';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {\n  CancelBackfillMutation,\n  CancelBackfillMutationVariables,\n} from './types/BackfillTerminationDialog.types';\n\ninterface Props {\n  backfill?: BackfillTableFragment;\n  onClose: () => void;\n  onComplete: () => void;\n}\nexport const BackfillTerminationDialog = ({backfill, onClose, onComplete}: Props) => {\n  const [cancelBackfill] = useMutation<CancelBackfillMutation, CancelBackfillMutationVariables>(\n    CANCEL_BACKFILL_MUTATION,\n  );\n  const {data} = useQuery<SingleBackfillQuery, SingleBackfillQueryVariables>(\n    SINGLE_BACKFILL_STATUS_DETAILS_QUERY,\n    {\n      variables: {\n        backfillId: backfill?.id || '',\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !backfill,\n    },\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const unfinishedMap = React.useMemo(() => {\n    if (!backfill || !data || data.partitionBackfillOrError.__typename !== 'PartitionBackfill') {\n      return {};\n    }\n    const unfinishedPartitions = data.partitionBackfillOrError.partitionStatuses?.results.filter(\n      (partition) =>\n        partition.runStatus && partition.runId && cancelableStatuses.has(partition.runStatus),\n    );\n    return (\n      unfinishedPartitions?.reduce(\n        (accum, partition) =>\n          partition && partition.runId ? {...accum, [partition.runId]: true} : accum,\n        {},\n      ) || {}\n    );\n  }, [backfill, data]);\n  if (!backfill || !data) {\n    return null;\n  }\n\n  const numUnscheduled = backfill.numCancelable;\n  const cancel = async () => {\n    setIsSubmitting(true);\n    await cancelBackfill({variables: {backfillId: backfill.id}});\n    onComplete();\n    setIsSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <>\n      <Dialog\n        isOpen={\n          !!backfill &&\n          backfill.status !== BulkActionStatus.CANCELED &&\n          (backfill.isAssetBackfill || !!numUnscheduled)\n        }\n        title=\"Cancel backfill\"\n        onClose={onClose}\n      >\n        {backfill.isAssetBackfill ? (\n          <DialogBody>\n            Confirm cancellation of asset backfill? This will mark unfinished runs as canceled.\n          </DialogBody>\n        ) : (\n          <DialogBody>\n            There {numUnscheduled === 1 ? 'is 1 partition ' : `are ${numUnscheduled} partitions `}\n            yet to be queued or launched.\n          </DialogBody>\n        )}\n        <DialogFooter>\n          <Button intent=\"none\" onClick={onClose}>\n            Close\n          </Button>\n          {isSubmitting ? (\n            <Button intent=\"danger\" disabled>\n              Canceling...\n            </Button>\n          ) : (\n            <Button intent=\"danger\" onClick={cancel}>\n              Cancel backfill\n            </Button>\n          )}\n        </DialogFooter>\n      </Dialog>\n      {unfinishedMap && (\n        <TerminationDialog\n          isOpen={\n            !!backfill &&\n            (!numUnscheduled || backfill.status !== 'REQUESTED') &&\n            !!Object.keys(unfinishedMap).length\n          }\n          onClose={onClose}\n          onComplete={onComplete}\n          selectedRuns={unfinishedMap}\n        />\n      )}\n    </>\n  );\n};\n\nconst CANCEL_BACKFILL_MUTATION = gql`\n  mutation CancelBackfill($backfillId: String!) {\n    cancelPartitionBackfill(backfillId: $backfillId) {\n      ... on CancelBackfillSuccess {\n        backfillId\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {Group, Table} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\n\nimport {BackfillPartitionsRequestedDialog} from './BackfillPartitionsRequestedDialog';\nimport {BackfillRow} from './BackfillRow';\nimport {BackfillStepStatusDialog} from './BackfillStepStatusDialog';\nimport {BackfillTerminationDialog} from './BackfillTerminationDialog';\nimport {RESUME_BACKFILL_MUTATION} from './BackfillUtils';\nimport {BackfillTableFragment} from './types/BackfillTable.types';\nimport {ResumeBackfillMutation, ResumeBackfillMutationVariables} from './types/BackfillUtils.types';\n\nexport const BackfillTable = ({\n  showBackfillTarget = true,\n  allPartitions,\n  backfills,\n  refetch,\n}: {\n  allPartitions?: string[];\n  backfills: BackfillTableFragment[];\n  refetch: () => void;\n  showBackfillTarget?: boolean;\n}) => {\n  const [terminationBackfill, setTerminationBackfill] = React.useState<BackfillTableFragment>();\n  const [stepStatusBackfill, setStepStatusBackfill] = React.useState<BackfillTableFragment>();\n  const [\n    partitionsRequestedBackfill,\n    setPartitionsRequestedBackfill,\n  ] = React.useState<BackfillTableFragment>();\n  const [resumeBackfill] = useMutation<ResumeBackfillMutation, ResumeBackfillMutationVariables>(\n    RESUME_BACKFILL_MUTATION,\n  );\n\n  const candidateId = terminationBackfill?.id;\n\n  React.useEffect(() => {\n    if (candidateId) {\n      const [backfill] = backfills.filter(\n        (backfill) => backfill.id === candidateId && backfill.hasCancelPermission,\n      );\n      setTerminationBackfill(backfill);\n    }\n  }, [backfills, candidateId]);\n\n  const resume = async (backfill: BackfillTableFragment) => {\n    const {data} = await resumeBackfill({variables: {backfillId: backfill.id}});\n    if (data && data.resumePartitionBackfill.__typename === 'ResumeBackfillSuccess') {\n      refetch();\n    } else if (data && data.resumePartitionBackfill.__typename === 'UnauthorizedError') {\n      await showSharedToaster({\n        message: (\n          <Group direction=\"column\" spacing={4}>\n            <div>\n              Attempted to retry the backfill in read-only mode. This backfill was not retried.\n            </div>\n          </Group>\n        ),\n        icon: 'error',\n        intent: 'danger',\n      });\n    } else if (data && data.resumePartitionBackfill.__typename === 'PythonError') {\n      const error = data.resumePartitionBackfill;\n      await showSharedToaster({\n        message: <div>An unexpected error occurred. This backfill was not retried.</div>,\n        icon: 'error',\n        intent: 'danger',\n        action: {\n          text: 'View error',\n          onClick: () =>\n            showCustomAlert({\n              body: <PythonErrorInfo error={error} />,\n            }),\n        },\n      });\n    }\n  };\n\n  return (\n    <>\n      <Table>\n        <thead>\n          <tr>\n            <th>Backfill ID</th>\n            <th>Created</th>\n            {showBackfillTarget ? <th>Backfill target</th> : null}\n            <th>Requested</th>\n            <th>Backfill status</th>\n            <th>Run status</th>\n            <th style={{width: 80}} />\n          </tr>\n        </thead>\n        <tbody>\n          {backfills.map((backfill) => (\n            <BackfillRow\n              key={backfill.id}\n              showBackfillTarget={showBackfillTarget}\n              backfill={backfill}\n              allPartitions={allPartitions}\n              onTerminateBackfill={setTerminationBackfill}\n              onResumeBackfill={resume}\n              onShowStepStatus={setStepStatusBackfill}\n              onShowPartitionsRequested={setPartitionsRequestedBackfill}\n            />\n          ))}\n        </tbody>\n      </Table>\n      <BackfillStepStatusDialog\n        backfill={stepStatusBackfill}\n        onClose={() => setStepStatusBackfill(undefined)}\n      />\n      <BackfillPartitionsRequestedDialog\n        backfill={partitionsRequestedBackfill}\n        onClose={() => setPartitionsRequestedBackfill(undefined)}\n      />\n      <BackfillTerminationDialog\n        backfill={terminationBackfill}\n        onClose={() => setTerminationBackfill(undefined)}\n        onComplete={() => refetch()}\n      />\n    </>\n  );\n};\n\nexport const BACKFILL_TABLE_FRAGMENT = gql`\n  fragment BackfillTableFragment on PartitionBackfill {\n    id\n    status\n    isAssetBackfill\n    hasCancelPermission\n    hasResumePermission\n    numCancelable\n    partitionNames\n    isValidSerialization\n    numPartitions\n    timestamp\n    partitionSetName\n    partitionSet {\n      id\n      ...PartitionSetForBackfillTable\n    }\n    assetSelection {\n      path\n    }\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment PartitionSetForBackfillTable on PartitionSet {\n    id\n    name\n    mode\n    pipelineName\n    repositoryOrigin {\n      id\n      repositoryName\n      repositoryLocationName\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary: React.FC<Props> = React.memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}) => {\n    const {status} = run;\n\n    const intent = React.useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, Caption} from '@dagster-io/ui';\nimport qs from 'qs';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const {data} = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = React.useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.Gray500}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.Gray500}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Tag,\n  Body,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {InstigationType, InstigationTickStatus} from '../graphql/types';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\n\nimport {\n  LaunchedRunListQuery,\n  LaunchedRunListQueryVariables,\n  TickTagFragment,\n} from './types/InstigationTick.types';\n\nexport const TickTag: React.FC<{\n  tick: TickTagFragment;\n  instigationType?: InstigationType;\n}> = ({tick, instigationType}) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  switch (tick.status) {\n    case InstigationTickStatus.STARTED:\n      return <Tag>Started</Tag>;\n    case InstigationTickStatus.SUCCESS:\n      if (!tick.runIds.length) {\n        return <Tag intent=\"primary\">Requested</Tag>;\n      }\n      const tag = (\n        <>\n          <Tag intent=\"primary\" interactive>\n            <ButtonLink underline=\"never\" onClick={() => setOpen(true)}>\n              {tick.runIds.length} Requested\n            </ButtonLink>\n          </Tag>\n          <Dialog\n            isOpen={open}\n            onClose={() => setOpen(false)}\n            style={{width: '90vw'}}\n            title=\"Launched runs\"\n          >\n            <RunList runIds={tick.runIds} />\n            <DialogFooter>\n              <Button intent=\"primary\" onClick={() => setOpen(false)}>\n                OK\n              </Button>\n            </DialogFooter>\n          </Dialog>\n        </>\n      );\n      if (tick.runKeys.length > tick.runIds.length) {\n        const message = `${tick.runKeys.length} runs requested, but ${\n          tick.runKeys.length - tick.runIds.length\n        } skipped because the runs already exist for those requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            {tag}\n          </Tooltip>\n        );\n      }\n      return tag;\n\n    case InstigationTickStatus.SKIPPED:\n      if (tick.runKeys.length) {\n        const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n        return (\n          <Tooltip position=\"right\" content={message}>\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      if (tick.skipReason) {\n        return (\n          <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n            <Tag intent=\"warning\">Skipped</Tag>\n          </Tooltip>\n        );\n      }\n      return <Tag intent=\"warning\">Skipped</Tag>;\n    case InstigationTickStatus.FAILURE:\n      if (!tick.error) {\n        return <Tag intent=\"danger\">Failure</Tag>;\n      } else {\n        const error = tick.error;\n        const showError = () =>\n          showCustomAlert({\n            title: instigationType\n              ? instigationType === InstigationType.SCHEDULE\n                ? 'Schedule Response'\n                : 'Sensor Response'\n              : 'Python Error',\n            body: <PythonErrorInfo error={error} />,\n          });\n        return (\n          <>\n            <LinkButton onClick={showError}>\n              <Tag minimal={true} intent=\"danger\">\n                Failure\n              </Tag>\n            </LinkButton>\n            <ButtonLink onClick={showError} style={{marginLeft: 4, fontSize: 12}}>\n              View\n            </ButtonLink>\n          </>\n        );\n      }\n    default:\n      return assertUnreachable(tick.status);\n  }\n};\n\nexport const RunList: React.FC<{runIds: string[]}> = ({runIds}) => {\n  const {data, loading} = useQuery<LaunchedRunListQuery, LaunchedRunListQueryVariables>(\n    LAUNCHED_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          runIds,\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return (\n      <Box padding={32}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <Box padding={32}>\n        <NonIdealState\n          icon=\"error\"\n          title=\"An error occurred\"\n          description={data.pipelineRunsOrError.message}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </Box>\n  );\n};\n\nexport const FailedRunList: React.FC<{\n  originRunIds?: string[];\n}> = ({originRunIds}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.Gray200}}>\n        <Body>\n          Failed Runs\n          <Tooltip content=\"Failed runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.Gray500} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\nconst LinkButton = styled.button`\n  background: inherit;\n  border: none;\n  cursor: pointer;\n  font-size: inherit;\n  text-decoration: none;\n  padding: 0;\n`;\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst LAUNCHED_RUN_LIST_QUERY = gql`\n  query LaunchedRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql} from '@apollo/client';\nimport {Colors, Group, Mono} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\n\nexport const InstigatedRunStatus: React.FC<{\n  instigationState: InstigationStateFragment;\n}> = ({instigationState}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.Gray300}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink: React.FC<{run: RunStatusFragment}> = ({run}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.Gray500};\n  }\n`;\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import React from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => React.useReducer(reducer, initialState);\n","import {gql} from '@apollo/client';\n\nexport const BASIC_INSTIGATION_STATE_FRAGMENT = gql`\n  fragment BasicInstigationStateFragment on InstigationState {\n    id\n    selectorId\n    status\n    hasStartPermission\n    hasStopPermission\n  }\n`;\n","export const OVERVIEW_COLLAPSED_KEY = 'overview-collapsed-state';\n","import {gql, useQuery} from '@apollo/client';\nimport {NonIdealState, Spinner} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunTable, RUN_TABLE_RUN_FRAGMENT} from '../runs/RunTable';\nimport {DagsterTag} from '../runs/RunTag';\n\nimport {\n  PartitionRunListQuery,\n  PartitionRunListQueryVariables,\n} from './types/PartitionRunList.types';\n\ninterface PartitionRunListProps {\n  pipelineName: string;\n  partitionName: string;\n}\n\nexport const PartitionRunList: React.FC<PartitionRunListProps> = (props) => {\n  const {data, loading} = useQuery<PartitionRunListQuery, PartitionRunListQueryVariables>(\n    PARTITION_RUN_LIST_QUERY,\n    {\n      variables: {\n        filter: {\n          pipelineName: props.pipelineName,\n          tags: [{key: DagsterTag.Partition, value: props.partitionName}],\n        },\n      },\n    },\n  );\n\n  if (loading || !data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data.pipelineRunsOrError.__typename !== 'Runs') {\n    return (\n      <NonIdealState\n        icon=\"error\"\n        title=\"Query Error\"\n        description={data.pipelineRunsOrError.message}\n      />\n    );\n  }\n  return (\n    <div>\n      <RunTable runs={data.pipelineRunsOrError.results} />\n    </div>\n  );\n};\n\nconst PARTITION_RUN_LIST_QUERY = gql`\n  query PartitionRunListQuery($filter: RunsFilter!) {\n    pipelineRunsOrError(filter: $filter, limit: 500) {\n      ... on PipelineRuns {\n        results {\n          ...RunTableRunFragment\n          id\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_TABLE_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Colors,\n  DialogFooter,\n  Dialog,\n  Icon,\n  MenuItem,\n  Menu,\n  Popover,\n  useViewport,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {GraphQueryItem} from '../app/GraphQueryImpl';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetPartitionStatus} from '../assets/AssetPartitionStatus';\nimport {\n  PartitionHealthData,\n  PartitionHealthDimension,\n  partitionStatusAtIndex,\n  Range,\n} from '../assets/usePartitionHealthData';\nimport {GanttChartMode} from '../gantt/Constants';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {RunStatus} from '../graphql/types';\nimport {linkToRunEvent} from '../runs/RunUtils';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\nimport {MenuLink} from '../ui/MenuLink';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {PartitionRunList} from './PartitionRunList';\nimport {\n  BOX_SIZE,\n  GridColumn,\n  GridFloatingContainer,\n  LeftLabel,\n  TopLabel,\n  topLabelHeightForLabels,\n  TopLabelTilted,\n} from './RunMatrixUtils';\nimport {\n  PartitionStepStatusPipelineQuery,\n  PartitionStepStatusPipelineQueryVariables,\n} from './types/PartitionStepStatus.types';\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  MatrixStep,\n  PartitionRuns,\n  useMatrixData,\n  MatrixData,\n  PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT,\n  StatusSquareColor,\n} from './useMatrixData';\n\nconst BUFFER = 3;\n\nexport const getVisibleItemCount = (viewportWidth: number) =>\n  Math.ceil(viewportWidth / BOX_SIZE) - BUFFER;\n\ninterface PartitionRunSelection {\n  partitionName: string;\n  stepName?: string;\n}\n\ninterface PartitionStepStatusBaseProps {\n  offset: number;\n  setOffset: (val: number) => void;\n  setPageSize: (val: number) => void;\n  pipelineName: string;\n  partitionNames: string[];\n\n  runFilters?: RunFilterToken[];\n  setRunFilters?: (val: RunFilterToken[]) => void;\n}\n\nconst timeboundsOfPartitions = (partitionColumns: {steps: {unix: number}[]}[]) => {\n  let [minUnix, maxUnix] = [Date.now() / 1000, 1];\n  for (const partition of partitionColumns) {\n    for (const step of partition.steps) {\n      if (step.unix === 0) {\n        continue;\n      }\n      [minUnix, maxUnix] = [Math.min(minUnix, step.unix), Math.max(maxUnix, step.unix)];\n    }\n  }\n  return [minUnix, maxUnix] as const;\n};\n\nexport const PartitionPerAssetStatus: React.FC<\n  Omit<PartitionStepStatusBaseProps, 'partitionNames'> & {\n    assetHealth: PartitionHealthData[];\n    assetQueryItems: GraphQueryItem[];\n    rangeDimensionIdx: number;\n    rangeDimension: PartitionHealthDimension;\n  }\n> = ({assetHealth, rangeDimension, rangeDimensionIdx, assetQueryItems, ...rest}) => {\n  const rangesByAssetKey: {[assetKey: string]: Range[]} = {};\n  for (const a of assetHealth) {\n    if (a.dimensions[rangeDimensionIdx]?.name !== rangeDimension.name) {\n      // Ignore assets in the job / graph that do not have the range partition dimension.\n      continue;\n    }\n    const ranges = a.rangesForSingleDimension(rangeDimensionIdx);\n    rangesByAssetKey[tokenForAssetKey(a.assetKey)] = ranges;\n  }\n\n  const layout = buildLayout({nodes: assetQueryItems, mode: GanttChartMode.FLAT});\n  const layoutBoxesWithRangeDimension = layout.boxes.filter((b) => !!rangesByAssetKey[b.node.name]);\n\n  const data: MatrixData = {\n    stepRows: layoutBoxesWithRangeDimension.map((box) => ({\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: 0,\n      finalFailurePercent: 0,\n    })),\n    partitions: [],\n    partitionColumns: rangeDimension.partitionKeys.map((partitionKey, partitionKeyIdx) => ({\n      idx: partitionKeyIdx,\n      name: partitionKey,\n      runsLoaded: true,\n      runs: [],\n      steps: layoutBoxesWithRangeDimension.map((box) => ({\n        name: box.node.name,\n        unix: 0,\n        color: assetPartitionStatusToSquareColor(\n          partitionStatusAtIndex(rangesByAssetKey[box.node.name]!, partitionKeyIdx),\n        ),\n      })),\n    })),\n  };\n\n  return (\n    <PartitionStepStatus\n      {...rest}\n      partitionNames={rangeDimension.partitionKeys}\n      data={data}\n      showLatestRun={false}\n    />\n  );\n};\n\nconst assetPartitionStatusToSquareColor = (state: AssetPartitionStatus[]): StatusSquareColor => {\n  return state.includes(AssetPartitionStatus.MATERIALIZED) &&\n    state.includes(AssetPartitionStatus.MISSING)\n    ? 'SUCCESS-MISSING'\n    : state.includes(AssetPartitionStatus.MATERIALIZED)\n    ? 'SUCCESS'\n    : state.includes(AssetPartitionStatus.FAILED) && state.includes(AssetPartitionStatus.MISSING)\n    ? 'FAILURE-MISSING'\n    : state.includes(AssetPartitionStatus.FAILED)\n    ? 'FAILURE'\n    : 'MISSING';\n};\n\nexport const PartitionPerOpStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    repoAddress: RepoAddress;\n    partitions: PartitionRuns[];\n  }\n> = ({repoAddress, pipelineName, partitions, partitionNames, ...rest}) => {\n  // Retrieve the pipeline's structure\n  const repositorySelector = repoAddressToSelector(repoAddress);\n  const pipelineSelector = {...repositorySelector, pipelineName};\n  const pipeline = useQuery<\n    PartitionStepStatusPipelineQuery,\n    PartitionStepStatusPipelineQueryVariables\n  >(PARTITION_STEP_STATUS_PIPELINE_QUERY, {\n    variables: {pipelineSelector},\n  });\n\n  const solidHandles =\n    pipeline.data?.pipelineSnapshotOrError.__typename === 'PipelineSnapshot' &&\n    pipeline.data.pipelineSnapshotOrError.solidHandles;\n\n  const data = useMatrixData({\n    partitionNames,\n    partitions,\n    stepQuery: '',\n    solidHandles,\n  });\n\n  if (!data) {\n    return <span />;\n  }\n  return (\n    <PartitionStepStatus\n      {...rest}\n      showLatestRun={true}\n      pipelineName={pipelineName}\n      partitionNames={partitionNames}\n      data={data}\n    />\n  );\n};\n\nconst PartitionStepStatus: React.FC<\n  PartitionStepStatusBaseProps & {\n    data: MatrixData;\n    showLatestRun: boolean;\n  }\n> = (props) => {\n  const {viewport, containerProps} = useViewport();\n  const [hovered, setHovered] = React.useState<PartitionRunSelection | null>(null);\n  const [focused, setFocused] = React.useState<PartitionRunSelection | null>(null);\n  const {setPageSize, data} = props;\n\n  React.useEffect(() => {\n    if (viewport.width) {\n      setPageSize(getVisibleItemCount(viewport.width));\n    }\n  }, [viewport.width, setPageSize]);\n\n  const {stepRows, partitionColumns} = data;\n\n  const sortPartitionSteps = (steps: MatrixStep[]) => {\n    const stepsByName = {};\n    steps.forEach((step) => ((stepsByName as any)[step.name] = step));\n    return stepRows.map((stepRow) => (stepsByName as any)[stepRow.name]);\n  };\n\n  const visibleCount = getVisibleItemCount(viewport.width);\n  const visibleStart = Math.max(0, partitionColumns.length - props.offset - visibleCount);\n  const visibleEnd = Math.max(visibleCount, partitionColumns.length - props.offset);\n  const visibleColumns = partitionColumns.slice(visibleStart, visibleEnd);\n  const [minUnix, maxUnix] = timeboundsOfPartitions(partitionColumns);\n  const topLabelHeight = topLabelHeightForLabels(partitionColumns.map((p) => p.name));\n\n  return (\n    <PartitionRunMatrixContainer>\n      <Dialog\n        isOpen={!!focused}\n        onClose={() => setFocused(null)}\n        style={{width: '90vw'}}\n        title={focused ? `${focused.partitionName} runs` : ''}\n      >\n        <Box padding={{bottom: 12}}>\n          {focused && (\n            <PartitionRunList\n              pipelineName={props.pipelineName}\n              partitionName={focused.partitionName}\n            />\n          )}\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" autoFocus={true} onClick={() => setFocused(null)}>\n            OK\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <div\n        style={{\n          position: 'relative',\n          display: 'flex',\n        }}\n      >\n        <GridFloatingContainer floating={props.offset + visibleCount < props.partitionNames.length}>\n          <GridColumn disabled style={{flex: 1, flexShrink: 1, overflow: 'hidden'}}>\n            <TopLabel style={{height: topLabelHeight}} />\n            {props.showLatestRun && <LeftLabel style={{paddingLeft: 24}}>Last Run</LeftLabel>}\n            <Divider />\n            {stepRows.map((step) => (\n              <LeftLabel\n                style={{paddingLeft: 8 + step.x}}\n                key={step.name}\n                data-tooltip={step.name}\n                hovered={step.name === hovered?.stepName}\n              >\n                {step.name}\n              </LeftLabel>\n            ))}\n          </GridColumn>\n        </GridFloatingContainer>\n\n        {props.offset + visibleCount < props.partitionNames.length ? (\n          <PagerControl\n            $direction=\"left\"\n            onClick={() =>\n              props.setOffset(\n                Math.max(\n                  0,\n                  Math.min(\n                    props.offset + visibleCount - 1,\n                    props.partitionNames.length - visibleCount,\n                  ),\n                ),\n              )\n            }\n          >\n            <Icon name=\"chevron_left\" />\n          </PagerControl>\n        ) : null}\n        <div style={{flex: 1, overflow: 'hidden', position: 'relative'}} {...containerProps}>\n          <div\n            style={{\n              width: partitionColumns.length * BOX_SIZE,\n              position: 'absolute',\n              height: '100%',\n              right: 0,\n              zIndex: 1,\n            }}\n          >\n            {visibleColumns.map((p, idx) => (\n              <GridColumn\n                key={p.name}\n                style={{\n                  zIndex: visibleColumns.length - idx,\n                  width: BOX_SIZE,\n                  position: 'absolute',\n                  right: (visibleCount - idx) * BOX_SIZE + 20,\n                }}\n              >\n                <TopLabelTilted $height={topLabelHeight} label={p.name} />\n                {props.showLatestRun && (\n                  <LeftLabel style={{textAlign: 'center'}}>\n                    <PartitionSquare\n                      key={`${p.name}:__full_status`}\n                      runs={p.runs}\n                      runsLoaded={p.runsLoaded}\n                      minUnix={minUnix}\n                      maxUnix={maxUnix}\n                      hovered={hovered}\n                      setHovered={setHovered}\n                      setFocused={setFocused}\n                      partitionName={p.name}\n                    />\n                  </LeftLabel>\n                )}\n                <Divider />\n                {sortPartitionSteps(p.steps).map((s) => (\n                  <PartitionSquare\n                    key={s.name}\n                    step={s}\n                    runs={p.runs}\n                    runsLoaded={p.runsLoaded}\n                    minUnix={minUnix}\n                    maxUnix={maxUnix}\n                    hovered={hovered}\n                    setHovered={setHovered}\n                    setFocused={setFocused}\n                    partitionName={p.name}\n                  />\n                ))}\n              </GridColumn>\n            ))}\n          </div>\n        </div>\n        {props.offset > 0 ? (\n          <PagerControl\n            $direction=\"right\"\n            onClick={() => props.setOffset(Math.max(0, props.offset - visibleCount))}\n          >\n            <Icon name=\"chevron_right\" />\n          </PagerControl>\n        ) : null}\n      </div>\n    </PartitionRunMatrixContainer>\n  );\n};\n\nconst PagerControl = styled.div<{$direction: 'left' | 'right'}>`\n  width: 30px;\n  position: absolute;\n  border: 1px solid ${Colors.KeylineGray};\n  border-radius: 3px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: calc(50% - 15px);\n  bottom: calc(50% - 15px);\n  ${({$direction}) => ($direction === 'left' ? 'left: 315px;' : 'right: 0;')}\n  background: white;\n  z-index: 10;\n\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  &:hover {\n    background: #ececec;\n  }\n`;\n\nconst PartitionRunMatrixContainer = styled.div`\n  display: block;\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  width: 100%;\n  margin-top: 5px;\n  border-top: 1px solid ${Colors.KeylineGray};\n`;\n\n// add in the explorer fragment, so we can reconstruct the faux-plan steps from the exploded plan\n// in the same way we construct the explorer graph\nconst PARTITION_STEP_STATUS_PIPELINE_QUERY = gql`\n  query PartitionStepStatusPipelineQuery($pipelineSelector: PipelineSelector) {\n    pipelineSnapshotOrError(activePipelineSelector: $pipelineSelector) {\n      ... on PipelineSnapshot {\n        id\n        name\n        solidHandles {\n          ...PartitionMatrixSolidHandleFragment\n        }\n      }\n    }\n  }\n\n  ${PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT}\n`;\n\nconst TOOLTIP_STYLE = JSON.stringify({\n  top: 20,\n  left: 10,\n});\n\nconst PartitionSquare: React.FC<{\n  step?: MatrixStep;\n  runs: PartitionMatrixStepRunFragment[];\n  runsLoaded: boolean;\n  hovered: PartitionRunSelection | null;\n  minUnix: number;\n  maxUnix: number;\n  partitionName: string;\n  setHovered: (hovered: PartitionRunSelection | null) => void;\n  setFocused: (hovered: PartitionRunSelection | null) => void;\n}> = ({step, runs, runsLoaded, hovered, setHovered, setFocused, partitionName}) => {\n  const [opened, setOpened] = React.useState(false);\n  let squareStatus;\n\n  if (!runsLoaded) {\n    squareStatus = 'loading';\n  } else if (step) {\n    squareStatus = step.color.toLowerCase();\n  } else if (runs.length === 0) {\n    squareStatus = 'empty';\n  } else {\n    const runStatus = runs[runs.length - 1]!.status;\n    squareStatus = runStatus === RunStatus.CANCELED ? 'failure' : runStatus.toLowerCase();\n  }\n\n  const content = (\n    <div\n      className={`square ${squareStatus}`}\n      onMouseEnter={() => setHovered({stepName: step?.name, partitionName})}\n      onMouseLeave={() => setHovered(null)}\n      data-tooltip={\n        runsLoaded && !step ? (runs.length === 1 ? `1 run` : `${runs.length} runs`) : undefined\n      }\n      data-tooltip-style={TOOLTIP_STYLE}\n    />\n  );\n\n  if (\n    !opened &&\n    (!runs.length || hovered?.stepName !== step?.name || hovered?.partitionName !== partitionName)\n  ) {\n    return content;\n  }\n\n  return (\n    <Popover\n      interactionKind=\"click\"\n      placement=\"bottom-start\"\n      onOpening={() => setOpened(true)}\n      onClosed={() => setOpened(false)}\n      content={\n        <Menu>\n          <MenuLink\n            icon=\"open_in_new\"\n            text=\"Show logs from last run\"\n            to={linkToRunEvent(runs[runs.length - 1]!, {stepKey: step ? step.name : null})}\n          />\n          <MenuItem\n            icon=\"settings_backup_restore\"\n            text={`View runs (${runs.length})`}\n            onClick={() => setFocused({stepName: step?.name, partitionName})}\n          />\n        </Menu>\n      }\n    >\n      {content}\n    </Popover>\n  );\n};\n","import {Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nexport const BOX_SIZE = 32;\n\nconst STEP_STATUS_COLORS = {\n  SUCCESS: Colors.Green500,\n  SUCCESS_SKIPPED: Colors.Green200,\n  FAILURE: Colors.Red500,\n  FAILURE_SKIPPED: Colors.Red200,\n  SKIPPED: Colors.Yellow500,\n  IN_PROGRESS: '#eee',\n};\n\n// In CSS, you can layer multiple backgrounds on top of each other by comma-separating values in\n// `background`. However, this only works with gradients, not with primitive color values. To do\n// hovered + red without color math (?), just stack the colors as flat gradients.\nconst flatGradient = (color: string) => `linear-gradient(to left, ${color} 0%, ${color} 100%)`;\nconst flatGradientStack = (colors: string[]) => colors.map(flatGradient).join(',');\n\nexport const GridColumn = styled.div<{\n  disabled?: boolean;\n  hovered?: boolean;\n  focused?: boolean;\n  multiselectFocused?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  line-height: 0;\n\n  ${({disabled, focused, multiselectFocused, hovered}) =>\n    !disabled &&\n    !focused &&\n    !multiselectFocused &&\n    `&${hovered ? '' : ':hover'} {\n      background: ${Colors.Gray100};\n      cursor: default;\n      ${TopLabelTiltedInner} {\n        background: ${Colors.White};\n        .tilted {\n          background: ${Colors.Gray100};\n        }\n      }\n      .square {\n        filter: brightness(95%);\n      }\n    }`}\n\n  ${({disabled}) =>\n    disabled &&\n    `\n      ${TopLabelTiltedInner} {\n        color: ${Colors.Gray400}\n      }\n    `}\n\n  ${({focused}) =>\n    focused &&\n    `background: ${Colors.Blue500};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue500};\n      }\n    }\n  }`}\n\n  ${({multiselectFocused}) =>\n    multiselectFocused &&\n    `background: ${Colors.Blue200};\n    ${LeftLabel} {\n      color: white;\n    }\n    ${TopLabelTiltedInner} {\n      background: ${Colors.White};\n      color: white;\n      .tilted {\n        background: ${Colors.Blue200};\n      }\n    }\n  }`}\n\n  .cell {\n    height: ${BOX_SIZE}px;\n    display: inline-block;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    font-size: 12px;\n    padding: 2px;\n    box-sizing: border-box;\n    line-height: initial;\n  }\n\n  .square {\n    width: 20px;\n    height: 20px;\n    margin: 6px;\n    display: inline-block;\n\n    &:hover:not(.empty):before {\n      box-shadow: ${Colors.Blue500} 0 0 0 3px;\n    }\n    &:before {\n      content: ' ';\n      background: rgba(248, 247, 245, 1);\n      border-radius: 10px;\n      display: inline-block;\n      width: 20px;\n      height: 20px;\n    }\n    &.loading {\n      &:before {\n        background: radial-gradient(white 0%, white 45%, rgba(248, 247, 245, 1) 60%);\n      }\n    }\n    &.success {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS};\n      }\n    }\n    &.failure {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE};\n      }\n    }\n    &.success-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SUCCESS_SKIPPED};\n      }\n    }\n    &.failure-missing {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.failure-blank {\n      &:before {\n        background: ${STEP_STATUS_COLORS.FAILURE_SKIPPED};\n      }\n    }\n    &.skipped {\n      &:before {\n        background: ${STEP_STATUS_COLORS.SKIPPED};\n      }\n    }\n  }\n`;\n\nexport const LeftLabel = styled.div<{hovered?: boolean}>`\n  height: ${BOX_SIZE}px;\n  line-height: ${BOX_SIZE}px;\n  font-size: 13px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  position: relative;\n  background: ${({hovered}) => flatGradientStack([hovered ? Colors.Gray100 : 'transparent'])};\n`;\n\nexport const TopLabel = styled.div`\n  position: relative;\n  height: 70px;\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  align-items: flex-end;\n  display: flex;\n`;\n\nconst TITLE_MARGIN_BOTTOM = 15;\nconst ROTATION_DEGREES = 41;\n\nexport function topLabelHeightForLabels(labels: string[]) {\n  const maxlength = Math.max(...labels.map((p) => p.length));\n  return (maxlength > 10 ? maxlength * 4.9 : 55) + TITLE_MARGIN_BOTTOM;\n}\n\nexport const TopLabelTilted: React.FC<{label: string; $height: number}> = ({label, $height}) => {\n  return (\n    <TopLabelTiltedInner style={{height: $height - TITLE_MARGIN_BOTTOM}}>\n      <div className=\"tilted\">{label}</div>\n    </TopLabelTiltedInner>\n  );\n};\n\nconst TopLabelTiltedInner = styled.div`\n  position: relative;\n  height: unset; /* provide via style tag */\n  padding: 4px;\n  padding-bottom: 0;\n  min-width: 15px;\n  margin-bottom: ${TITLE_MARGIN_BOTTOM}px;\n  align-items: end;\n  display: flex;\n  line-height: normal;\n\n  & > div.tilted {\n    font-size: 12px;\n    white-space: nowrap;\n    position: absolute;\n    bottom: -20px;\n    left: 0;\n    padding: 2px;\n    padding-right: 4px;\n    padding-left: 0;\n    transform: rotate(-${ROTATION_DEGREES}deg);\n    transform-origin: top left;\n  }\n`;\n\nexport const GRID_FLOATING_CONTAINER_WIDTH = 330;\n\nexport const GridFloatingContainer = styled.div<{floating: boolean}>`\n  display: flex;\n  border-right: 1px solid ${Colors.Gray200};\n  padding-bottom: 16px;\n  width: ${GRID_FLOATING_CONTAINER_WIDTH}px;\n  z-index: 1;\n  ${({floating}) => (floating ? 'box-shadow: 1px 0 4px rgba(0, 0, 0, 0.15)' : '')};\n`;\n","import {gql} from '@apollo/client';\nimport {shallowCompareKeys} from '@blueprintjs/core/lib/cjs/common/utils';\nimport React from 'react';\n\nimport {filterByQuery} from '../app/GraphQueryImpl';\nimport {GanttChartLayout} from '../gantt/Constants';\nimport {GanttChartMode} from '../gantt/GanttChart';\nimport {buildLayout} from '../gantt/GanttChartLayout';\nimport {StepEventStatus} from '../graphql/types';\nimport {explodeCompositesInHandleGraph} from '../pipelines/CompositeSupport';\nimport {GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT} from '../pipelines/GraphExplorer';\n\nimport {\n  PartitionMatrixStepRunFragment,\n  PartitionMatrixSolidHandleFragment,\n} from './types/useMatrixData.types';\n\nexport type StatusSquareColor =\n  | 'SUCCESS'\n  | 'FAILURE'\n  | 'MISSING'\n  | 'FAILURE-MISSING'\n  | 'SUCCESS-MISSING';\n\nexport interface PartitionRuns {\n  name: string;\n  runsLoaded: boolean;\n  runs: PartitionMatrixStepRunFragment[];\n}\n\ninterface DisplayOptions {\n  showFailuresAndGapsOnly: boolean;\n  showPrevious: boolean;\n  colorizeByAge: boolean;\n  colorizeSliceUnix: number;\n}\n\nconst DYNAMIC_STEP_REGEX_SUFFIX = '\\\\[.*\\\\]';\n\nexport interface MatrixStep {\n  name: string;\n  color: string;\n  unix: number;\n}\n\nconst MISSING_STEP_STATUSES = new Set([StepEventStatus.IN_PROGRESS, StepEventStatus.SKIPPED]);\n\nfunction getStartTime(a: PartitionMatrixStepRunFragment) {\n  return a.startTime || 0;\n}\n\nfunction byStartTimeAsc(a: PartitionMatrixStepRunFragment, b: PartitionMatrixStepRunFragment) {\n  return getStartTime(a) - getStartTime(b);\n}\n\n// BG Note: Dagit 0.10.0 removed the .compute step key suffix, but the Run Matrix takes the current\n// step tree and looks up data for each step in historical runs. For continuity across 0.10.0, we\n// match historical step keys with the .compute format as well. We can remove safely after 120 days?\nfunction isStepKeyForNode(nodeName: string, stepKey: string) {\n  const dynamicRegex = new RegExp(nodeName + DYNAMIC_STEP_REGEX_SUFFIX);\n  return stepKey === nodeName || stepKey === `${nodeName}.compute` || stepKey.match(dynamicRegex);\n}\n\nfunction buildMatrixData(\n  layout: GanttChartLayout,\n  partitionNames: string[],\n  partitions: PartitionRuns[],\n  options?: DisplayOptions,\n) {\n  const partitionsByName = {};\n  partitions.forEach((p) => {\n    // Note this is sorting partition runs in place, I don't think it matters and\n    // seems better than cloning all the arrays.\n    p.runs.sort(byStartTimeAsc);\n    (partitionsByName as any)[p.name] = p;\n  });\n\n  const partitionColumns = partitionNames.map((name, idx) => {\n    const partition: PartitionRuns = (partitionsByName as any)[name] || {\n      name,\n      runsLoaded: false,\n      runs: [],\n    };\n    const steps = layout.boxes.map(({node}) => {\n      const blankState = {\n        name: node.name,\n        color: 'MISSING' as StatusSquareColor,\n        unix: 0,\n      };\n\n      if (!partition.runs.length) {\n        return blankState;\n      }\n\n      const lastRun = partition.runs[partition.runs.length - 1]!;\n      const lastRunStepStatus = lastRun.stepStats.find((stats) =>\n        isStepKeyForNode(node.name, stats.stepKey),\n      )?.status;\n\n      let previousRunStatus;\n      if (\n        partition.runs.length > 1 &&\n        (!lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus))\n      ) {\n        let idx = partition.runs.length - 2;\n        while (idx >= 0 && !previousRunStatus) {\n          const currRun = partition.runs[idx]!;\n          const currRunStatus = currRun.stepStats.find((stats) =>\n            isStepKeyForNode(node.name, stats.stepKey),\n          )?.status;\n          if (currRunStatus && !MISSING_STEP_STATUSES.has(currRunStatus)) {\n            previousRunStatus = currRunStatus;\n            break;\n          }\n          idx--;\n        }\n      }\n\n      if (!lastRunStepStatus && !previousRunStatus) {\n        return blankState;\n      }\n\n      const color: StatusSquareColor =\n        !lastRunStepStatus || MISSING_STEP_STATUSES.has(lastRunStepStatus)\n          ? (`${previousRunStatus}-MISSING` as StatusSquareColor)\n          : (lastRunStepStatus as StatusSquareColor);\n      return {\n        name: node.name,\n        unix: getStartTime(lastRun),\n        color,\n      };\n    });\n    return {\n      ...partition,\n      steps,\n      idx,\n    };\n  });\n\n  const partitionsWithARun = partitionColumns.filter((p) => p.runs.length > 0).length;\n\n  const stepRows = layout.boxes.map((box, idx) => {\n    const totalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.includes('FAILURE'));\n    const finalFailures = partitionColumns.filter((p) => p.steps[idx]!.color.endsWith('FAILURE'));\n    return {\n      x: box.x,\n      name: box.node.name,\n      totalFailurePercent: partitionsWithARun\n        ? Math.round((totalFailures.length / partitionsWithARun) * 100)\n        : 0,\n      finalFailurePercent: partitionsWithARun\n        ? Math.round((finalFailures.length / partitionsWithARun) * 100)\n        : 0,\n    };\n  });\n\n  if (options?.showFailuresAndGapsOnly) {\n    for (let ii = stepRows.length - 1; ii >= 0; ii--) {\n      if (stepRows[ii]!.finalFailurePercent === 0) {\n        stepRows.splice(ii, 1);\n        partitionColumns.forEach((p) => p.steps.splice(ii, 1));\n      }\n    }\n    for (let ii = partitionColumns.length - 1; ii >= 0; ii--) {\n      if (\n        partitionColumns[ii]!.runs.length === 0 ||\n        partitionColumns[ii]!.steps.every((step) => step.color.includes('SUCCESS'))\n      ) {\n        partitionColumns.splice(ii, 1);\n      }\n    }\n  }\n\n  return {stepRows, partitions, partitionColumns};\n}\n\ninterface MatrixDataInputs {\n  solidHandles: PartitionMatrixSolidHandleFragment[] | false;\n  partitionNames: string[];\n  partitions: PartitionRuns[];\n  stepQuery: string;\n  options?: DisplayOptions;\n}\n\nexport type MatrixData = ReturnType<typeof buildMatrixData>;\n\n/**\n * This hook uses the inputs provided to filter the data displayed and calls through to buildMatrixData.\n * It uses a React ref to cache the result and avoids re-computing when all inputs are shallow-equal.\n *\n * - This could alternatively be implemented via React.memo and an outer + inner component pair, but I\n *   didn't want to split <PartitionRunMatrix />\n * - This can't be a React useEffect with an array of deps because we want the cached value to be updated\n *   synchronously when the inputs are modified to avoid a double-render caused by an effect + state var.\n *\n * @param inputs\n */\nexport const useMatrixData = (inputs: MatrixDataInputs) => {\n  const cachedMatrixData = React.useRef<{\n    result: MatrixData;\n    inputs: MatrixDataInputs;\n  }>();\n  if (!inputs.solidHandles) {\n    return null;\n  }\n  if (cachedMatrixData.current && shallowCompareKeys(inputs, cachedMatrixData.current.inputs)) {\n    return cachedMatrixData.current.result;\n  }\n\n  const nodes = explodeCompositesInHandleGraph(inputs.solidHandles).map((h) => h.solid);\n\n  // Filter the pipeline's structure and build the flat gantt layout for the left hand side\n  const solidsFiltered = filterByQuery(nodes, inputs.stepQuery);\n\n  const layout = buildLayout({nodes: solidsFiltered.all, mode: GanttChartMode.FLAT});\n\n  // Build the matrix of step + partition squares - presorted to match the gantt layout\n  const result = buildMatrixData(layout, inputs.partitionNames, inputs.partitions, inputs.options);\n  cachedMatrixData.current = {result, inputs};\n  return result;\n};\n\nexport const PARTITION_MATRIX_STEP_RUN_FRAGMENT = gql`\n  fragment PartitionMatrixStepRunFragment on Run {\n    id\n    status\n    startTime\n    endTime\n    stepStats {\n      stepKey\n      startTime\n      endTime\n      status\n    }\n    tags {\n      key\n      value\n    }\n  }\n`;\n\nexport const PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT = gql`\n  fragment PartitionMatrixSolidHandleFragment on SolidHandle {\n    handleID\n    solid {\n      name\n      definition {\n        name\n      }\n      inputs {\n        dependsOn {\n          solid {\n            name\n          }\n        }\n      }\n      outputs {\n        dependedBy {\n          solid {\n            name\n          }\n        }\n      }\n    }\n    ...GraphExplorerSolidHandleFragment\n  }\n\n  ${GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT}\n`;\n","import {useApolloClient, ApolloClient, gql} from '@apollo/client';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {RepositorySelector, RunStatus} from '../graphql/types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {RunFilterToken} from '../runs/RunsFilterInput';\n\nimport {PartitionMatrixStepRunFragment} from './types/useMatrixData.types';\nimport {\n  PartitionStepLoaderQueryVariables,\n  PartitionStepLoaderQuery,\n} from './types/usePartitionStepQuery.types';\nimport {PartitionRuns, PARTITION_MATRIX_STEP_RUN_FRAGMENT} from './useMatrixData';\n\ninterface DataState {\n  runs: PartitionMatrixStepRunFragment[];\n  partitionNames: string[];\n  loading: boolean;\n  loadingCursorIdx: number;\n  error?: PythonErrorFragment;\n}\n\nconst InitialDataState: DataState = {\n  runs: [],\n  partitionNames: [],\n  loading: false,\n  loadingCursorIdx: 0,\n};\n\ntype PartitionStepQueryOptions = {\n  partitionSetName: string;\n  partitionTagName: string;\n  partitionNames: string[];\n  pageSize: number;\n  runsFilter: RunFilterToken[];\n  repositorySelector: RepositorySelector;\n  jobName?: string;\n  offset?: number;\n  skipQuery?: boolean;\n};\n\n/**\n * This React hook mirrors `useCursorPaginatedQuery` but collects each page of partitions\n * in slices that are smaller than pageSize and cause the results to load incrementally.\n */\nexport function usePartitionStepQuery({\n  partitionSetName,\n  partitionTagName,\n  partitionNames,\n  pageSize,\n  runsFilter,\n  jobName,\n  repositorySelector,\n  offset,\n  skipQuery,\n}: PartitionStepQueryOptions) {\n  const client = useApolloClient();\n\n  const version = React.useRef(0);\n  const [dataState, setDataState] = React.useState<DataState>(InitialDataState);\n\n  const _serializedRunTags = JSON.stringify([\n    ...runsFilter.map((token) => {\n      const [key, value] = token.value.split('=');\n      return {key, value};\n    }),\n    {\n      key: DagsterTag.RepositoryLabelTag,\n      value: `${repositorySelector.repositoryName}@${repositorySelector.repositoryLocationName}`,\n    },\n  ]);\n\n  React.useEffect(() => {\n    // Note: there are several async steps to the loading process - to cancel the previous\n    // invocation, we bump a version number that is captured in a local variable.\n    // eg: If version.current no longer === v, this should stop updating state and exit.\n    const v = version.current + 1;\n    version.current = v;\n\n    const runTags = JSON.parse(_serializedRunTags);\n    setDataState((dataState) => ({...dataState, runs: [], loading: true}));\n\n    const run = async () => {\n      if (version.current !== v) {\n        return;\n      }\n      let loadingCursorIdx = partitionNames.length - (offset || 0);\n      const stopIdx = Math.max(0, loadingCursorIdx - pageSize);\n      setDataState((state) => ({...state, partitionNames, loadingCursorIdx}));\n\n      // Load runs in each of these partitions incrementally, running several queries in parallel\n      // to maximize the throughput we can achieve from the GraphQL interface.\n      const parallelQueries = 5;\n\n      while (loadingCursorIdx > stopIdx) {\n        const nextCursorIdx = Math.max(loadingCursorIdx - parallelQueries, 0);\n        const sliceNames = partitionNames.slice(nextCursorIdx, loadingCursorIdx);\n        const fetched = await Promise.all(\n          sliceNames.map((partitionName) => {\n            const partitionSetTag = {key: DagsterTag.PartitionSet, value: partitionSetName};\n            const partitionTag = {key: partitionTagName, value: partitionName};\n            // for jobs, filter by pipelineName/jobName instead of by partition set tag.  This\n            // preserves partition run history across the pipeline => job transition\n            const runTagsFilter = jobName\n              ? {\n                  pipelineName: jobName,\n                  tags: [...runTags, partitionTag],\n                }\n              : {tags: [...runTags, partitionTag, partitionSetTag]};\n            return fetchRunsForFilter(client, {limit: 1000, filter: runTagsFilter});\n          }),\n        );\n        if (version.current !== v) {\n          return;\n        }\n\n        loadingCursorIdx = nextCursorIdx;\n        setDataState((state) => ({\n          ...state,\n          runs: [...state.runs].concat(...fetched),\n          loading: loadingCursorIdx > 0,\n          loadingCursorIdx,\n        }));\n      }\n\n      // Periodically refresh pending runs and look for new runs in the displayed partitions.\n      // Note: this timer is canceled when a subsequent invocation of the useEffect updates `version.current`,\n      // because we don't want to create this interval until the initial load completes.\n\n      const timer: NodeJS.Timeout = setInterval(async () => {\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        setDataState((state) => ({...state, loading: true}));\n\n        // Fetch the 10 most recent runs for the pipeline so we pick up on new runs being launched.\n        // Note: this may be insufficient but seems like it will handle the 99% case where runs\n        // are either all queued (at the backfill start) or queued sequentially / slowly.\n        const recent = await fetchRunsForFilter(client, {\n          limit: 10,\n          filter: {\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        // Fetch runs in the partition set that are in the STARTED state, indicating active updates\n        const pending = await fetchRunsForFilter(client, {\n          filter: {\n            statuses: [RunStatus.STARTED],\n            tags: [...runTags, {key: DagsterTag.PartitionSet, value: partitionSetName}],\n          },\n        });\n\n        if (version.current !== v) {\n          return clearInterval(timer);\n        }\n\n        // Filter detected changes to just runs in our visible range of partitions, and then update\n        // local state if changes have been found.\n        const relevant = [...pending, ...recent].filter((run) =>\n          run.tags.find((t) => t.key === partitionTagName && partitionNames.includes(t.value)),\n        );\n        setDataState((state) => {\n          const updated = state.runs\n            .filter((r) => !relevant.some((o) => o.id === r.id))\n            .concat(relevant);\n          return {...state, loading: false, runs: updated};\n        });\n      }, 10 * 1000);\n    };\n\n    if (!skipQuery) {\n      run();\n    }\n\n    return () => {\n      version.current += 1;\n    };\n  }, [\n    pageSize,\n    client,\n    partitionSetName,\n    partitionTagName,\n    _serializedRunTags,\n    jobName,\n    offset,\n    partitionNames,\n    skipQuery,\n  ]);\n\n  return assemblePartitions(dataState, partitionTagName);\n}\n\nasync function fetchRunsForFilter(\n  client: ApolloClient<any>,\n  variables: PartitionStepLoaderQueryVariables,\n) {\n  const result = await client.query<PartitionStepLoaderQuery, PartitionStepLoaderQueryVariables>({\n    fetchPolicy: 'network-only',\n    query: PARTITION_STEP_LOADER_QUERY,\n    variables,\n  });\n  return (\n    (result.data.pipelineRunsOrError.__typename === 'Runs' &&\n      result.data.pipelineRunsOrError.results) ||\n    []\n  );\n}\n\nfunction assemblePartitions(data: DataState, partitionTagName: string) {\n  // Note: Partitions don't have any unique keys beside their names, so we use names\n  // extensively in our display layer as React keys. To create unique empty partitions\n  // we use different numbers of zero-width space characters\n  const results: PartitionRuns[] = [];\n  const byName: {[name: string]: PartitionRuns} = {};\n\n  data.partitionNames.forEach((name, idx) => {\n    byName[name] = {\n      name,\n      runsLoaded: idx >= data.loadingCursorIdx,\n      runs: [],\n    };\n    results.push(byName[name]!);\n  });\n\n  data.runs.forEach((r) => {\n    const partitionName = r.tags.find((t) => t.key === partitionTagName)?.value || '';\n    byName[partitionName]?.runs.push(r);\n  });\n\n  return results;\n}\n\nconst PARTITION_STEP_LOADER_QUERY = gql`\n  query PartitionStepLoaderQuery($filter: RunsFilter!, $cursor: String, $limit: Int) {\n    pipelineRunsOrError(filter: $filter, cursor: $cursor, limit: $limit) {\n      ... on Runs {\n        results {\n          id\n          ...PartitionMatrixStepRunFragment\n        }\n      }\n      ... on InvalidPipelineRunsFilterError {\n        message\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PARTITION_MATRIX_STEP_RUN_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Tabs, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {useRouteMatch} from 'react-router-dom';\n\nimport {TabLink} from '../ui/TabLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst titles: {[key: string]: string} = {\n  configuration: 'Configuration',\n  uses: 'Uses',\n};\n\nexport const ResourceTabs: React.FC<{\n  repoAddress: RepoAddress;\n  resourceName: string;\n  numUses: number;\n}> = (props) => {\n  const {repoAddress, resourceName, numUses} = props;\n\n  const match = useRouteMatch<{tab?: string; selector: string}>([\n    '/locations/:repoPath/resources/:name/:tab?',\n  ]);\n\n  const active = (match?.params.tab && titles[match?.params.tab]) || 'Configuration';\n\n  return (\n    <>\n      <Tabs size=\"large\" selectedTabId={active}>\n        <TabLink\n          key=\"configuration\"\n          id=\"Configuration\"\n          title=\"Configuration\"\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}`)}\n        />\n        <TabLink\n          key=\"uses\"\n          id=\"Uses\"\n          title={\n            <Box flex={{gap: 4, alignItems: 'center'}}>\n              Uses\n              <Tag intent=\"none\" minimal={true}>\n                {numUses}\n              </Tag>\n            </Box>\n          }\n          to={workspacePathFromAddress(repoAddress, `/resources/${resourceName}/uses`)}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  ButtonLink,\n  CaptionMono,\n  Colors,\n  Group,\n  Heading,\n  Icon,\n  MiddleTruncate,\n  Mono,\n  NonIdealState,\n  Page,\n  PageHeader,\n  SplitPanelContainer,\n  Subheading,\n  Table,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link, useParams, useRouteMatch} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetLink} from '../assets/AssetLink';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {SidebarSection} from '../pipelines/SidebarComponents';\nimport {Loading} from '../ui/Loading';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {ResourceTabs} from './ResourceTabs';\nimport {\n  ResourceRootQuery,\n  ResourceRootQueryVariables,\n  ResourceDetailsFragment,\n} from './types/ResourceRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n}\n\nconst remapName = (inName: string): string => {\n  if (inName === 'StringSourceType') {\n    return 'String';\n  } else if (inName === 'IntSourceType') {\n    return 'Int';\n  } else if (inName === 'BoolSourceType') {\n    return 'Bool';\n  }\n  return inName;\n};\n\nexport const succinctType = (resourceType: string | undefined): string | null => {\n  return resourceType?.split('.').pop() || null;\n};\n\nconst resourceDisplayName = (\n  resource: undefined | {name: string; resourceType: string},\n): string | null => {\n  if (!resource) {\n    return null;\n  }\n  return resource.name.startsWith('_nested_')\n    ? succinctType(resource?.resourceType)\n    : resource.name;\n};\n\nconst SectionHeader = (props: {children: React.ReactNode}) => {\n  return (\n    <Box\n      padding={{left: 24, vertical: 16}}\n      background={Colors.Gray50}\n      border={{width: 1, color: Colors.KeylineGray, side: 'all'}}\n    >\n      {props.children}\n    </Box>\n  );\n};\n\nexport const ResourceRoot: React.FC<Props> = (props) => {\n  useTrackPageView();\n\n  const {repoAddress} = props;\n  const {resourceName} = useParams<{resourceName: string}>();\n\n  useDocumentTitle(`Resource: ${resourceName}`);\n\n  const resourceSelector = {\n    ...repoAddressToSelector(repoAddress),\n    resourceName,\n  };\n  const queryResult = useQuery<ResourceRootQuery, ResourceRootQueryVariables>(RESOURCE_ROOT_QUERY, {\n    variables: {\n      resourceSelector,\n    },\n  });\n\n  const displayName =\n    (queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails' &&\n      resourceDisplayName(queryResult.data?.topLevelResourceDetailsOrError)) ||\n    resourceName;\n\n  const numUses =\n    queryResult.data?.topLevelResourceDetailsOrError.__typename === 'ResourceDetails'\n      ? queryResult.data.topLevelResourceDetailsOrError.parentResources.length +\n        queryResult.data.topLevelResourceDetailsOrError.assetKeysUsing.length +\n        queryResult.data.topLevelResourceDetailsOrError.jobsOpsUsing.length\n      : 0;\n\n  const tab = useRouteMatch<{tab?: string}>(['/locations/:repoPath/resources/:name/:tab?'])?.params\n    .tab;\n\n  return (\n    <Page style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>{displayName}</Heading>}\n        tabs={\n          <ResourceTabs repoAddress={repoAddress} resourceName={resourceName} numUses={numUses} />\n        }\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({topLevelResourceDetailsOrError}) => {\n          if (topLevelResourceDetailsOrError.__typename !== 'ResourceDetails') {\n            let message: string | null = null;\n            if (topLevelResourceDetailsOrError.__typename === 'PythonError') {\n              message = topLevelResourceDetailsOrError.message;\n            }\n\n            return (\n              <Alert\n                intent=\"warning\"\n                title={\n                  <Group direction=\"row\" spacing={4}>\n                    <div>Could not load resource.</div>\n                    {message && (\n                      <ButtonLink\n                        color={Colors.Link}\n                        underline=\"always\"\n                        onClick={() => {\n                          showCustomAlert({\n                            title: 'Python error',\n                            body: message,\n                          });\n                        }}\n                      >\n                        View error\n                      </ButtonLink>\n                    )}\n                  </Group>\n                }\n              />\n            );\n          }\n\n          const resourceTypeSuccinct = succinctType(topLevelResourceDetailsOrError.resourceType);\n\n          return (\n            <div style={{height: '100%', display: 'flex'}}>\n              <SplitPanelContainer\n                identifier=\"explorer\"\n                firstInitialPercent={50}\n                firstMinSize={400}\n                first={\n                  <Box padding={{bottom: 48}} style={{overflowY: 'auto'}}>\n                    {tab === 'uses' ? (\n                      <ResourceUses\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                        numUses={numUses}\n                      />\n                    ) : (\n                      <ResourceConfig\n                        resourceDetails={topLevelResourceDetailsOrError}\n                        repoAddress={repoAddress}\n                      />\n                    )}\n                  </Box>\n                }\n                second={\n                  <RightInfoPanel>\n                    <RightInfoPanelContent>\n                      <Box\n                        flex={{gap: 4, direction: 'column'}}\n                        margin={{left: 24, right: 12, vertical: 16}}\n                      >\n                        <Heading>{displayName}</Heading>\n\n                        <Tooltip content={topLevelResourceDetailsOrError.resourceType || ''}>\n                          <Mono>{resourceTypeSuccinct}</Mono>\n                        </Tooltip>\n                      </Box>\n\n                      <SidebarSection title=\"Definition\">\n                        <Box padding={{vertical: 16, horizontal: 24}}>\n                          <Tag icon=\"resource\">\n                            Resource in{' '}\n                            <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                          </Tag>\n                        </Box>\n                      </SidebarSection>\n                      {topLevelResourceDetailsOrError.description ? (\n                        <SidebarSection title=\"Description\">\n                          <Box padding={{vertical: 16, horizontal: 24}}>\n                            {topLevelResourceDetailsOrError.description}\n                          </Box>\n                        </SidebarSection>\n                      ) : null}\n                    </RightInfoPanelContent>\n                  </RightInfoPanel>\n                }\n              />\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst ResourceConfig: React.FC<{\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n}> = (props) => {\n  const {resourceDetails, repoAddress} = props;\n\n  const configuredValues = Object.fromEntries(\n    resourceDetails.configuredValues.map((cv) => [cv.key, {value: cv.value, type: cv.type}]),\n  );\n  const nestedResources = resourceDetails.nestedResources;\n\n  return (\n    <>\n      {nestedResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Resource dependencies</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th style={{width: 120}}>Key</th>\n                <th style={{width: 180}}>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {nestedResources.map((resource) => {\n                const resourceEntry =\n                  resource.type === 'TOP_LEVEL' && resource.resource ? (\n                    <ResourceEntry\n                      url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                      name={resourceDisplayName(resource.resource) || ''}\n                      description={resource.resource.description || undefined}\n                    />\n                  ) : (\n                    <ResourceEntry name={resource.name} />\n                  );\n\n                return (\n                  <tr key={resource.name}>\n                    <td>\n                      <strong>{resource.name}</strong>\n                    </td>\n                    <td colSpan={2}>{resourceEntry}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      <Box>\n        <SectionHeader>\n          <Subheading>Configuration</Subheading>\n        </SectionHeader>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Key</th>\n              <th style={{width: 90}}>Type</th>\n              <th style={{width: 90}}>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {resourceDetails.configFields.length === 0 ? (\n              <tr>\n                <td colSpan={3}>\n                  <Box padding={{vertical: 8}}>\n                    <NonIdealState\n                      icon=\"settings\"\n                      title=\"No configuration\"\n                      description=\"This resource has no configuration fields.\"\n                    />\n                  </Box>\n                </td>\n              </tr>\n            ) : (\n              resourceDetails.configFields.map((field) => {\n                const defaultValue = field.defaultValueAsJson;\n                const type = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name]!.type\n                  : null;\n                const actualValue = configuredValues.hasOwnProperty(field.name)\n                  ? configuredValues[field.name]!.value\n                  : defaultValue;\n\n                const isDefault = type === 'VALUE' && defaultValue === actualValue;\n                return (\n                  <tr key={field.name}>\n                    <td>\n                      <Box flex={{direction: 'column', gap: 4, alignItems: 'flex-start'}}>\n                        <strong>{field.name}</strong>\n                        <div style={{fontSize: 12, color: Colors.Gray700}}>{field.description}</div>\n                      </Box>\n                    </td>\n                    <td>{remapName(field.configTypeKey)}</td>\n                    <td>\n                      <Box flex={{direction: 'row', gap: 16}}>\n                        <Tooltip content={<>Default: {defaultValue}</>} canShow={!isDefault}>\n                          {type === 'ENV_VAR' ? <Tag>{actualValue}</Tag> : actualValue}\n                        </Tooltip>\n                        {isDefault && <Tag>Default</Tag>}\n                        {type === 'ENV_VAR' && <Tag intent=\"success\">Env var</Tag>}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </Table>\n      </Box>\n    </>\n  );\n};\n\nconst ResourceUses: React.FC<{\n  resourceDetails: ResourceDetailsFragment;\n  repoAddress: RepoAddress;\n  numUses: number;\n}> = (props) => {\n  const {resourceDetails, repoAddress, numUses} = props;\n\n  if (numUses === 0) {\n    return (\n      <Box padding={{vertical: 16}}>\n        <NonIdealState\n          icon=\"list\"\n          title=\"No uses\"\n          description=\"This resource is not used by any assets or resources.\"\n        />\n      </Box>\n    );\n  }\n\n  const parentResources = resourceDetails.parentResources;\n  return (\n    <>\n      {parentResources.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Parent resources</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Resource</th>\n              </tr>\n            </thead>\n            <tbody>\n              {parentResources.map((resource) => {\n                return (\n                  resource.resource && (\n                    <tr key={resource.name}>\n                      <td>\n                        <ResourceEntry\n                          url={workspacePathFromAddress(repoAddress, `/resources/${resource.name}`)}\n                          name={resourceDisplayName(resource.resource) || ''}\n                          description={resource.resource.description || undefined}\n                        />\n                      </td>\n                    </tr>\n                  )\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.assetKeysUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Assets</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Asset key</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.assetKeysUsing.map((assetKey) => {\n                return (\n                  <tr key={assetKey.path.join('/')}>\n                    <td>\n                      <AssetLink key={assetKey.path.join('/')} path={assetKey.path} icon=\"asset\" />\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n      {resourceDetails.jobsOpsUsing.length > 0 && (\n        <Box>\n          <SectionHeader>\n            <Subheading>Jobs</Subheading>\n          </SectionHeader>\n          <Table>\n            <thead>\n              <tr>\n                <th>Job name</th>\n                <th>Ops</th>\n              </tr>\n            </thead>\n            <tbody>\n              {resourceDetails.jobsOpsUsing.map((jobOps) => {\n                return (\n                  <tr key={jobOps.job.name}>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        <Icon name=\"job\" color={Colors.Gray400} />\n\n                        <Link\n                          to={workspacePathFromAddress(repoAddress, `/jobs/${jobOps.job.name}`)}\n                        >\n                          <MiddleTruncate text={jobOps.job.name} />\n                        </Link>\n                      </Box>\n                    </td>\n                    <td>\n                      <Box\n                        flex={{\n                          direction: 'row',\n                          alignItems: 'center',\n                          display: 'inline-flex',\n                          gap: 8,\n                        }}\n                        style={{maxWidth: '100%'}}\n                      >\n                        {jobOps.opsUsing.map((op) => (\n                          <Box\n                            flex={{\n                              direction: 'row',\n                              alignItems: 'center',\n                              display: 'inline-flex',\n                              gap: 8,\n                            }}\n                            style={{maxWidth: '100%'}}\n                            key={op.handleID}\n                          >\n                            <Icon name=\"op\" color={Colors.Gray400} />\n\n                            <Link\n                              to={workspacePathFromAddress(\n                                repoAddress,\n                                `/jobs/${jobOps.job.name}/${op.handleID.split('.').join('/')}`,\n                              )}\n                            >\n                              <MiddleTruncate text={op.solid.name} />\n                            </Link>\n                          </Box>\n                        ))}\n                      </Box>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </Table>\n        </Box>\n      )}\n    </>\n  );\n};\n\nconst ResourceEntry: React.FC<{\n  name: string;\n  url?: string;\n  description?: string;\n}> = (props) => {\n  const {url, name, description} = props;\n\n  return (\n    <Box flex={{direction: 'column'}}>\n      <Box flex={{direction: 'row', alignItems: 'center', gap: 4}} style={{maxWidth: '100%'}}>\n        <Icon name=\"resource\" color={Colors.Blue700} />\n        <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n          {url ? (\n            <Link to={url} style={{overflow: 'hidden'}}>\n              <MiddleTruncate text={name} />\n            </Link>\n          ) : (\n            <MiddleTruncate text={name} />\n          )}\n        </div>\n      </Box>\n      <CaptionMono>{description}</CaptionMono>\n    </Box>\n  );\n};\n\nconst RightInfoPanel = styled.div`\n  position: relative;\n\n  height: 100%;\n  min-height: 0;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  background: ${Colors.White};\n`;\n\nconst RightInfoPanelContent = styled.div`\n  flex: 1;\n  overflow-y: auto;\n`;\n\nconst RESOURCE_DETAILS_FRAGMENT = gql`\n  fragment ResourceDetailsFragment on ResourceDetails {\n    name\n    description\n    configFields {\n      name\n      description\n      configTypeKey\n      isRequired\n      defaultValueAsJson\n    }\n    configuredValues {\n      key\n      value\n      type\n    }\n    nestedResources {\n      name\n      type\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    parentResources {\n      name\n      resource {\n        name\n        resourceType\n        description\n      }\n    }\n    assetKeysUsing {\n      path\n    }\n    jobsOpsUsing {\n      job {\n        id\n        name\n      }\n      opsUsing {\n        handleID\n        solid {\n          name\n        }\n      }\n    }\n    resourceType\n  }\n`;\nconst RESOURCE_ROOT_QUERY = gql`\n  query ResourceRootQuery($resourceSelector: ResourceSelector!) {\n    topLevelResourceDetailsOrError(resourceSelector: $resourceSelector) {\n      ...ResourceDetailsFragment\n      ...PythonErrorFragment\n    }\n  }\n  ${RESOURCE_DETAILS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Caption, Colors, Icon, MiddleTruncate, Mono, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {succinctType} from './ResourceRoot';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 1fr';\n\ninterface ResourceRowProps extends ResourceEntryFragment {\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedResourceRow = (props: ResourceRowProps) => {\n  const {\n    name,\n    description,\n    repoAddress,\n    start,\n    height,\n    resourceType,\n    parentResources,\n    jobsOpsUsing,\n    assetKeysUsing,\n  } = props;\n  const resourceTypeSuccinct = succinctType(resourceType);\n  const uses = parentResources.length + jobsOpsUsing.length + assetKeysUsing.length;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n              <Icon name=\"resource\" color={Colors.Gray400} />\n\n              <span style={{fontWeight: 500}}>\n                <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </span>\n            </Box>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Tooltip content={resourceType}>\n            <Mono>{resourceTypeSuccinct}</Mono>\n          </Tooltip>\n        </RowCell>\n        <RowCell>\n          <Link to={workspacePathFromAddress(repoAddress, `/resources/${name}/uses`)}>{uses}</Link>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedResourceHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Uses</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceHeader, VirtualizedResourceRow} from './VirtualizedResourceRow';\nimport {ResourceEntryFragment} from './types/WorkspaceResourcesRoot.types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n}\n\nexport const VirtualizedResourceTable: React.FC<Props> = ({repoAddress, resources}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: resources.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 64,\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: ResourceEntryFragment = resources[index]!;\n              return (\n                <VirtualizedResourceRow\n                  key={key}\n                  repoAddress={repoAddress}\n                  height={size}\n                  start={start}\n                  {...row}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {WorkspaceHeader} from '../workspace/WorkspaceHeader';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nimport {VirtualizedResourceTable} from './VirtualizedResourceTable';\nimport {\n  WorkspaceResourcesQuery,\n  WorkspaceResourcesQueryVariables,\n} from './types/WorkspaceResourcesRoot.types';\n\nexport const WorkspaceResourcesRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const repoName = repoAddressAsHumanString(repoAddress);\n  useDocumentTitle(`Resources: ${repoName}`);\n\n  const [searchValue, setSearchValue] = React.useState('');\n\n  const selector = repoAddressToSelector(repoAddress);\n\n  const queryResultOverview = useQuery<WorkspaceResourcesQuery, WorkspaceResourcesQueryVariables>(\n    WORKSPACE_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n      variables: {selector},\n    },\n  );\n  const {data, loading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const resources = React.useMemo(() => {\n    if (data?.repositoryOrError.__typename === 'Repository') {\n      return data.repositoryOrError.allTopLevelResourceDetails;\n    }\n    return [];\n  }, [data]);\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower));\n  }, [resources, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                <div>\n                  No resources matching <strong>{searchValue}</strong> were found in {repoName}\n                </div>\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={`No resources were found in ${repoName}`}\n          />\n        </Box>\n      );\n    }\n\n    return <VirtualizedResourceTable repoAddress={repoAddress} resources={filteredBySearch} />;\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <WorkspaceHeader\n        repoAddress={repoAddress}\n        tab=\"resources\"\n        refreshState={refreshState}\n        queryData={queryResultOverview}\n      />\n      <Box padding={{horizontal: 24, vertical: 16}}>\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !data ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\nexport const RESOURCE_ENTRY_FRAGMENT = gql`\n  fragment ResourceEntryFragment on ResourceDetails {\n    name\n    description\n    resourceType\n    parentResources {\n      name\n    }\n    assetKeysUsing {\n      path\n    }\n    jobsOpsUsing {\n      job {\n        id\n      }\n    }\n  }\n`;\n\nconst WORKSPACE_RESOURCES_QUERY = gql`\n  query WorkspaceResourcesQuery($selector: RepositorySelector!) {\n    repositoryOrError(repositorySelector: $selector) {\n      ... on Repository {\n        id\n        name\n        allTopLevelResourceDetails {\n          ...ResourceEntryFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Box, Colors, Icon, IconWrapper} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {DUNDER_REPO_NAME} from '../workspace/buildRepoAddress';\n\nexport const SECTION_HEADER_HEIGHT = 32;\n\ninterface Props {\n  expanded: boolean;\n  onClick: (e: React.MouseEvent) => void;\n  repoName: string;\n  repoLocation: string;\n  showLocation: boolean;\n  rightElement?: React.ReactNode;\n}\n\nexport const RepoSectionHeader = (props: Props) => {\n  const {expanded, onClick, repoName, repoLocation, showLocation, rightElement} = props;\n  const isDunderRepoName = repoName === DUNDER_REPO_NAME;\n  return (\n    <SectionHeaderButton $open={expanded} onClick={onClick}>\n      <Box\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n        padding={{horizontal: 24}}\n      >\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          <Icon name=\"folder\" color={Colors.Dark} />\n          <div>\n            <RepoName>{isDunderRepoName ? repoLocation : repoName}</RepoName>\n            {showLocation && !isDunderRepoName ? (\n              <RepoLocation>{`@${repoLocation}`}</RepoLocation>\n            ) : null}\n          </div>\n        </Box>\n        <Box flex={{alignItems: 'center', gap: 8}}>\n          {rightElement}\n          <Box margin={{top: 2}}>\n            <Icon name=\"arrow_drop_down\" />\n          </Box>\n        </Box>\n      </Box>\n    </SectionHeaderButton>\n  );\n};\n\nconst SectionHeaderButton = styled.button<{$open: boolean}>`\n  background-color: ${Colors.Gray50};\n  border: 0;\n  box-shadow: inset 0px -1px 0 ${Colors.KeylineGray}, inset 0px 1px 0 ${Colors.KeylineGray};\n  cursor: pointer;\n  display: block;\n  padding: 0;\n  width: 100%;\n  margin: 0;\n  height: ${SECTION_HEADER_HEIGHT}px;\n  text-align: left;\n\n  :focus,\n  :active {\n    outline: none;\n  }\n\n  :hover {\n    background-color: ${Colors.Gray100};\n  }\n\n  ${IconWrapper}[aria-label=\"arrow_drop_down\"] {\n    transition: transform 100ms linear;\n    ${({$open}) => ($open ? null : `transform: rotate(-90deg);`)}\n  }\n`;\n\nconst RepoName = styled.span`\n  font-weight: 600;\n`;\n\nconst RepoLocation = styled.span`\n  font-weight: 400;\n  color: ${Colors.Gray700};\n`;\n","import {Box, Colors, FontFamily, Mono, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <Mono style={{fontSize: '14px'}}>{titleForRun(run)}</Mono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}} padding={{top: 2}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.KeylineGray};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.Dark};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  font-size: 12px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {Colors} from '@dagster-io/ui';\n\nimport {queuedStatuses, inProgressStatuses, failedStatuses, successStatuses} from './RunStatuses';\nimport {TimelineRun} from './RunTimeline';\n\ntype BackgroundStatus = 'inProgress' | 'queued' | 'failed' | 'succeeded' | 'scheduled';\n\nconst statusToColor = (status: BackgroundStatus) => {\n  switch (status) {\n    case 'queued':\n      return Colors.Blue200;\n    case 'inProgress':\n      return Colors.Blue500;\n    case 'failed':\n      return Colors.Red500;\n    case 'succeeded':\n      return Colors.Green500;\n    case 'scheduled':\n      return Colors.Blue200;\n  }\n};\n\nexport const mergeStatusToBackground = (runs: TimelineRun[]) => {\n  const counts = {\n    scheduled: 0,\n    queued: 0,\n    inProgress: 0,\n    failed: 0,\n    succeeded: 0,\n  };\n\n  runs.forEach(({status}) => {\n    if (status === 'SCHEDULED') {\n      counts.scheduled++;\n    } else if (queuedStatuses.has(status)) {\n      counts.queued++;\n    } else if (inProgressStatuses.has(status)) {\n      counts.inProgress++;\n    } else if (failedStatuses.has(status)) {\n      counts.failed++;\n    } else if (successStatuses.has(status)) {\n      counts.succeeded++;\n    }\n  });\n\n  const statusArr = Object.keys(counts).filter(\n    (status) => counts[status as keyof typeof counts] > 0,\n  ) as BackgroundStatus[];\n\n  if (statusArr.length === 1) {\n    const [element] = statusArr;\n    return statusToColor(element!);\n  }\n\n  // const colorList = statusArr.map(statusToColor);\n  const runCount = runs.length;\n\n  const colors = [\n    counts.failed > 0 ? {status: 'failed', pct: (counts.failed * 100) / runCount} : null,\n    counts.succeeded > 0 ? {status: 'succeeded', pct: (counts.succeeded * 100) / runCount} : null,\n    counts.inProgress > 0\n      ? {status: 'inProgress', pct: (counts.inProgress * 100) / runCount}\n      : null,\n    counts.queued > 0 ? {status: 'queued', pct: (counts.queued * 100) / runCount} : null,\n    counts.scheduled > 0 ? {status: 'scheduled', pct: (counts.scheduled * 100) / runCount} : null,\n  ].filter(Boolean);\n\n  let colorString = '';\n  let nextPct = 0;\n  let pctSoFar = 0;\n\n  for (let ii = 0; ii < colors.length; ii++) {\n    const value = colors[ii];\n    if (!value) {\n      continue;\n    }\n\n    const {status, pct} = value;\n    pctSoFar = nextPct;\n    nextPct += pct;\n    const colorForStatus = statusToColor(status as BackgroundStatus);\n    if (ii === 0) {\n      colorString += `${colorForStatus} ${pct.toFixed(1)}%, `;\n    } else if (ii === colors.length - 1) {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}%`;\n    } else {\n      colorString += `${colorForStatus} ${pctSoFar.toFixed(1)}% ${nextPct.toFixed(1)}%, `;\n    }\n  }\n\n  return `linear-gradient(to right, ${colorString})`;\n};\n","import {\n  Box,\n  Colors,\n  Popover,\n  Mono,\n  FontFamily,\n  Tooltip,\n  Tag,\n  Icon,\n  Spinner,\n  MiddleTruncate,\n  useViewport,\n} from '@dagster-io/ui';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {RunStatus} from '../graphql/types';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useFormatDateTime} from '../ui/useFormatDateTime';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsURLString} from '../workspace/repoAddressAsString';\nimport {repoAddressFromPath} from '../workspace/repoAddressFromPath';\nimport {RepoAddress} from '../workspace/types';\n\nimport {SECTION_HEADER_HEIGHT} from './RepoSectionHeader';\nimport {RunStatusDot} from './RunStatusDots';\nimport {failedStatuses, inProgressStatuses, successStatuses} from './RunStatuses';\nimport {TimeElapsed} from './TimeElapsed';\nimport {batchRunsForTimeline, RunBatch} from './batchRunsForTimeline';\nimport {mergeStatusToBackground} from './mergeStatusToBackground';\n\nconst ROW_HEIGHT = 32;\nconst TIME_HEADER_HEIGHT = 32;\nconst DATE_TIME_HEIGHT = TIME_HEADER_HEIGHT * 2;\nconst EMPTY_STATE_HEIGHT = 110;\nconst LEFT_SIDE_SPACE_ALLOTTED = 320;\nconst LABEL_WIDTH = 268;\nconst MIN_DATE_WIDTH_PCT = 10;\n\nconst ONE_HOUR_MSEC = 60 * 60 * 1000;\n\nexport type TimelineRun = {\n  id: string;\n  status: RunStatus | 'SCHEDULED';\n  startTime: number;\n  endTime: number;\n};\n\nexport type TimelineJob = {\n  key: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  jobType: 'job' | 'asset';\n  path: string;\n  runs: TimelineRun[];\n};\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; job: TimelineJob};\n\ninterface Props {\n  loading?: boolean;\n  jobs: TimelineJob[];\n  range: [number, number];\n}\n\nexport const RunTimeline = (props: Props) => {\n  const {loading = false, jobs, range} = props;\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const {\n    viewport: {width},\n    containerProps: {ref: measureRef},\n  } = useViewport();\n\n  const now = Date.now();\n  const [_, end] = range;\n  const includesTicks = now <= end;\n\n  const buckets = jobs.reduce((accum, job) => {\n    const {repoAddress} = job;\n    const repoKey = repoAddressAsURLString(repoAddress);\n    const jobsForRepo = accum[repoKey] || [];\n    return {...accum, [repoKey]: [...jobsForRepo, job]};\n  }, {} as Record<string, TimelineJob[]>);\n\n  const allKeys = Object.keys(buckets);\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    Object.entries(buckets).forEach(([repoKey, bucket]) => {\n      const repoAddress = repoAddressFromPath(repoKey);\n      if (!repoAddress) {\n        return;\n      }\n\n      flat.push({type: 'header', repoAddress, jobCount: bucket.length});\n      if (expandedKeys.includes(repoKey)) {\n        bucket.forEach((job) => {\n          flat.push({type: 'job', repoAddress, job});\n        });\n      }\n    });\n\n    return flat;\n  }, [buckets, expandedKeys]);\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (_: number) => 32,\n    overscan: 40,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  if (!width) {\n    return <div style={{height: DATE_TIME_HEIGHT + EMPTY_STATE_HEIGHT}} ref={measureRef} />;\n  }\n\n  const repoOrder = Object.keys(buckets).sort((a, b) => a.localeCompare(b));\n\n  const expandedRepos = repoOrder.filter((repoKey) => expandedKeys.includes(repoKey));\n  const expandedJobCount = expandedRepos.reduce(\n    (accum, repoKey) => accum + buckets[repoKey]!.length,\n    0,\n  );\n  const height = repoOrder.length * SECTION_HEADER_HEIGHT + ROW_HEIGHT * expandedJobCount;\n  const duplicateRepoNames = findDuplicateRepoNames(\n    repoOrder.map((repoKey) => repoAddressFromPath(repoKey)?.name || ''),\n  );\n  const anyJobs = repoOrder.length > 0;\n\n  return (\n    <>\n      <div ref={measureRef} />\n      <Box\n        padding={{left: 24}}\n        flex={{direction: 'column', justifyContent: 'center'}}\n        style={{fontSize: '16px', flex: `0 0 ${DATE_TIME_HEIGHT}px`}}\n        border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      >\n        Jobs\n      </Box>\n      <div style={{position: 'relative'}}>\n        <TimeDividers interval={ONE_HOUR_MSEC} range={range} height={anyJobs ? height : 0} />\n      </div>\n      {repoOrder.length ? (\n        <div style={{overflow: 'hidden', position: 'relative'}}>\n          <Container ref={parentRef}>\n            <Inner $totalHeight={totalHeight}>\n              {items.map(({index, key, size, start}) => {\n                const row: RowType = flattened[index]!;\n                const type = row!.type;\n                if (type === 'header') {\n                  const repoKey = repoAddressAsURLString(row.repoAddress);\n                  const repoName = row.repoAddress.name;\n                  return (\n                    <TimelineHeaderRow\n                      expanded={expandedKeys.includes(repoKey)}\n                      key={repoKey}\n                      height={size}\n                      top={start}\n                      repoAddress={row.repoAddress}\n                      isDuplicateRepoName={!!(repoName && duplicateRepoNames.has(repoName))}\n                      jobs={buckets[repoKey]!}\n                      onToggle={onToggle}\n                      onToggleAll={onToggleAll}\n                    />\n                  );\n                }\n\n                return (\n                  <RunTimelineRow\n                    job={row.job}\n                    key={key}\n                    height={size}\n                    top={start}\n                    range={range}\n                    width={width}\n                  />\n                );\n              })}\n            </Inner>\n          </Container>\n        </div>\n      ) : (\n        <RunsEmptyOrLoading loading={loading} includesTicks={includesTicks} />\n      )}\n    </>\n  );\n};\n\ninterface TimelineHeaderRowProps {\n  expanded: boolean;\n  repoAddress: RepoAddress;\n  isDuplicateRepoName: boolean;\n  jobs: TimelineJob[];\n  height: number;\n  top: number;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}\n\nconst TimelineHeaderRow = (props: TimelineHeaderRowProps) => {\n  const {\n    expanded,\n    onToggle,\n    onToggleAll,\n    repoAddress,\n    isDuplicateRepoName,\n    jobs,\n    height,\n    top,\n  } = props;\n\n  return (\n    <RepoRow\n      expanded={expanded}\n      height={height}\n      start={top}\n      repoAddress={repoAddress}\n      showLocation={isDuplicateRepoName}\n      onToggle={onToggle}\n      onToggleAll={onToggleAll}\n      rightElement={<RunStatusTags jobs={jobs} />}\n    />\n  );\n};\n\nconst RunStatusTags = React.memo(({jobs}: {jobs: TimelineJob[]}) => {\n  const counts = React.useMemo(() => {\n    let inProgressCount = 0;\n    let failedCount = 0;\n    let succeededCount = 0;\n    jobs.forEach(({runs}) => {\n      runs.forEach(({status}) => {\n        // Refine `SCHEDULED` out so that our Set checks below pass TypeScript.\n        if (status === 'SCHEDULED') {\n          return;\n        }\n        if (inProgressStatuses.has(status)) {\n          inProgressCount++;\n        } else if (failedStatuses.has(status)) {\n          failedCount++;\n        } else if (successStatuses.has(status)) {\n          succeededCount++;\n        }\n      });\n    });\n    return {inProgressCount, failedCount, succeededCount};\n  }, [jobs]);\n\n  return <RunStatusTagsWithCounts {...counts} />;\n});\n\nexport const RunStatusTagsWithCounts = ({\n  inProgressCount,\n  succeededCount,\n  failedCount,\n}: {\n  inProgressCount: number;\n  succeededCount: number;\n  failedCount: number;\n}) => {\n  const inProgressText =\n    inProgressCount === 1 ? '1 run in progress' : `${inProgressCount} runs in progress`;\n  const succeededText =\n    succeededCount === 1 ? '1 run succeeded' : `${succeededCount} runs succeeded`;\n  const failedText = failedCount === 1 ? '1 run failed' : `${failedCount} runs failed`;\n\n  return (\n    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n      {inProgressCount > 0 ? (\n        <Tooltip content={<StatusSpan>{inProgressText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"primary\">{inProgressCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {succeededCount > 0 ? (\n        <Tooltip content={<StatusSpan>{succeededText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"success\">{succeededCount}</Tag>\n        </Tooltip>\n      ) : null}\n      {failedCount > 0 ? (\n        <Tooltip content={<StatusSpan>{failedText}</StatusSpan>} placement=\"top\">\n          <Tag intent=\"danger\">{failedCount}</Tag>\n        </Tooltip>\n      ) : null}\n    </Box>\n  );\n};\n\nconst StatusSpan = styled.span`\n  white-space: nowrap;\n`;\n\ntype DateMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n  width: number;\n};\n\ntype TimeMarker = {\n  key: string;\n  label: React.ReactNode;\n  left: number;\n};\n\ninterface TimeDividersProps {\n  height: number;\n  interval: number;\n  range: [number, number];\n}\n\nconst dateTimeOptions: Intl.DateTimeFormatOptions = {\n  month: 'numeric',\n  day: 'numeric',\n  year: 'numeric',\n};\n\nconst dateTimeOptionsWithTimezone: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  timeZoneName: 'short',\n};\n\nconst timeOnlyOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n};\n\nconst TimeDividers = (props: TimeDividersProps) => {\n  const {interval, range, height} = props;\n  const [start, end] = range;\n  const formatDateTime = useFormatDateTime();\n\n  const dateMarkers: DateMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startDate = new Date(start);\n    const startDateStringWithTimezone = formatDateTime(\n      startDate,\n      dateTimeOptionsWithTimezone,\n      'en-US',\n    );\n\n    const dayBoundaries = [];\n\n    // Create a date at midnight on this date in this timezone.\n    let cursor = new Date(startDateStringWithTimezone);\n\n    while (cursor.valueOf() < end) {\n      const dayStart = cursor.getTime();\n      const dayEnd = new Date(dayStart).setDate(cursor.getDate() + 1); // Increment by one day.\n      cursor = new Date(dayEnd);\n      dayBoundaries.push({dayStart, dayEnd});\n    }\n\n    return dayBoundaries.map(({dayStart, dayEnd}) => {\n      const date = new Date(dayStart);\n      const startLeftMsec = dayStart - start;\n      const dayLength = dayEnd - dayStart; // This can vary with DST\n      const endRight = startLeftMsec + dayLength;\n\n      const left = Math.max(0, (startLeftMsec / totalTime) * 100);\n      const right = Math.min(100, (endRight / totalTime) * 100);\n\n      return {\n        label: formatDateTime(date, dateTimeOptions),\n        key: date.toString(),\n        left,\n        width: right - left,\n      };\n    });\n  }, [end, formatDateTime, start]);\n\n  const timeMarkers: TimeMarker[] = React.useMemo(() => {\n    const totalTime = end - start;\n    const startGap = start % interval;\n    const firstMarker = start - startGap;\n    const markerCount = Math.ceil(totalTime / interval) + 1;\n    return [...new Array(markerCount)]\n      .map((_, ii) => {\n        const time = firstMarker + ii * interval;\n        const date = new Date(time);\n        const label = formatDateTime(date, timeOnlyOptions).replace(' ', '');\n        return {\n          label,\n          key: date.toString(),\n          left: ((time - start) / totalTime) * 100,\n        };\n      })\n      .filter((marker) => marker.left > 0);\n  }, [end, start, interval, formatDateTime]);\n\n  const now = Date.now();\n  const nowLeft = `${(((now - start) / (end - start)) * 100).toPrecision(3)}%`;\n\n  return (\n    <DividerContainer style={{height: `${height}px`, top: `-${DATE_TIME_HEIGHT}px`}}>\n      <DividerLabels>\n        {dateMarkers.map((marker) => (\n          <DateLabel\n            key={marker.key}\n            style={{\n              left: `${marker.left.toPrecision(3)}%`,\n              width: `${marker.width.toPrecision(3)}%`,\n            }}\n          >\n            {marker.width > MIN_DATE_WIDTH_PCT ? (\n              <Box flex={{justifyContent: 'center'}}>{marker.label}</Box>\n            ) : null}\n          </DateLabel>\n        ))}\n      </DividerLabels>\n      <DividerLabels>\n        {timeMarkers.map((marker) => (\n          <TimeLabel key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}}>\n            {marker.label}\n          </TimeLabel>\n        ))}\n      </DividerLabels>\n      <DividerLines>\n        <DividerLine style={{left: 0, backgroundColor: Colors.Gray200}} />\n        {timeMarkers.map((marker) => (\n          <DividerLine key={marker.key} style={{left: `${marker.left.toPrecision(3)}%`}} />\n        ))}\n        {now >= start && now <= end ? (\n          <>\n            <NowMarker style={{left: nowLeft}}>Now</NowMarker>\n            <DividerLine style={{left: nowLeft, backgroundColor: Colors.Blue500, zIndex: 1}} />\n          </>\n        ) : null}\n      </DividerLines>\n    </DividerContainer>\n  );\n};\n\nconst DividerContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n  right: 0;\n  font-family: ${FontFamily.monospace};\n  color: ${Colors.Gray800};\n`;\n\nconst DividerLabels = styled.div`\n  display: flex;\n  align-items: center;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset 0 1px 0 ${Colors.KeylineGray},\n    inset -1px 0 0 ${Colors.KeylineGray};\n  height: ${TIME_HEADER_HEIGHT}px;\n  position: relative;\n  user-select: none;\n  font-size: 12px;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst DateLabel = styled.div`\n  position: absolute;\n  padding: 8px 0;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst TimeLabel = styled.div`\n  position: absolute;\n  padding: 8px;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray};\n  white-space: nowrap;\n`;\n\nconst DividerLines = styled.div`\n  height: 100%;\n  position: relative;\n  width: 100%;\n  box-shadow: inset 1px 0 0 ${Colors.KeylineGray}, inset -1px 0 0 ${Colors.KeylineGray};\n`;\n\nconst DividerLine = styled.div`\n  background-color: ${Colors.KeylineGray};\n  height: 100%;\n  position: absolute;\n  top: 0;\n  width: 1px;\n`;\n\nconst NowMarker = styled.div`\n  background-color: ${Colors.Blue500};\n  border-radius: 1px;\n  color: ${Colors.White};\n  cursor: default;\n  font-size: 12px;\n  line-height: 12px;\n  margin-left: -12px;\n  padding: 1px 4px;\n  position: absolute;\n  top: -14px;\n  user-select: none;\n`;\n\nconst MIN_CHUNK_WIDTH = 2;\nconst MIN_WIDTH_FOR_MULTIPLE = 12;\n\nconst RunTimelineRow = ({\n  job,\n  top,\n  height,\n  range,\n  width: containerWidth,\n}: {\n  job: TimelineJob;\n  top: number;\n  height: number;\n  range: [number, number];\n  width: number;\n}) => {\n  const [start, end] = range;\n  const width = containerWidth - LEFT_SIDE_SPACE_ALLOTTED;\n  const {runs} = job;\n\n  // Batch overlapping runs in this row.\n  const batched = React.useMemo(() => {\n    const batches: RunBatch<TimelineRun>[] = batchRunsForTimeline({\n      runs,\n      start,\n      end,\n      width,\n      minChunkWidth: MIN_CHUNK_WIDTH,\n      minMultipleWidth: MIN_WIDTH_FOR_MULTIPLE,\n    });\n\n    return batches;\n  }, [runs, start, end, width]);\n\n  if (!job.runs.length) {\n    return null;\n  }\n\n  return (\n    <Row $height={height} $start={top}>\n      <JobName>\n        <Icon name={job.jobType === 'asset' ? 'asset' : 'job'} />\n        <div style={{width: LABEL_WIDTH}}>\n          {job.jobType === 'asset' ? (\n            <span style={{color: Colors.Gray900}}>\n              <MiddleTruncate text={job.jobName} />\n            </span>\n          ) : (\n            <Link to={job.path}>\n              <MiddleTruncate text={job.jobName} />\n            </Link>\n          )}\n        </div>\n      </JobName>\n      <RunChunks>\n        {batched.map((batch) => {\n          const {left, width, runs} = batch;\n          const runCount = runs.length;\n          return (\n            <RunChunk\n              key={batch.runs[0]!.id}\n              $background={mergeStatusToBackground(batch.runs)}\n              $multiple={runCount > 1}\n              style={{\n                left: `${left}px`,\n                width: `${width}px`,\n              }}\n            >\n              <Popover\n                content={<RunHoverContent job={job} batch={batch} />}\n                position=\"top\"\n                interactionKind=\"hover\"\n                className=\"chunk-popover-target\"\n              >\n                <Box\n                  flex={{direction: 'row', justifyContent: 'center', alignItems: 'center'}}\n                  style={{height: '100%'}}\n                >\n                  {runCount > 1 ? <BatchCount>{batch.runs.length}</BatchCount> : null}\n                </Box>\n              </Popover>\n            </RunChunk>\n          );\n        })}\n      </RunChunks>\n    </Row>\n  );\n};\n\nconst RunsEmptyOrLoading = (props: {loading: boolean; includesTicks: boolean}) => {\n  const {loading, includesTicks} = props;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          {includesTicks ? 'Loading runs and scheduled ticks' : 'Loading runs'}\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column', gap: 12, alignItems: 'center'}}>\n        <div>\n          {includesTicks\n            ? 'No runs or scheduled ticks in this time period.'\n            : 'No runs in this time period.'}\n        </div>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <AnchorButton icon={<Icon name=\"add_circle\" />} to=\"/overview/jobs\">\n            Launch a run\n          </AnchorButton>\n          <span>or</span>\n          <AnchorButton icon={<Icon name=\"materialization\" />} to=\"/asset-groups\">\n            Materialize an asset\n          </AnchorButton>\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Box\n      background={Colors.White}\n      padding={{vertical: 24}}\n      flex={{direction: 'row', justifyContent: 'center'}}\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n    >\n      {content()}\n    </Box>\n  );\n};\n\ntype RowProps = {$height: number; $start: number};\n\nconst Row = styled.div.attrs<RowProps>(({$height, $start}) => ({\n  style: {\n    height: `${$height}px`,\n    transform: `translateY(${$start}px)`,\n  },\n}))<RowProps>`\n  align-items: center;\n  box-shadow: inset 0 -1px 0 ${Colors.KeylineGray};\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  padding: 1px 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  overflow: hidden;\n\n  :hover {\n    background-color: ${Colors.Gray10};\n  }\n`;\n\nconst JobName = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 13px;\n  justify-content: flex-start;\n  gap: 8px;\n  line-height: 16px;\n  overflow: hidden;\n  padding: 0 12px 0 24px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: ${LEFT_SIDE_SPACE_ALLOTTED}px;\n`;\n\nconst RunChunks = styled.div`\n  flex: 1;\n  position: relative;\n  height: ${ROW_HEIGHT}px;\n`;\n\ninterface ChunkProps {\n  $background: string;\n  $multiple: boolean;\n}\n\nconst RunChunk = styled.div<ChunkProps>`\n  align-items: center;\n  background: ${({$background}) => $background};\n  border-radius: 2px;\n  height: ${ROW_HEIGHT - 4}px;\n  position: absolute;\n  top: 2px;\n  ${({$multiple}) => ($multiple ? `min-width: ${MIN_WIDTH_FOR_MULTIPLE}px` : null)};\n\n  transition: background-color 300ms linear, width 300ms ease-in-out;\n\n  .chunk-popover-target {\n    display: block;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nconst BatchCount = styled.div`\n  color: ${Colors.White};\n  cursor: default;\n  font-family: ${FontFamily.monospace};\n  font-size: 14px;\n  font-weight: 600;\n  user-select: none;\n`;\n\ninterface RunHoverContentProps {\n  job: TimelineJob;\n  batch: RunBatch<TimelineRun>;\n}\n\nconst RunHoverContent = (props: RunHoverContentProps) => {\n  const {job, batch} = props;\n  const sliced = batch.runs.slice(0, 50);\n  const remaining = batch.runs.length - sliced.length;\n\n  return (\n    <Box style={{width: '260px'}}>\n      <Box padding={12} border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <HoverContentJobName>{job.jobName}</HoverContentJobName>\n      </Box>\n      <div style={{maxHeight: '240px', overflowY: 'auto'}}>\n        {sliced.map((run, ii) => (\n          <Box\n            key={run.id}\n            border={ii > 0 ? {side: 'top', width: 1, color: Colors.KeylineGray} : null}\n            flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}\n            padding={{vertical: 8, horizontal: 12}}\n          >\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <RunStatusDot status={run.status} size={8} />\n              {run.status === 'SCHEDULED' ? (\n                'Scheduled'\n              ) : (\n                <Link to={`/runs/${run.id}`}>\n                  <Mono>{run.id.slice(0, 8)}</Mono>\n                </Link>\n              )}\n            </Box>\n            <Mono>\n              {run.status === 'SCHEDULED' ? (\n                <TimestampDisplay timestamp={run.startTime / 1000} />\n              ) : (\n                <TimeElapsed startUnix={run.startTime / 1000} endUnix={run.endTime / 1000} />\n              )}\n            </Mono>\n          </Box>\n        ))}\n      </div>\n      {remaining > 0 ? (\n        <Box padding={12} border={{side: 'top', width: 1, color: Colors.KeylineGray}}>\n          <Link to={`${job.path}/runs`}>+ {remaining} more</Link>\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n\nconst HoverContentJobName = styled.strong`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 100%;\n`;\n","import * as React from 'react';\n\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\n/**\n * Return a date/time formatter function that takes the user's stored timezone into\n * account. Useful for rendering arbitrary non-typical date/time formats.\n *\n * @returns string\n */\nexport const useFormatDateTime = () => {\n  const {\n    timezone: [storedTimezone],\n    hourCycle: [storedHourCycle],\n  } = React.useContext(TimeContext);\n\n  const timeZone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n  const hourCycle = storedHourCycle === 'Automatic' ? undefined : storedHourCycle;\n\n  return React.useCallback(\n    (date: Date, options: Intl.DateTimeFormatOptions, language = navigator.language) => {\n      return Intl.DateTimeFormat(language, {timeZone, hourCycle, ...options}).format(date);\n    },\n    [timeZone, hourCycle],\n  );\n};\n","export interface RunWithTime {\n  startTime: number;\n  endTime: number;\n}\n\nexport type RunBatch<R extends RunWithTime> = {\n  runs: R[];\n  startTime: number;\n  endTime: number;\n  left: number;\n  width: number;\n};\n\ntype Config<R extends RunWithTime> = {\n  runs: R[];\n  start: number;\n  end: number;\n  width: number;\n  minChunkWidth: number;\n  minMultipleWidth: number;\n};\n\nexport const overlap = (a: {start: number; end: number}, b: {start: number; end: number}) =>\n  !(a.end < b.start || b.end < a.start);\n\n/**\n * Given a list of runs, batch any that overlap. Calculate `left` and `width` values for rendering\n * purposes, using minimum widths for very brief runs and overlapping batches.\n */\nexport const batchRunsForTimeline = <R extends RunWithTime>(config: Config<R>) => {\n  const {runs, start, end, width, minChunkWidth, minMultipleWidth} = config;\n  const rangeLength = end - start;\n\n  const now = Date.now();\n  const nowLeft = ((now - start) / (end - start)) * width;\n\n  const batches: RunBatch<R>[] = runs\n    .map((run) => {\n      const startTime = run.startTime;\n      const endTime = run.endTime || Date.now();\n      const left = Math.max(0, Math.floor(((startTime - start) / rangeLength) * width));\n      const runWidth = Math.max(\n        minChunkWidth,\n        Math.min(\n          Math.ceil(((endTime - startTime) / rangeLength) * width),\n          Math.ceil(((endTime - start) / rangeLength) * width),\n        ),\n      );\n\n      return {\n        runs: [run],\n        startTime,\n        endTime,\n        left,\n        width: runWidth,\n      };\n    })\n    .sort((a, b) => b.left - a.left);\n\n  const consolidated = [];\n\n  while (batches.length) {\n    const current = batches.shift();\n    const next = batches[0];\n    if (current) {\n      if (next && canBatch(current, next, minMultipleWidth, nowLeft)) {\n        // Remove `next`, consolidate it with `current`, and unshift it back on.\n        // This way, we keep looking for batches to consolidate with.\n        batches.shift();\n        current.runs = [...current.runs, ...next.runs];\n        current.startTime = Math.min(current.startTime, next.startTime);\n        current.endTime = Math.max(current.endTime, next.endTime);\n\n        // Identify the rightmost point for these two items.\n        const right = Math.max(\n          current.left + minMultipleWidth,\n          current.left + current.width,\n          next.left + next.width,\n        );\n\n        // Using the leftmost point, calculate the new width using the rightmost point\n        // determined above.\n        const minLeft = Math.min(current.left, next.left);\n        current.width = right - minLeft;\n        current.left = minLeft;\n\n        batches.unshift(current);\n      } else {\n        // If the next batch doesn't overlap, we've consolidated this batch\n        // all we can. Move on!\n        consolidated.push(current);\n      }\n    }\n  }\n\n  return consolidated;\n};\n\nconst canBatch = (\n  current: RunBatch<RunWithTime>,\n  next: RunBatch<RunWithTime>,\n  minMultipleWidth: number,\n  nowLeft: number,\n) => {\n  const currentStart = current.left;\n  const currentEnd = current.left + Math.max(current.width, minMultipleWidth);\n  const nextStart = next.left;\n  const nextEnd = next.left + Math.max(next.width, minMultipleWidth);\n\n  const minStart = Math.min(current.left, next.left);\n  const maxEnd = Math.max(\n    current.left + Math.max(current.width, minMultipleWidth),\n    next.left + Math.max(next.width, minMultipleWidth),\n  );\n\n  // If the batches overlap with each other but do NOT visually overlap with the \"now\"\n  // time marker, they can be batched.\n  return (\n    overlap({start: currentStart, end: currentEnd}, {start: nextStart, end: nextEnd}) &&\n    // ...and they do not combine to cross over the \"now\" marker\n    (minStart > nowLeft || maxEnd < nowLeft)\n  );\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {Button, Colors, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  React.useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      scheduleOriginId: scheduleState.id,\n      scheduleSelectorId: scheduleState.selectorId,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = React.useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = React.useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","import {useMutation} from '@apollo/client';\n// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {Button, Colors, DialogBody, DialogFooter, Dialog, Group, Icon} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  React.useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      jobOriginId: sensorState.id,\n      jobSelectorId: sensorState.selectorId,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.Green500} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.Yellow500} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = React.useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = React.useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  ButtonLink,\n  Button,\n  Colors,\n  DialogBody,\n  DialogFooter,\n  Dialog,\n  Group,\n  TextArea,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport 'chartjs-adapter-date-fns';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {SensorSelector} from '../graphql/types';\n\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from './types/EditCursorDialog.types';\n\nexport const EditCursorDialog: React.FC<{\n  isOpen: boolean;\n  cursor: string;\n  sensorSelector: SensorSelector;\n  onClose: () => void;\n}> = ({isOpen, sensorSelector, cursor, onClose}) => {\n  const [cursorValue, setCursorValue] = React.useState(cursor);\n  const [isSaving, setIsSaving] = React.useState(false);\n  const [requestSet] = useMutation<SetSensorCursorMutation, SetSensorCursorMutationVariables>(\n    SET_CURSOR_MUTATION,\n  );\n\n  const onSave = async () => {\n    setIsSaving(true);\n    const {data} = await requestSet({\n      variables: {sensorSelector, cursor: cursorValue},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={() => {\n        onClose();\n        setCursorValue(cursor);\n      }}\n      style={{\n        width: '500px',\n      }}\n      title={`Edit ${sensorSelector.sensorName} cursor`}\n    >\n      <DialogBody>\n        <TextArea\n          value={cursorValue}\n          $resize=\"vertical\"\n          onChange={(e) => setCursorValue(e.target.value)}\n          style={{width: '100%'}}\n        />\n      </DialogBody>\n      <DialogFooter>\n        <Button onClick={onClose}>Cancel</Button>\n        <Button intent=\"primary\" onClick={onSave} disabled={isSaving}>\n          Set cursor value\n        </Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport const SET_CURSOR_MUTATION = gql`\n  mutation SetSensorCursorMutation($sensorSelector: SensorSelector!, $cursor: String) {\n    setSensorCursor(sensorSelector: $sensorSelector, cursor: $cursor) {\n      ... on Sensor {\n        id\n        sensorState {\n          id\n          status\n          typeSpecificData {\n            ... on SensorData {\n              lastCursor\n            }\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {gql, useMutation} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n} from '@dagster-io/ui';\nimport React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {RepoAddress} from '../workspace/types';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\n\ntype DryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog: React.FC<Props> = (props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"sensors\"\n      title={name}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun: React.FC<Props> = ({repoAddress, name, currentCursor, onClose, jobName}) => {\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n\n  const [cursor, setCursor] = React.useState(currentCursor);\n\n  const [submitting, setSubmitting] = React.useState(false);\n  const [error, setError] = React.useState<PythonErrorFragment | null>(null);\n  const [\n    sensorExecutionData,\n    setSensorExecutionData,\n  ] = React.useState<DryRunInstigationTick | null>(null);\n\n  const sensorSelector = React.useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n\n  const submitTest = React.useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const buttons = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button\n            data-testid={testId('test-again')}\n            onClick={() => {\n              setSensorExecutionData(null);\n              setError(null);\n            }}\n          >\n            Test again\n          </Button>\n          <Button intent=\"primary\" onClick={onClose}>\n            Close\n          </Button>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('evaluate')}>\n            Evaluate\n          </Button>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, onClose, submitTest]);\n\n  const [cursorState, setCursorState] = React.useState<'Unpersisted' | 'Persisting' | 'Persisted'>(\n    'Unpersisted',\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n\n  const onPersistCursorValue = React.useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      assertUnreachable('Did not expect to get here' as never);\n    }\n    setCursorState('Persisting');\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n      setCursorState('Persisted');\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.White}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const content = React.useMemo(() => {\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Box>\n            <Grid>\n              <div>\n                <Subheading>Result</Subheading>\n                <Box flex={{grow: 1, alignItems: 'center'}}>\n                  <div>\n                    {error ? (\n                      <Tag intent=\"danger\">Failed</Tag>\n                    ) : numRunRequests ? (\n                      <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                    ) : (\n                      <Tag intent=\"warning\">Skipped</Tag>\n                    )}\n                  </div>\n                </Box>\n              </div>\n              <div>\n                <Subheading>Used cursor value</Subheading>\n                <pre>{cursor?.length ? cursor : 'None'}</pre>\n              </div>\n              <div>\n                <Subheading>Computed cursor value</Subheading>\n                <pre>\n                  {sensorExecutionData?.evaluationResult?.cursor?.length\n                    ? sensorExecutionData?.evaluationResult.cursor\n                    : error\n                    ? 'Error'\n                    : 'None'}\n                </pre>\n                {error ||\n                (currentCursor ?? '') ===\n                  (sensorExecutionData?.evaluationResult?.cursor ?? '') ? null : (\n                  <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                    <Button\n                      disabled={['Persisting', 'Persisted'].includes(cursorState)}\n                      loading={cursorState === 'Persisting'}\n                      onClick={onPersistCursorValue}\n                    >\n                      <span data-testid={testId('persist-cursor')}>\n                        {cursorState === 'Persisting'\n                          ? 'Persisting'\n                          : cursorState === 'Persisted'\n                          ? 'Persisted'\n                          : 'Persist computed cursor value'}\n                      </span>\n                    </Button>\n                    {cursorState === 'Persisted' ? (\n                      <Icon name=\"check_circle\" color={Colors.Green500} />\n                    ) : null}\n                  </Box>\n                )}\n              </div>\n            </Grid>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <div>\n                <Subheading>Skip reason</Subheading>\n                <div>\n                  {sensorExecutionData?.evaluationResult?.skipReason || 'No skip reason was output'}\n                </div>\n              </div>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <RunRequestTable\n                runRequests={runRequests}\n                name={name}\n                jobName={jobName}\n                isJob={true}\n                repoAddress={repoAddress}\n              />\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n          />\n          {currentCursor === '' || !currentCursor ? (\n            <Box padding={{top: 16, bottom: 32}} flex={{justifyContent: 'center'}}>\n              <NonIdealState\n                icon=\"no-results\"\n                title=\"You're not using a cursor\"\n                description={\n                  <span>\n                    Check our{' '}\n                    <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n                      sensor documentation\n                    </a>{' '}\n                    to learn how to use cursors\n                  </span>\n                }\n              />\n            </Box>\n          ) : null}\n        </Box>\n      );\n    }\n  }, [\n    sensorExecutionData,\n    error,\n    submitting,\n    currentCursor,\n    cursorState,\n    onPersistCursorValue,\n    name,\n    jobName,\n    repoAddress,\n    cursor,\n  ]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder>{buttons}</DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.KeylineGray};\n  margin-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n","import {\n  Box,\n  Button,\n  Group,\n  MetadataTableWIP,\n  PageHeader,\n  Tag,\n  Heading,\n  FontFamily,\n  ButtonLink,\n  Icon,\n  Colors,\n} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationStatus, InstigationType, SensorType} from '../graphql/types';\nimport {TickTag} from '../instigation/InstigationTick';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {SensorDryRunDialog} from '../ticks/SensorDryRunDialog';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorSwitch} from './SensorSwitch';\nimport {SensorFragment} from './types/SensorFragment.types';\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  minIntervalSeconds = Math.max(30, minIntervalSeconds);\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails: React.FC<{\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n}> = ({sensor, repoAddress, daemonHealth, refreshState}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    targets,\n    metadata,\n  } = sensor;\n\n  const [isCursorEditing, setCursorEditing] = React.useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n  const repo = useRepository(repoAddress);\n  const pipelinesAndJobs = repo?.repository.pipelines;\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const targetCount = targets?.length || 0;\n\n  const targetNames = React.useMemo(\n    () => new Set((targets || []).map((target) => target.pipelineName)),\n    [targets],\n  );\n\n  const anyPipelines = React.useMemo(() => {\n    return (pipelinesAndJobs || []).some(\n      (pipelineOrJob) => !pipelineOrJob.isJob && targetNames.has(pipelineOrJob.name),\n    );\n  }, [pipelinesAndJobs, targetNames]);\n\n  const pipelineOrJobLabel = React.useMemo(() => {\n    if (anyPipelines) {\n      return targetCount > 1 ? 'Jobs / Pipelines' : 'Pipeline';\n    }\n    return targetCount > 1 ? 'Jobs' : 'Job';\n  }, [anyPipelines, targetCount]);\n\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const [showTestTickDialog, setShowTestTickDialog] = React.useState(false);\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 12}}>\n            <Heading>{name}</Heading>\n            <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n          </Box>\n        }\n        icon=\"sensors\"\n        tags={\n          <>\n            <Tag icon=\"sensors\">\n              Sensor in <RepositoryLink repoAddress={repoAddress} />\n            </Tag>\n            {sensor.nextTick && daemonHealth && running ? (\n              <Tag icon=\"timer\">\n                Next tick: <TimestampDisplay timestamp={sensor.nextTick.timestamp!} />\n              </Tag>\n            ) : null}\n          </>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            {sensor.sensorType === SensorType.STANDARD ? (\n              <Button\n                onClick={() => {\n                  setShowTestTickDialog(true);\n                }}\n              >\n                Test Sensor\n              </Button>\n            ) : null}\n          </Box>\n        }\n      />\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => {\n          setShowTestTickDialog(false);\n        }}\n        currentCursor={cursor || ''}\n        name={sensor.name}\n        repoAddress={repoAddress}\n        jobName={sensor.targets?.[0]?.pipelineName || ''}\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} />\n                    <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.targets && sensor.targets.length ? (\n            <tr>\n              <td>{pipelineOrJobLabel}</td>\n              <td>\n                <Group direction=\"column\" spacing={2}>\n                  {sensor.targets.map((target) =>\n                    target.pipelineName ? (\n                      <PipelineReference\n                        key={target.pipelineName}\n                        pipelineName={target.pipelineName}\n                        pipelineHrefContext={repoAddress}\n                        isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                      />\n                    ) : null,\n                  )}\n                </Group>\n              </td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Cursor</td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <span style={{fontFamily: FontFamily.monospace, fontSize: '16px'}}>\n                  {cursor ? cursor : 'None'}\n                </span>\n                <ButtonLink onClick={() => setCursorEditing(true)} style={{fontSize: '12px'}}>\n                  <Box flex={{direction: 'row', alignItems: 'flex-end', gap: 4}}>\n                    <Icon name=\"edit\" color={Colors.Blue500} size={12} />\n                    <span>Edit</span>\n                  </Box>\n                </ButtonLink>\n              </Box>\n              <EditCursorDialog\n                isOpen={isCursorEditing}\n                sensorSelector={sensorSelector}\n                cursor={cursor ? cursor : ''}\n                onClose={() => setCursorEditing(false)}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <Box flex={{direction: 'column', gap: 2}}>\n                  {metadata.assetKeys.map((key) => (\n                    <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                  ))}\n                </Box>\n              </td>\n            </tr>\n          ) : null}\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SensorInfo: React.FC<Props> = ({daemonHealth, ...boxProps}) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const sensorHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SENSOR',\n    );\n    if (sensorHealths[0]) {\n      const sensorHealth = sensorHealths[0];\n      healthy = !!(sensorHealth.required && sensorHealth.healthy);\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The sensor daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a\n                href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n","import {Box, Colors, Icon, Table, Tag} from '@dagster-io/ui';\nimport qs from 'qs';\nimport React from 'react';\n\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {AnchorButton} from '../ui/AnchorButton';\nimport {useRepository} from '../workspace/WorkspaceContext';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable: React.FC<Props> = ({\n  runRequests,\n  isJob,\n  repoAddress,\n  mode,\n  jobName,\n}) => {\n  const repo = useRepository(repoAddress);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td>\n              <Box flex={{direction: 'row', gap: 8}}>\n                {filterTags(request.tags).map(({key, value}) => (\n                  <Tag key={key}>\n                    {key}: {value}\n                  </Tag>\n                ))}\n              </Box>\n            </td>\n            <td>\n              <AnchorButton\n                icon={<Icon name=\"edit\" />}\n                target=\"_blank\"\n                to={workspacePathFromAddress(\n                  repoAddress,\n                  `/pipeline_or_job/${jobName}/playground/setup?${qs.stringify({\n                    mode,\n                    config: request.runConfigYaml,\n                    tags: request.tags,\n                    assetSelection: request.assetSelection?.map(({path}) => ({\n                      assetKey: {path},\n                    })),\n                  })}`,\n                )}\n              >\n                Open in Launchpad\n              </AnchorButton>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.KeylineGray}`}}>\n        <thead>\n          <tr>\n            <th>{isJob ? 'Job' : 'Pipeline'} name</th>\n            <th>Tags</th>\n            <th>Configuration</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\n// Filter out tags we already display in other ways\nfunction filterTags(tags: Array<{key: string; value: any}>) {\n  return tags.filter(({key}) => {\n    // Exclude the tag that specifies the schedule if this is a schedule name\n    return !['dagster/schedule_name'].includes(key);\n  });\n}\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui';\nimport React from 'react';\n\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = React.useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.KeylineGray}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {gql} from '@apollo/client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    assetSelection {\n      path\n    }\n  }\n`;\n","import {Checkbox, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\ninterface Props {\n  checkedCount: number;\n  totalCount: number;\n  onToggleAll: (checked: boolean) => void;\n}\n\nexport const CheckAllBox = ({checkedCount, totalCount, onToggleAll}: Props) => {\n  return (\n    <Tooltip content={`${checkedCount} of ${totalCount} selected`} placement=\"top\">\n      <Checkbox\n        indeterminate={checkedCount > 0 && checkedCount !== totalCount}\n        checked={checkedCount > 0 && checkedCount === totalCount}\n        onChange={(e) => {\n          if (e.target instanceof HTMLInputElement) {\n            onToggleAll(checkedCount !== totalCount);\n          }\n        }}\n      />\n    </Tooltip>\n  );\n};\n","import * as React from 'react';\n\nimport {InstigationStatus} from '../../graphql/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useInstigationStatusFilter = () => {\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    getStringValue: (value) => value,\n  });\n};\n","export const findDuplicateRepoNames = (repoNames: string[]) => {\n  const uniques = new Set<string>();\n  const duplicates = new Set<string>();\n  repoNames.forEach((repoName) => {\n    if (uniques.has(repoName)) {\n      duplicates.add(repoName);\n    } else {\n      uniques.add(repoName);\n    }\n  });\n  return duplicates;\n};\n","import * as React from 'react';\n\nimport {AppContext} from '../app/AppContext';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst validateExpandedKeys = (parsed: unknown) => (Array.isArray(parsed) ? parsed : []);\nexport const buildStorageKey = (basePath: string, key: string) => `${basePath}:dagit.${key}`;\n\n/**\n * Use localStorage to persist the expanded/collapsed visual state of repository containers,\n * e.g. for the left nav or run timeline.\n */\nexport const useRepoExpansionState = (collapsedKey: string, allKeys: string[]) => {\n  const {basePath} = React.useContext(AppContext);\n\n  const collapsedStorageKey = buildStorageKey(basePath, collapsedKey);\n  const [collapsedKeys, setCollapsedKeys] = useStateWithStorage<string[]>(\n    collapsedStorageKey,\n    validateExpandedKeys,\n  );\n\n  const onToggle = React.useCallback(\n    (repoAddress: RepoAddress) => {\n      const key = repoAddressAsHumanString(repoAddress);\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        if (nextCollapsedKeys.has(key)) {\n          nextCollapsedKeys.delete(key);\n        } else {\n          nextCollapsedKeys.add(key);\n        }\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [setCollapsedKeys],\n  );\n\n  const onToggleAll = React.useCallback(\n    (expand: boolean) => {\n      setCollapsedKeys((current) => {\n        const nextCollapsedKeys = new Set(current || []);\n        allKeys.forEach((key) => {\n          expand ? nextCollapsedKeys.delete(key) : nextCollapsedKeys.add(key);\n        });\n        return Array.from(nextCollapsedKeys);\n      });\n    },\n    [allKeys, setCollapsedKeys],\n  );\n\n  const expandedKeys = React.useMemo(() => {\n    const collapsedSet = new Set(collapsedKeys);\n    return allKeys.filter((key) => !collapsedSet.has(key));\n  }, [allKeys, collapsedKeys]);\n\n  return React.useMemo(\n    () => ({\n      expandedKeys,\n      onToggle,\n      onToggleAll,\n    }),\n    [expandedKeys, onToggle, onToggleAll],\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Button, Icon, Menu, MenuItem, Popover, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RUN_FRAGMENT} from '../runs/RunFragments';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReExecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const {\n    permissions: {canLaunchPipelineReexecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, {data}] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n\n  const fetchIfPossible = React.useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const onLaunch = useJobReExecution(run);\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => onLaunch({type: 'all'})}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => onLaunch({type: 'from-failure'})}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <Popover\n      onOpened={() => fetchIfPossible()}\n      content={\n        <Menu>\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n            })}\n            icon=\"job\"\n            text=\"View job\"\n          />\n          <MenuLink\n            to={workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: job.name,\n              isJob: job.isJob,\n              path: '/runs',\n            })}\n            icon=\"checklist\"\n            text=\"View all recent runs\"\n          />\n          {canLaunchPipelineReexecution ? (\n            reExecuteAllItem\n          ) : (\n            <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n              {reExecuteAllItem}\n            </Tooltip>\n          )}\n          {canLaunchPipelineReexecution ? (\n            reExecuteFromFailureItem\n          ) : (\n            <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n              {reExecuteFromFailureItem}\n            </Tooltip>\n          )}\n        </Menu>\n      }\n      position=\"bottom-left\"\n    >\n      <Button icon={<Icon name=\"expand_more\" />} />\n    </Popover>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        parentPipelineSnapshotId\n        ...RunFragment\n      }\n    }\n  }\n\n  ${RUN_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Colors, MiddleTruncate} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const {schedules, sensors} = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const {schedules, sensors} = data.pipelineOrError;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [data]);\n\n  const latestRuns = React.useMemo(() => {\n    if (data?.pipelineOrError.__typename === 'Pipeline') {\n      const runs = data.pipelineOrError.runs;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [data]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}>\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>\n            {data?.pipelineOrError.__typename === 'Pipeline'\n              ? data.pipelineOrError.description\n              : ''}\n          </CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu job={{isJob, name, runs: latestRuns}} repoAddress={repoAddress} />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp4-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {ScheduleSwitch, SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS = '1fr 1fr 76px 148px 210px 92px';\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySchedule, queryResult] = useLazyQuery<\n    SingleScheduleQuery,\n    SingleScheduleQueryVariables\n  >(SINGLE_SCHEDULE_QUERY, {\n    variables: {\n      selector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useDelayedRowQuery(querySchedule);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const cronString = scheduleData\n    ? humanCronString(scheduleData.cronSchedule, scheduleData.executionTimezone || 'UTC')\n    : '';\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        $showCheckboxColumn={showCheckboxColumn}\n      >\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            {scheduleData ? (\n              <Caption>\n                <PipelineReference\n                  showIcon\n                  size=\"small\"\n                  pipelineName={scheduleData.pipelineName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={isJob}\n                />\n              </Caption>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <ScheduleStringContainer style={{maxWidth: '100%'}}>\n                <Tooltip position=\"top-left\" content={scheduleData.cronSchedule} display=\"block\">\n                  <div\n                    style={{\n                      color: Colors.Dark,\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                    title={cronString}\n                  >\n                    {cronString}\n                  </div>\n                </Tooltip>\n              </ScheduleStringContainer>\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState.ticks[0] ? (\n            <div>\n              <TickTag\n                tick={scheduleData.scheduleState.ticks[0]}\n                instigationType={InstigationType.SCHEDULE}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.Gray400}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleStringContainer = styled.div`\n  max-width: 100%;\n\n  .bp4-popover2-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {gql, useLazyQuery} from '@apollo/client';\nimport {Box, Caption, Checkbox, Colors, MiddleTruncate, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components/macro';\n\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {AssetLink} from '../assets/AssetLink';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TickTag, TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SensorSwitch, SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, Row, RowCell} from '../ui/VirtualizedTable';\n\nimport {LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\n\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = '60px 1.5fr 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 76px 120px 148px 180px';\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  const [querySensor, queryResult] = useLazyQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n    },\n  );\n\n  useDelayedRowQuery(querySensor);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid\n        border={{side: 'bottom', width: 1, color: Colors.KeylineGray}}\n        $showCheckboxColumn={showCheckboxColumn}\n      >\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.Gray500,\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}} style={{fontSize: '12px'}}>\n            {sensorData?.targets && sensorData.targets.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.targets.map((target) => (\n                  <PipelineReference\n                    key={target.pipelineName}\n                    showIcon\n                    size=\"small\"\n                    pipelineName={target.pipelineName}\n                    pipelineHrefContext={repoAddress}\n                    isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n                  />\n                ))}\n              </Box>\n            ) : null}\n            {sensorData?.metadata.assetKeys && sensorData.metadata.assetKeys.length ? (\n              <Box flex={{direction: 'column', gap: 2}}>\n                {sensorData.metadata.assetKeys.map((key) => (\n                  <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n                ))}\n              </Box>\n            ) : null}\n          </Box>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.Dark}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState.ticks[0] ? (\n            <div>\n              <TickTag\n                tick={sensorData.sensorState.ticks[0]}\n                instigationType={InstigationType.SENSOR}\n              />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <Box\n      border={{side: 'horizontal', width: 1, color: Colors.KeylineGray}}\n      style={{\n        display: 'grid',\n        gridTemplateColumns: checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n      }}\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Job / Asset</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </Box>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {LazyQueryExecFunction, QueryResult} from '@apollo/client';\nimport {Caption, Colors} from '@dagster-io/ui';\nimport * as React from 'react';\nimport styled from 'styled-components/macro';\n\nimport {RepoSectionHeader} from '../runs/RepoSectionHeader';\nimport {Row} from '../ui/VirtualizedTable';\n\nimport {RepoAddress} from './types';\n\nexport const RepoRow: React.FC<{\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n  showLocation: boolean;\n  rightElement: React.ReactNode;\n  expanded: boolean;\n  onToggle: (repoAddress: RepoAddress) => void;\n  onToggleAll: (expanded: boolean) => void;\n}> = ({\n  repoAddress,\n  height,\n  start,\n  expanded,\n  onToggle,\n  onToggleAll,\n  showLocation,\n  rightElement,\n}) => {\n  return (\n    <Row $height={height} $start={start}>\n      <RepoSectionHeader\n        repoName={repoAddress.name}\n        repoLocation={repoAddress.location}\n        expanded={expanded}\n        onClick={(e: React.MouseEvent) =>\n          e.getModifierState('Shift') ? onToggleAll(!expanded) : onToggle(repoAddress)\n        }\n        showLocation={showLocation}\n        rightElement={rightElement}\n      />\n    </Row>\n  );\n};\n\nexport const LoadingOrNone: React.FC<{\n  queryResult: QueryResult<any, any>;\n  noneString?: React.ReactNode;\n}> = ({queryResult, noneString = 'None'}) => {\n  const {called, loading, data} = queryResult;\n  return (\n    <div style={{color: Colors.Gray500}}>\n      {!called || (loading && !data) ? 'Loading' : noneString}\n    </div>\n  );\n};\n\nexport const CaptionText = ({children}: {children: React.ReactNode}) => {\n  return (\n    <CaptionTextContainer>\n      <Caption>{children}</Caption>\n    </CaptionTextContainer>\n  );\n};\n\nconst CaptionTextContainer = styled.div`\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${Caption} {\n    color: ${Colors.Gray500};\n    white-space: nowrap;\n  }\n`;\n\nconst JOB_QUERY_DELAY = 100;\n\nexport const useDelayedRowQuery = (lazyQueryFn: LazyQueryExecFunction<any, any>) => {\n  React.useEffect(() => {\n    const timer = setTimeout(() => {\n      lazyQueryFn();\n    }, JOB_QUERY_DELAY);\n\n    return () => clearTimeout(timer);\n  }, [lazyQueryFn]);\n};\n","import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const WorkspaceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"assets\" title=\"Assets\" to={workspacePathFromAddress(repoAddress, '/assets')} />\n        <TabLink id=\"jobs\" title=\"Jobs\" to={workspacePathFromAddress(repoAddress, '/jobs')} />\n        <TabLink\n          id=\"schedules\"\n          title=\"Schedules\"\n          to={workspacePathFromAddress(repoAddress, '/schedules')}\n        />\n        <TabLink\n          id=\"sensors\"\n          title=\"Sensors\"\n          to={workspacePathFromAddress(repoAddress, '/sensors')}\n        />\n        <TabLink id=\"graphs\" title=\"Graphs\" to={workspacePathFromAddress(repoAddress, '/graphs')} />\n        <TabLink id=\"ops\" title=\"Ops\" to={workspacePathFromAddress(repoAddress, '/ops')} />\n        <TabLink\n          id=\"resources\"\n          title=\"Resources\"\n          to={workspacePathFromAddress(repoAddress, '/resources')}\n        />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {QueryResult} from '@apollo/client';\nimport {PageHeader, Box, Heading, Colors, Button, Icon, Tooltip} from '@dagster-io/ui';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {QueryRefreshState} from '../app/QueryRefresh';\nimport {\n  NO_RELOAD_PERMISSION_TEXT,\n  ReloadRepositoryLocationButton,\n} from '../nav/ReloadRepositoryLocationButton';\n\nimport {WorkspaceTabs} from './WorkspaceTabs';\nimport {repoAddressAsHumanString} from './repoAddressAsString';\nimport {RepoAddress} from './types';\n\ninterface Props<TData> {\n  repoAddress: RepoAddress;\n  tab: string;\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n}\n\nexport const WorkspaceHeader = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {repoAddress, tab, refreshState, queryData} = props;\n\n  return (\n    <PageHeader\n      title={\n        <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n          <Heading>\n            <Link to=\"/locations\" style={{color: Colors.Dark}}>\n              Deployment\n            </Link>\n          </Heading>\n          <Heading>/</Heading>\n          <Heading style={{color: Colors.Gray600}}>{repoAddressAsHumanString(repoAddress)}</Heading>\n        </Box>\n      }\n      tabs={\n        <WorkspaceTabs\n          repoAddress={repoAddress}\n          tab={tab}\n          refreshState={refreshState}\n          queryData={queryData}\n        />\n      }\n      right={\n        <ReloadRepositoryLocationButton\n          location={repoAddress.location}\n          ChildComponent={({tryReload, reloading, hasReloadPermission}) => {\n            return (\n              <Tooltip\n                canShow={!hasReloadPermission}\n                content={hasReloadPermission ? '' : NO_RELOAD_PERMISSION_TEXT}\n                useDisabledButtonTooltipFix\n              >\n                <Button\n                  onClick={() => tryReload()}\n                  loading={reloading}\n                  disabled={!hasReloadPermission}\n                  icon={<Icon name=\"refresh\" />}\n                >\n                  Reload definitions\n                </Button>\n              </Tooltip>\n            );\n          }}\n        />\n      }\n    />\n  );\n};\n"],"names":["BackfillPartitionsRequestedDialog","_ref","backfill","onClose","_jsxs","Dialog","isOpen","title","children","_jsx","style","fontSize","fontFamily","FontFamily","id","DialogBody","partitionNames","Box","flex","direction","gap","maxHeight","overflowY","map","partitionName","DialogFooter","topBorder","Button","onClick","NoBackfillStatusQuery","Promise","resolve","data","undefined","called","loading","BackfillRow","allPartitions","showBackfillTarget","onTerminateBackfill","onResumeBackfill","onShowStepStatus","onShowPartitionsRequested","statusDetails","useLazyQuery","SINGLE_BACKFILL_STATUS_DETAILS_QUERY","variables","backfillId","notifyOnNetworkStatusChange","statusCounts","SINGLE_BACKFILL_STATUS_COUNTS_QUERY","statusUnsupported","numPartitions","_ref2","BACKFILL_PARTITIONS_COUNTS_THRESHOLD","_ref3","_slicedToArray","statusQueryFn","statusQueryResult","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","_React$useMemo","React","_data$partitionBackfi","partitionBackfillOrError","__typename","counts","statuses","Object","fromEntries","partitionStatusCounts","e","runStatus","count","partitionStatuses","results","countBy","k","canCancelRuns","queuedCount","RunStatus","startedCount","width","Mono","lineHeight","Link","to","isAssetBackfill","concat","runsPathWithFilters","token","value","timestamp","TimestampDisplay","BackfillTarget","BackfillRequestedRange","onExpand","BackfillStatusTag","LoadingOrNone","queryResult","noneString","isValidSerialization","BackfillRunStatus","BackfillMenu","_ref4","history","useHistory","hasResumePermission","runsUrl","Popover","content","Menu","hasCancelPermission","_Fragment","status","BulkActionStatus","numCancelable","MenuItem","text","icon","intent","partitionSet","push","position","Icon","name","_ref5","partitionCounts","entries","reduce","_ref6","_ref7","health","runStatusForPartitionKey","key","_statuses$filter$","filter","s","PartitionStatus","splitPartitions","entry","find","r","runId","RunStatusTagsWithCounts","succeededCount","inProgressCount","failedCount","_ref8","assetSelection","partitionSetName","repoAddress","buildRepoAddress","repositoryOrigin","repositoryName","repositoryLocationName","repo","useRepository","isHiddenAssetPartitionSet","isHiddenAssetGroupJob","fontWeight","workspacePipelinePath","repoName","repoLocation","pipelineName","isJob","isThisThingAJob","path","encodeURIComponent","alignItems","color","Colors","workspacePathFromAddress","repoAddressAsHumanString","length","AssetKeyTagCollection","assetKeys","modalTitle","PipelineReference","showIcon","size","pipelineHrefContext","location","_ref9","numPartitionsLabel","toLocaleString","TagButton","Tag","interactive","RequestedPartitionStatusBar","all","requested","_ref10","includes","small","hideStatusTooltip","_ref11","margin","bottom","error","showCustomAlert","body","PythonErrorInfo","Array","from","inProgressStatuses","some","styled","displayName","componentId","gql","_templateObject","_taggedTemplateLiteral","_templateObject2","BackfillStepStatusDialog","BackfillStepStatusDialogContent","_React$useState","_React$useState2","pageSize","setPageSize","_React$useState3","_React$useState4","offset","setOffset","runsFilter","partitions","usePartitionStepQuery","partitionTagName","DagsterTag","repositorySelector","repoAddressToSelector","jobName","skipQuery","PartitionPerOpStatus","BackfillTerminationDialog","onComplete","_useMutation","useMutation","CANCEL_BACKFILL_MUTATION","cancelBackfill","useQuery","skip","isSubmitting","setIsSubmitting","unfinishedMap","unfinishedPartitions","partition","cancelableStatuses","accum","_objectSpread","_defineProperty","numUnscheduled","cancel","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","disabled","TerminationDialog","keys","selectedRuns","PYTHON_ERROR_FRAGMENT","BackfillTable","_ref$showBackfillTarg","backfills","refetch","terminationBackfill","setTerminationBackfill","stepStatusBackfill","setStepStatusBackfill","_React$useState5","_React$useState6","partitionsRequestedBackfill","setPartitionsRequestedBackfill","RESUME_BACKFILL_MUTATION","resumeBackfill","candidateId","_backfills$filter","resume","_yield$resumeBackfill","sent","resumePartitionBackfill","showSharedToaster","message","Group","spacing","action","_x","Table","BACKFILL_TABLE_FRAGMENT","LastRunSummary","run","_ref$showHover","showHover","_ref$showButton","showButton","_ref$showSummary","showSummary","justifyContent","tagElement","RunStatusIndicator","RunTime","interactionKind","RunStatusOverlay","hoverOpenDelay","tag","RunStateSummary","failedStatuses","StepSummaryForRun","AnchorButton","props","STEP_SUMMARY_FOR_RUN_QUERY","pipelineRunOrError","relevantSteps","stepStats","step","StepEventStatus","stepCount","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","stepKey","TickTag","tick","instigationType","open","setOpen","InstigationTickStatus","runIds","ButtonLink","underline","RunList","runKeys","Tooltip","skipReason","targetTagName","showError","InstigationType","LinkButton","minimal","marginLeft","assertUnreachable","_useQuery","LAUNCHED_RUN_LIST_QUERY","padding","Spinner","purpose","pipelineRunsOrError","NonIdealState","description","RunTable","runs","FailedRunList","originRunIds","border","side","Body","TICK_TAG_FRAGMENT","RUN_TABLE_RUN_FRAGMENT","InstigatedRunStatus","instigationState","instigationRun","RunStatusLink","target","rel","titleForRun","RUN_STATUS_FRAGMENT","INSTIGATION_STATE_FRAGMENT","RUN_TIME_FRAGMENT","StatusTable","filterPermissionedInstigationState","hasStartPermission","InstigationStatus","hasStopPermission","instigationStateSummary","instigationStates","_step","anyOff","anyOn","_iterator","_createForOfIteratorHelper","n","done","err","f","initialState","completion","completed","errors","reducer","prevState","type","useInstigationStateReducer","BASIC_INSTIGATION_STATE_FRAGMENT","OVERVIEW_COLLAPSED_KEY","PartitionRunList","PARTITION_RUN_LIST_QUERY","tags","getVisibleItemCount","viewportWidth","ceil","BOX_SIZE","PartitionPerAssetStatus","_step3","assetHealth","rangeDimension","rangeDimensionIdx","assetQueryItems","rest","_objectWithoutProperties","_excluded","rangesByAssetKey","_iterator3","_a$dimensions$rangeDi","a","dimensions","ranges","rangesForSingleDimension","tokenForAssetKey","assetKey","layoutBoxesWithRangeDimension","buildLayout","nodes","mode","GanttChartMode","boxes","b","node","stepRows","box","x","totalFailurePercent","finalFailurePercent","partitionColumns","partitionKeys","partitionKey","partitionKeyIdx","idx","runsLoaded","steps","unix","assetPartitionStatusToSquareColor","partitionStatusAtIndex","PartitionStepStatus","showLatestRun","state","AssetPartitionStatus","_pipeline$data","_excluded2","pipelineSelector","pipeline","PARTITION_STEP_STATUS_PIPELINE_QUERY","solidHandles","pipelineSnapshotOrError","useMatrixData","stepQuery","_useViewport","useViewport","viewport","containerProps","hovered","setHovered","focused","setFocused","sortPartitionSteps","stepsByName","forEach","stepRow","visibleCount","visibleStart","max","visibleEnd","visibleColumns","slice","_timeboundsOfPartitio","minUnix","Date","now","maxUnix","_step2","_iterator2","min","timeboundsOfPartitions","_timeboundsOfPartitio2","topLabelHeight","topLabelHeightForLabels","p","PartitionRunMatrixContainer","autoFocus","display","GridFloatingContainer","floating","GridColumn","flexShrink","overflow","TopLabel","height","LeftLabel","paddingLeft","Divider","stepName","PagerControl","$direction","right","zIndex","TopLabelTilted","$height","label","textAlign","PartitionSquare","PARTITION_MATRIX_SOLID_HANDLE_FRAGMENT","TOOLTIP_STYLE","JSON","stringify","top","left","squareStatus","opened","setOpened","toLowerCase","className","onMouseEnter","onMouseLeave","placement","onOpening","onClosed","MenuLink","linkToRunEvent","STEP_STATUS_COLORS","SUCCESS","SUCCESS_SKIPPED","FAILURE","FAILURE_SKIPPED","SKIPPED","IN_PROGRESS","flatGradient","multiselectFocused","TopLabelTiltedInner","join","TITLE_MARGIN_BOTTOM","labels","maxlength","_toConsumableArray","GRID_FLOATING_CONTAINER_WIDTH","DYNAMIC_STEP_REGEX_SUFFIX","MISSING_STEP_STATUSES","Set","getStartTime","startTime","byStartTimeAsc","isStepKeyForNode","nodeName","dynamicRegex","RegExp","match","inputs","cachedMatrixData","current","shallowCompareKeys","result","explodeCompositesInHandleGraph","h","solid","solidsFiltered","filterByQuery","layout","options","partitionsByName","sort","_lastRun$stepStats$fi","blankState","previousRunStatus","lastRun","lastRunStepStatus","stats","has","_currRun$stepStats$fi","currRunStatus","partitionsWithARun","totalFailures","finalFailures","endsWith","round","showFailuresAndGapsOnly","_loop","ii","splice","every","buildMatrixData","PARTITION_MATRIX_STEP_RUN_FRAGMENT","GRAPH_EXPLORER_SOLID_HANDLE_FRAGMENT","InitialDataState","loadingCursorIdx","client","useApolloClient","version","dataState","setDataState","_serializedRunTags","_token$value$split","split","_token$value$split2","v","runTags","parse","_callee2","stopIdx","_ret","timer","_context3","abrupt","nextCursorIdx","sliceNames","fetched","_context2","partitionSetTag","partitionTag","runTagsFilter","fetchRunsForFilter","limit","delegateYield","t0","setInterval","recent","pending","relevant","clearInterval","t","updated","o","byName","_r$tags$find","_byName$partitionName","assemblePartitions","_x2","_fetchRunsForFilter","_callee3","_context4","fetchPolicy","PARTITION_STEP_LOADER_QUERY","titles","configuration","uses","ResourceTabs","resourceName","numUses","useRouteMatch","active","params","tab","Tabs","selectedTabId","TabLink","succinctType","resourceType","pop","resourceDisplayName","resource","startsWith","SectionHeader","vertical","background","ResourceRoot","_queryResult$data","_queryResult$data2","_queryResult$data3","_useRouteMatch","useTrackPageView","useParams","useDocumentTitle","resourceSelector","RESOURCE_ROOT_QUERY","topLevelResourceDetailsOrError","parentResources","assetKeysUsing","jobsOpsUsing","Page","PageHeader","Heading","tabs","Loading","allowStaleData","Alert","resourceTypeSuccinct","SplitPanelContainer","identifier","firstInitialPercent","firstMinSize","first","ResourceUses","resourceDetails","ResourceConfig","second","RightInfoPanel","RightInfoPanelContent","SidebarSection","horizontal","RepositoryLink","showRefresh","configuredValues","cv","nestedResources","Subheading","resourceEntry","ResourceEntry","url","colSpan","configFields","field","inName","defaultValue","defaultValueAsJson","hasOwnProperty","actualValue","isDefault","configTypeKey","canShow","AssetLink","jobOps","maxWidth","job","MiddleTruncate","opsUsing","op","handleID","whiteSpace","CaptionMono","RESOURCE_DETAILS_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedResourceRow","start","Row","$start","RowGrid","RowCell","textOverflow","VirtualizedResourceHeader","gridTemplateColumns","HeaderCell","withConfig","VirtualizedResourceTable","resources","parentRef","rowVirtualizer","useVirtualizer","getScrollElement","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","Container","ref","Inner","$totalHeight","index","row","WorkspaceResourcesRoot","searchValue","setSearchValue","selector","queryResultOverview","WORKSPACE_RESOURCES_QUERY","refreshState","sanitizedSearch","trim","toLocaleLowerCase","anySearch","repositoryOrError","allTopLevelResourceDetails","filteredBySearch","searchToLower","WorkspaceHeader","queryData","TextInput","onChange","placeholder","paddingTop","RESOURCE_ENTRY_FRAGMENT","SECTION_HEADER_HEIGHT","RepoSectionHeader","expanded","showLocation","rightElement","isDunderRepoName","DUNDER_REPO_NAME","SectionHeaderButton","$open","RepoName","RepoLocation","IconWrapper","RunStatusPez","_props$opacity","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","RunStatusPezList","fade","OverlayContainer","OverlayTitle","RunRow","SummaryContainer","statusToColor","mergeStatusToBackground","scheduled","queued","inProgress","failed","succeeded","queuedStatuses","successStatuses","statusArr","element","runCount","colors","pct","Boolean","colorString","nextPct","pctSoFar","colorForStatus","toFixed","RunTimeline","_props$loading","jobs","range","measureRef","_range","includesTicks","buckets","repoKey","repoAddressAsURLString","jobsForRepo","allKeys","_useRepoExpansionStat","useRepoExpansionState","expandedKeys","onToggle","onToggleAll","flattened","flat","bucket","repoAddressFromPath","jobCount","_","DATE_TIME_HEIGHT","repoOrder","localeCompare","expandedJobCount","duplicateRepoNames","findDuplicateRepoNames","_repoAddressFromPath","anyJobs","TIME_HEADER_HEIGHT","TimeDividers","interval","TimelineHeaderRow","isDuplicateRepoName","RunTimelineRow","RunsEmptyOrLoading","RepoRow","RunStatusTags","inProgressText","succeededText","failedText","StatusSpan","dateTimeOptions","month","day","year","dateTimeOptionsWithTimezone","timeZoneName","timeOnlyOptions","hour","_range2","end","formatDateTime","_React$useContext","TimeContext","storedTimezone","timezone","storedHourCycle","hourCycle","timeZone","browserTimezone","date","language","navigator","Intl","DateTimeFormat","format","useFormatDateTime","dateMarkers","totalTime","startDate","startDateStringWithTimezone","dayBoundaries","cursor","valueOf","dayStart","getTime","dayEnd","setDate","getDate","startLeftMsec","endRight","toString","timeMarkers","firstMarker","markerCount","time","replace","marker","nowLeft","toPrecision","DividerContainer","DividerLabels","DateLabel","TimeLabel","DividerLines","DividerLine","backgroundColor","NowMarker","containerWidth","_range3","batched","batchRunsForTimeline","minChunkWidth","minMultipleWidth","JobName","jobType","RunChunks","batch","RunChunk","$background","$multiple","RunHoverContent","BatchCount","transform","ROW_HEIGHT","_ref12","sliced","remaining","HoverContentJobName","RunStatusDot","TimeElapsed","startUnix","endUnix","overlap","config","rangeLength","batches","consolidated","shift","canBatch","minLeft","unshift","currentStart","currentEnd","nextStart","nextEnd","minStart","maxEnd","ScheduleStateChangeDialog","openWithIntent","schedules","_useInstigationStateR","_useInstigationStateR2","dispatch","START_SCHEDULE_MUTATION","startSchedule","_useMutation3","STOP_SCHEDULE_MUTATION","stopSchedule","schedule","scheduleName","_yield$startSchedule","scheduleSelector","scheduleState","_yield$stopSchedule","scheduleOriginId","scheduleSelectorId","selectorId","stopRunningSchedule","mutate","finish","canQuicklyClose","canEscapeKeyClose","canOutsideClickClose","ProgressBar","animate","NavigationBlock","progressContent","errorCount","successCount","completionContent","buttons","ScheduleBulkActionMenu","onDone","setOpenWithIntent","rightIcon","SchedulerInfo","daemonHealth","boxProps","healthy","schedulerHealths","allDaemonStatuses","daemon","daemonType","schedulerHealth","required","href","makeScheduleKey","SensorStateChangeDialog","sensors","START_SENSOR_MUTATION","startSensor","STOP_SENSOR_MUTATION","stopSensor","sensor","sensorName","_yield$startSensor","sensorSelector","sensorState","_yield$stopSensor","jobOriginId","jobSelectorId","SensorBulkActionMenu","EditCursorDialog","cursorValue","setCursorValue","isSaving","setIsSaving","SET_CURSOR_MUTATION","requestSet","onSave","_yield$requestSet","setSensorCursor","TextArea","$resize","SensorDryRunDialog","SensorDryRun","_sensorExecutionData$2","currentCursor","EVALUATE_SENSOR_MUTATION","sensorDryRun","setCursor","submitting","setSubmitting","setError","_React$useState7","_React$useState8","sensorExecutionData","setSensorExecutionData","submitTest","_result$data","_data$evaluationResul","selectorData","evaluationResult","testId","_React$useState9","_React$useState10","cursorState","setCursorState","setCursorMutation","onPersistCursorValue","_sensorExecutionData$","_yield$setCursorMutat","_error","_sensorExecutionData$3","_sensorExecutionData$4","_sensorExecutionData$5","_sensorExecutionData$6","_sensorExecutionData$7","_sensorExecutionData$8","_sensorExecutionData$9","runRequests","numRunRequests","didSkip","dynamicPartitionRequests","dynamicPartitionsRequests","Grid","grow","RunRequestTable","marginTop","DynamicPartitionRequests","requests","minHeight","RUN_REQUEST_FRAGMENT","humanizeSensorInterval","minIntervalSeconds","SensorDetails","_sensor$targets","_sensor$targets$","_sensor$sensorState","ticks","targets","metadata","isCursorEditing","setCursorEditing","pipelinesAndJobs","repository","pipelines","latestTick","targetCount","targetNames","anyPipelines","pipelineOrJob","pipelineOrJobLabel","typeSpecificData","lastCursor","showTestTickDialog","setShowTestTickDialog","running","SensorSwitch","nextTick","QueryRefreshCountdown","sensorType","SensorType","MetadataTableWIP","SensorInfo","sensorHealths","sensorHealth","makeSensorKey","request","_request$assetSelecti","runKey","runConfigYaml","borderRight","_ref$includeTitle","includeTitle","rows","partitionsDefName","def","DynamicPartitionsRequestType","CheckAllBox","checkedCount","totalCount","Checkbox","indeterminate","checked","HTMLInputElement","useInstigationStatusFilter","useStaticSetFilter","allValues","getKey","renderLabel","getStringValue","repoNames","uniques","duplicates","add","validateExpandedKeys","parsed","isArray","collapsedKey","collapsedStorageKey","basePath","buildStorageKey","AppContext","_useStateWithStorage","useStateWithStorage","_useStateWithStorage2","collapsedKeys","setCollapsedKeys","nextCollapsedKeys","delete","expand","collapsedSet","JobMenu","_usePermissionsForLoc","usePermissionsForLocation","canLaunchPipelineReexecution","permissions","disabledReasons","_useLazyQuery","RUN_RE_EXECUTION_QUERY","_useLazyQuery2","fetchHasExecutionPlan","fetchIfPossible","onLaunch","useJobReExecution","reExecuteAllItem","canRunAllSteps","reExecuteFromFailureItem","canRunFromFailure","onOpened","RUN_FRAGMENT","VirtualizedJobRow","SINGLE_JOB_QUERY","buildPipelineSelector","queryJob","pipelineOrError","_data$pipelineOrError","latestRuns","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","reverse","VirtualizedJobHeader","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","errorDisplay","runningScheduleCount","popoverClassName","fill","TEMPLATE_COLUMNS_WITH_CHECKBOX","VirtualizedScheduleRow","onToggleChecked","showCheckboxColumn","SINGLE_SCHEDULE_QUERY","querySchedule","scheduleData","scheduleOrError","cronString","humanCronString","cronSchedule","executionTimezone","checkboxState","$showCheckboxColumn","shiftKey","nativeEvent","MouseEvent","getModifierState","ScheduleStringContainer","timeFormat","showSeconds","showTimezone","ScheduleSwitch","runningCount","VirtualizedScheduleHeader","checkbox","VirtualizedSensorRow","SINGLE_SENSOR_QUERY","querySensor","sensorData","sensorOrError","VirtualizedSensorHeader","_ref2$noneString","CaptionTextContainer","lazyQueryFn","setTimeout","clearTimeout","WorkspaceTabs","ReloadRepositoryLocationButton","ChildComponent","tryReload","reloading","hasReloadPermission","NO_RELOAD_PERMISSION_TEXT","useDisabledButtonTooltipFix"],"sourceRoot":""}